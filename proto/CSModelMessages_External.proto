syntax = "proto2";

option java_multiple_files = true;

option java_generate_equals_and_hash = true;

option java_package = "com.xtrader.managerapi.model";

option java_outer_classname = "CSContainerModelMessages";

import "CommonModelMessages_External.proto";

// Enum for message types
enum ProtoCSPayloadType {
    PROTO_SPOT_EVENT = 3;
    PROTO_TRENDBAR_LIST_REQ = 113;
    PROTO_TRENDBAR_LIST_RES = 114;
    PROTO_ORDER_ERROR_EVENT = 138;
    PROTO_VERSION_REQ = 154;
    PROTO_VERSION_RES = 155;
    PROTO_MANAGER_BY_ID_REQ = 226;
    PROTO_MANAGER_BY_ID_RES = 227;
    PROTO_MANAGER_LIGHT_TRADER_LIST_REQ = 228;
    PROTO_MANAGER_LIGHT_TRADER_LIST_RES = 229;
    PROTO_EXECUTION_EVENT = 300;
    PROTO_MANAGER_AUTH_REQ = 301;
    PROTO_MANAGER_AUTH_RES = 302;
    PROTO_CHANGE_TRADER_PASSWORD_REQ = 303;
    PROTO_CHANGE_TRADER_PASSWORD_RES = 304;
    PROTO_CHANGE_MANAGER_PASSWORD_REQ = 305;
    PROTO_CHANGE_MANAGER_PASSWORD_RES = 306;
    PROTO_CHECK_TRADER_PASSWORD_REQ = 307;
    PROTO_CHECK_TRADER_PASSWORD_RES = 308;
    PROTO_CHECK_MANAGER_PASSWORD_REQ = 309;
    PROTO_CHECK_MANAGER_PASSWORD_RES = 310;
    PROTO_SERVER_TIME_REQ = 313;
    PROTO_SERVER_TIME_RES = 314;
    PROTO_ORDER_DETAILS_REQ = 321;
    PROTO_ORDER_DETAILS_RES = 322;
    PROTO_POSITION_MARGIN_CHANGED_EVENT = 335;
    PROTO_RECALCULATE_ACCOUNT_MARGIN_REQ = 336;
    PROTO_RECALCULATE_ACCOUNT_MARGIN_RES = 337;
    PROTO_RECALCULATE_SYMBOL_MARGIN_REQ = 338;
    PROTO_RECALCULATE_SYMBOL_MARGIN_RES = 339;
    PROTO_RECALCULATE_DYNAMIC_LEVERAGE_REQ = 347;
    PROTO_RECALCULATE_DYNAMIC_LEVERAGE_RES = 348;
    PROTO_MANAGER_BALANCE_TRANSFER_REQ = 355;
    PROTO_MANAGER_BALANCE_TRANSFER_RES = 356;
    PROTO_CRUD_SCHEDULE_PROFILE_REQ = 360;
    PROTO_CRUD_SCHEDULE_PROFILE_RES = 361;
    PROTO_SCHEDULE_PROFILE_CHANGED_EVENT = 362;
    PROTO_SCHEDULE_PROFILE_LIST_REQ = 363;
    PROTO_SCHEDULE_PROFILE_LIST_RES = 364;
    PROTO_CRUD_COMMISSION_PROFILE_REQ = 365;
    PROTO_CRUD_COMMISSION_PROFILE_RES = 366;
    PROTO_COMMISSION_PROFILE_CHANGED_EVENT = 367;
    PROTO_COMMISSION_PROFILE_LIST_REQ = 368;
    PROTO_COMMISSION_PROFILE_LIST_RES = 369;
    PROTO_CRUD_VOLUME_PROFILE_REQ = 375;
    PROTO_CRUD_VOLUME_PROFILE_RES = 376;
    PROTO_VOLUME_PROFILE_CHANGED_EVENT = 377;
    PROTO_VOLUME_PROFILE_LIST_REQ = 378;
    PROTO_VOLUME_PROFILE_LIST_RES = 379;
    PROTO_CRUD_EXECUTION_PROFILE_REQ = 380;
    PROTO_CRUD_EXECUTION_PROFILE_RES = 381;
    PROTO_EXECUTION_PROFILE_CHANGED_EVENT = 382;
    PROTO_EXECUTION_PROFILE_LIST_REQ = 383;
    PROTO_EXECUTION_PROFILE_LIST_RES = 384;
    PROTO_CRUD_PROTECTION_PROFILE_REQ = 385;
    PROTO_CRUD_PROTECTION_PROFILE_RES = 386;
    PROTO_PROTECTION_PROFILE_CHANGED_EVENT = 387;
    PROTO_PROTECTION_PROFILE_LIST_REQ = 388;
    PROTO_PROTECTION_PROFILE_LIST_RES = 389;
    PROTO_CRUD_SWAP_FREE_PROFILE_REQ = 390;
    PROTO_CRUD_SWAP_FREE_PROFILE_RES = 391;
    PROTO_SWAP_FREE_PROFILE_CHANGED_EVENT = 392;
    PROTO_SWAP_FREE_PROFILE_LIST_REQ = 393;
    PROTO_SWAP_FREE_PROFILE_LIST_RES = 394;
    PROTO_CRUD_HOLIDAY_REQ = 395;
    PROTO_CRUD_HOLIDAY_RES = 396;
    PROTO_HOLIDAY_CHANGED_EVENT = 397;
    PROTO_HOLIDAY_LIST_REQ = 398;
    PROTO_HOLIDAY_LIST_RES = 399;
    PROTO_CRUD_HOLIDAY_PROFILE_REQ = 400;
    PROTO_CRUD_HOLIDAY_PROFILE_RES = 401;
    PROTO_HOLIDAY_PROFILE_CHANGED_EVENT = 402;
    PROTO_TRADER_LIST_REQ = 403;
    PROTO_TRADER_LIST_RES = 404;
    PROTO_POSITION_LIST_REQ = 407;
    PROTO_POSITION_LIST_RES = 408;
    PROTO_PENDING_ORDER_LIST_REQ = 409;
    PROTO_PENDING_ORDER_LIST_RES = 410;
    PROTO_MANAGER_LIST_REQ = 411;
    PROTO_MANAGER_LIST_RES = 412;
    PROTO_BALANCE_HISTORY_LIST_REQ = 417;
    PROTO_BALANCE_HISTORY_LIST_RES = 418;
    PROTO_EXPOSURE_SYMBOL_LIST_REQ = 419;
    PROTO_EXPOSURE_SYMBOL_LIST_RES = 420;
    PROTO_SERVER_SETTINGS_REQ = 423;
    PROTO_SERVER_SETTINGS_RES = 424;
    PROTO_PRICE_STREAM_LIST_REQ = 427;
    PROTO_PRICE_STREAM_LIST_RES = 428;
    PROTO_LIQUIDITY_FEED_LIST_REQ = 429;
    PROTO_LIQUIDITY_FEED_LIST_RES = 430;
    PROTO_MANAGER_DEAL_LIST_REQ = 431;
    PROTO_MANAGER_DEAL_LIST_RES = 432;
    PROTO_COUNTRY_LIST_REQ = 435;
    PROTO_COUNTRY_LIST_RES = 436;
    PROTO_ASSET_CLASS_LIST_REQ = 437;
    PROTO_ASSET_CLASS_LIST_RES = 438;
    PROTO_ORDER_MANAGER_LIST_REQ = 443;
    PROTO_ORDER_MANAGER_LIST_RES = 444;
    PROTO_HOLIDAY_PROFILE_LIST_REQ = 447;
    PROTO_HOLIDAY_PROFILE_LIST_RES = 448;
    PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_REQ = 459;
    PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_RES = 460;
    PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_REQ = 461;
    PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_RES = 462;
    PROTO_SYMBOL_CATEGORY_LIST_REQ = 463;
    PROTO_SYMBOL_CATEGORY_LIST_RES = 464;
    PROTO_ASSET_LIST_REQ = 465;
    PROTO_ASSET_LIST_RES = 466;
    PROTO_MANAGER_SYMBOL_LIST_REQ = 467;
    PROTO_MANAGER_SYMBOL_LIST_RES = 468;
    PROTO_DYNAMIC_LEVERAGE_LIST_REQ = 469;
    PROTO_DYNAMIC_LEVERAGE_LIST_RES = 470;
    PROTO_GSL_SCHEDULE_LIST_REQ = 471;
    PROTO_GSL_SCHEDULE_LIST_RES = 472;
    PROTO_LIGHT_GROUP_LIST_REQ = 473;
    PROTO_LIGHT_GROUP_LIST_RES = 474;
    PROTO_GROUP_BY_ID_REQ = 475;
    PROTO_GROUP_BY_ID_RES = 476;
    PROTO_LIQUIDITY_FEED_SYMBOL_LIST_REQ = 489;
    PROTO_LIQUIDITY_FEED_SYMBOL_LIST_RES = 490;
    PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_REQ = 493;
    PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_RES = 494;
    PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_REQ = 495;
    PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_RES = 496;
    PROTO_CRUD_TRADER_REQ = 501;
    PROTO_CRUD_TRADER_RES = 502;
    PROTO_TRADER_CHANGED_EVENT = 503;
    PROTO_CRUD_GROUP_REQ = 504;
    PROTO_CRUD_GROUP_RES = 505;
    PROTO_GROUP_CHANGED_EVENT = 506;
    PROTO_CRUD_SYMBOL_REQ = 507;
    PROTO_CRUD_SYMBOL_RES = 508;
    PROTO_CRUD_MANAGER_REQ = 510;
    PROTO_CRUD_MANAGER_RES = 511;
    PROTO_MANAGER_CHANGED_EVENT = 512;
    PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_REQ = 513;
    PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_RES = 514;
    PROTO_SWAP_AND_DIVIDEND_PROFILE_CHANGED_EVENT = 515;
    PROTO_UPDATE_SERVER_SETTINGS_REQ = 516;
    PROTO_UPDATE_SERVER_SETTINGS_RES = 517;
    PROTO_SERVER_SETTINGS_CHANGED_EVENT = 518;
    PROTO_CHANGE_BALANCE_REQ = 519;
    PROTO_CHANGE_BALANCE_RES = 520;
    PROTO_PRICE_STREAM_CREATE_REQ = 527;
    PROTO_PRICE_STREAM_CREATE_RES = 528;
    PROTO_PRICE_STREAM_DELETE_REQ = 529;
    PROTO_PRICE_STREAM_DELETE_RES = 530;
    PROTO_PRICE_STREAM_UPDATE_REQ = 531;
    PROTO_PRICE_STREAM_UPDATE_RES = 532;
    PROTO_PRICE_STREAM_CHANGED_EVENT = 533;
    PROTO_CRUD_ASSET_REQ = 538;
    PROTO_CRUD_ASSET_RES = 539;
    PROTO_ASSET_CHANGED_EVENT = 540;
    PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_REQ = 545;
    PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_RES = 546;
    PROTO_LIQUIDITY_FEED_SYMBOL_CHANGED_EVENT = 547;
    PROTO_INSERT_TRENDBAR_REQ = 551;
    PROTO_INSERT_TRENDBAR_RES = 552;
    PROTO_MANAGER_SYMBOL_CHANGED_EVENT = 558;
    PROTO_CRUD_DYNAMIC_LEVERAGE_REQ = 559;
    PROTO_CRUD_DYNAMIC_LEVERAGE_RES = 560;
    PROTO_DYNAMIC_LEVERAGE_CHANGED_EVENT = 561;
    PROTO_TRADER_PERMISSION_LOSE_EVENT = 562;
    PROTO_CRUD_GSL_SCHEDULE_REQ = 563;
    PROTO_CRUD_GSL_SCHEDULE_RES = 564;
    PROTO_GSL_SCHEDULE_CHANGED_EVENT = 565;
    PROTO_CREATE_SYMBOL_REQ = 571;
    PROTO_CREATE_SYMBOL_RES = 572;
    PROTO_SYMBOL_ARCHIVED_EVENT = 575;
    PROTO_SYMBOL_RESTORED_EVENT = 580;
    PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_REQ = 581;
    PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_RES = 582;
    PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_CHANGED_EVENT = 583;
    PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_REQ = 584;
    PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_RES = 585;
    PROTO_DELETE_TRENDBAR_REQ = 586;
    PROTO_DELETE_TRENDBAR_RES = 587;
    PROTO_SUBSCRIBE_SPOT_QUOTES_REQ = 601;
    PROTO_SUBSCRIBE_SPOT_QUOTES_RES = 602;
    PROTO_UNSUBSCRIBE_SPOT_QUOTES_REQ = 608;
    PROTO_UNSUBSCRIBE_SPOT_QUOTES_RES = 609;
    PROTO_TRADER_BY_ID_REQ = 703;
    PROTO_TRADER_BY_ID_RES = 704;
    PROTO_MANAGER_GET_DEAL_REQ = 709;
    PROTO_MANAGER_GET_DEAL_RES = 711;
    PROTO_MANAGER_CLOSED_POSITION_LIST_REQ = 720;
    PROTO_MANAGER_CLOSED_POSITION_LIST_RES = 721;
    PROTO_TRADER_LOGON_EVENT = 730;
    PROTO_TRADER_LOGOUT_EVENT = 731;
    PROTO_MANAGER_NEW_ORDER_REQ = 738;
    PROTO_MANAGER_AMEND_ORDER_REQ = 739;
    PROTO_MANAGER_CANCEL_ORDER_REQ = 740;
    PROTO_MANAGER_AMEND_POSITION_REQ = 741;
    PROTO_MANAGER_CLOSE_POSITION_REQ = 742;
    PROTO_REBUILD_TRENDBARS_REQ = 752;
    PROTO_REBUILD_TRENDBARS_RES = 753;
    PROTO_POSITION_DETAILS_LITE_REQ = 754;
    PROTO_POSITION_DETAILS_LITE_RES = 755;
    PROTO_MANAGER_CHANGE_BONUS_REQ = 780;
    PROTO_MANAGER_CHANGE_BONUS_RES = 781;
    PROTO_BONUS_HISTORY_LIST_REQ = 786;
    PROTO_BONUS_HISTORY_LIST_RES = 787;
    PROTO_LIQUIDITY_FEED_STATUS_REQ = 804;
    PROTO_LIQUIDITY_FEED_STATUS_RES = 805;
    PROTO_DEALING_SETTINGS_REQ = 816;
    PROTO_DEALING_SETTINGS_RES = 817;
    PROTO_UPDATE_DEALING_SETTINGS_REQ = 818;
    PROTO_UPDATE_DEALING_SETTINGS_RES = 819;
    PROTO_NEW_MANUAL_DEAL_EVENT = 820;
    PROTO_MANUAL_DEAL_LIST_REQ = 821;
    PROTO_MANUAL_DEAL_LIST_RES = 822;
    PROTO_MANUAL_DEAL_CLAIM_REQ = 823;
    PROTO_MANUAL_DEAL_CLAIM_RES = 824;
    PROTO_MANUAL_DEAL_CLAIMED_EVENT = 825;
    PROTO_MANUAL_DEAL_UNCLAIM_REQ = 826;
    PROTO_MANUAL_DEAL_UNCLAIM_RES = 827;
    PROTO_MANUAL_DEAL_UNCLAIMED_EVENT = 828;
    PROTO_MANUAL_DEAL_RESET_REQ = 829;
    PROTO_MANUAL_DEAL_RESET_RES = 830;
    PROTO_MANUAL_DEAL_REJECT_REQ = 831;
    PROTO_MANUAL_DEAL_REJECT_RES = 832;
    PROTO_MANUAL_DEAL_EXECUTE_REQ = 833;
    PROTO_MANUAL_DEAL_EXECUTE_RES = 834;
    PROTO_MANUAL_DEAL_PROCESSED_EVENT = 835;
    PROTO_DEALER_NEW_ORDER_REQ = 836;
    PROTO_DEALER_AMEND_ORDER_REQ = 837;
    PROTO_DEALER_CANCEL_ORDER_REQ = 838;
    PROTO_DEALER_AMEND_POSITION_REQ = 839;
    PROTO_DEALER_CLOSE_POSITION_REQ = 840;
    PROTO_DEALING_SETTINGS_UPDATED_EVENT = 843;
    PROTO_ASSET_CLASS_CHANGED_EVENT = 846;
    PROTO_ASSET_CLASS_DELETED_EVENT = 847;
    PROTO_SYMBOL_CATEGORY_CHANGED_EVENT = 848;
    PROTO_SYMBOL_CATEGORY_DELETED_EVENT = 849;
	PROTO_MANAGER_GET_AUTH_TOKEN_REQ = 850;
    PROTO_MANAGER_GET_AUTH_TOKEN_RES = 851;
    PROTO_SYMBOLS_FOR_CONVERSION_REQ = 864;
    PROTO_SYMBOLS_FOR_CONVERSION_RES = 865;
    PROTO_FORCE_CLOSE_POSITION_REQ = 870;
    PROTO_FORCE_OPEN_POSITION_REQ = 871;
    PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_REQ = 883;
    PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_RES = 884;
    PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_CHANGED_EVENT = 885;
    PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_REQ = 886;
    PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_RES = 887;
    PROTO_HELLO_EVENT = 990;
}

// Enum for error codes for server. Note that there are also some error codes in common messages
enum ProtoCSErrorCode {
    NOT_ENOUGH_MONEY = 1;
    NOT_ENOUGH_RIGHTS = 2;
    AUTHENTICATION_FAILED = 3;
    POSITION_NOT_FOUND = 4;
    POSITION_LOCKED = 5;
    CHANGE_BALANCE_BAD_AMOUNT = 6;
    NO_QUOTES = 7;
    TRADING_DISABLED = 8;
    TRADING_NOT_ALLOWED = 9;
    TRADING_BAD_VOLUME = 10;
    TRADER_NOT_FOUND = 11;
    TRADER_GROUP_NOT_FOUND = 12;
    RECONCILIATION_IN_PROGRESS = 13;
    ALREADY_LOGGED_IN = 14;
    TOO_MANY_POSITIONS = 16;
    ORDER_NOT_FOUND = 17;
    TRADING_BAD_STOPS = 18;
    ALREADY_DELETED = 19;
    WRONG_LEVERAGE = 20;
    TRADING_BAD_EXPIRATION_DATE = 21;
    ALREADY_SUBSCRIBED = 22;
    REQUEST_FREQUENCY_EXCEEDED = 23;
    POSITION_NOT_OPEN = 24;
    WRONG_TIME_SEQUENCE = 25;
    FORBID_WITH_TRADING_ENABLED = 26;
    INCORRECT_POSITION_ID = 27;
    TRADER_HAS_POSITIONS = 28;
    UNKNOWN_LIQIDITY_FEED = 29;
    ASSET_CLASS_ALREADY_EXIST = 30;
    ASSET_CLASS_IS_NOT_EMPTY = 31;
    TRADING_BAD_PRICES = 32;
    UNABLE_TO_FORWARD_COMMAND = 33;
    UNKNOWN_SYMBOL = 34;
    INCORRECT_BOUNDARIES = 35;
    SYMBOL_NOT_FOUND = 36;
    DEAL_NOT_FOUND = 37;
    POSITION_CONCURRENT_CHANGE = 38;
    NOT_INTRODUCING_BROKER = 39;
    INTRODUCING_BROKER_CYCLE = 40;
    UNABLE_TO_CANCEL_ORDER = 41;
    UNABLE_TO_AMEND_ORDER = 42;
    UNKNOWN_DEPOSIT_CURRENCY = 43;
    DEPOSIT_CURRENCY_NOT_ALLOWED = 44;
    SHORT_SELLING_NOT_ALLOWED = 45;
    CHANGE_BONUS_BAD_AMOUNT = 46;
    SERVER_IS_UNDER_MAINTENANCE = 47;
    TRADING_BAD_STAKE = 48;
    GUI_SETTINGS_NOT_FOUND = 49;
    PROTECTION_IS_TOO_CLOSE_TO_MARKET = 50;
    ORDER_TYPE_NOT_ALLOWED = 51;
    INVALID_DATA = 52;
    NO_SUCH_LOGIN = 53;
    MAX_EXPOSURE_REACHED = 54;
    PENDING_EXECUTION = 55;
    FORBID_WITH_SUBSCRIPTION_ENABLED = 56;
    NOT_SUBSCRIBED_TO_SPOTS = 57;
    DAILY_EQUITY_NOT_FOUND = 58;
    STRATEGY_NOT_FOUND = 59;
    SYMBOL_NAME_ALREADY_EXIST = 60;
    HIDDEN_HISTORY = 61;
    OPERATION_NOT_ALLOWED = 62;
    CHANNEL_IS_BLOCKED = 63;
    NOT_SUBSCRIBED_TO_DEPTHS = 64;
    SQA_NOT_ACTIVATED = 65;
    SQA_ALREADY_ACTIVATED = 66;
    CONNECTIONS_LIMIT_EXCEEDED = 67;
    WORSE_GSL_NOT_ALLOWED = 68;
    SYMBOL_HAS_HOLIDAY = 69;
    RESERVED_3 = 70;
    RESERVED_4 = 71;
    RESERVED_5 = 72;
}

// Enum type for request result
enum ProtoResultCode {
    RET_OK = 0;
    RET_OK_NONE = 1;
    RET_ERROR = 2;
    RET_INVALID_DATA = 3;
    RET_TECH_PROBLEM = 4;
    RET_OLD_VERSION = 5;
    RET_NO_CONNECT = 6;
    RET_NOT_ENOUGH_RIGHTS = 7;
    RET_TOO_FREQUENT = 8;
    RET_MALFUNCTION = 9;
    RET_GENERATE_KEY = 10;
    RET_SECURITY_SESSION = 11;
    RET_NO_SUCH_LOGIN = 12;
    RET_ACCOUNT_DISABLED = 64;
    RET_BAD_ACCOUNT_INFO = 65;
    RET_PUBLIC_KEY_MISSING = 66;
    RET_TRADE_TIMEOUT = 128;
    RET_TRADE_BAD_PRICES = 129;
    RET_TRADE_BAD_STOPS = 130;
    RET_TRADE_BAD_VOLUME = 131;
    RET_TRADE_MARKET_CLOSED = 132;
    RET_TRADE_DISABLE = 133;
    RET_TRADE_NO_MONEY = 134;
    RET_TRADE_PRICE_CHANGED = 135;
    RET_TRADE_BROKER_BUSY = 136;
    RET_TRADE_REQUOTE = 137;
    RET_TRADE_ORDER_LOCKED = 138;
    RET_TRADE_LONG_ONLY = 139;
    RET_TRADE_TOO_MANY_REQ = 140;
    RET_TRADE_ACCEPTED = 141;
    RET_TRADE_PROCESS = 142;
    RET_TRADE_USER_CANCEL = 143;
    RET_TRADE_MODIFY_DENIED = 144;
    RET_TRADE_CONTEXT_BUSY = 145;
    RET_TRADE_EXPIRATION_DENIED = 146;
    RET_TRADE_TOO_MANY_ORDERS = 147;
    RET_TRADE_HEDGE_PROHIBITED = 148;
    RET_TRADE_MAX_EXPOSURE_REACHED = 149;
    RET_PENDING_EXECUTION = 150;
    RET_FORBID_WITH_SUBSCRIPTION_ENABLED = 151;
    RET_NOT_SUBSCRIBED_TO_SPOTS = 152;
    RET_DAILY_EQUITY_NOT_FOUND = 153;
    RET_STRATEGY_NOT_FOUND = 154;
    RET_NOT_SUBSCRIBED_TO_DEPTHS = 155;
    RET_RESERVED_1 = 156;
    RET_RESERVED_2 = 157;
    RET_RESERVED_3 = 158;
}

// Trendbar entity
message ProtoTrendbar {
    required int64 volume = 3; // Bar volume in ticks
    optional ProtoTrendbarPeriod period = 4 [default = M1]; // Bar period
    optional int64 low = 5; // Lowest price for the period
    optional uint64 deltaOpen = 6; // Delta between open and low price. Open = low + deltaOpen
    optional uint64 deltaClose = 7; // Delta between close and low price. Close = low + deltaClose
    optional uint64 deltaHigh = 8; // Delta between high and low price. High = low + deltaHigh
    optional uint32 utcTimestampInMinutes = 9; // UNIX timestamp of the bar, in minutes. Equal to the timestamp of the open tick
    optional uint64 utcLastUpdateTimestamp = 10; // UNIX timestamp of the last update time in milliseconds
}

// Position/Order trading details entity
message ProtoTradeData {
    required int64 symbolId = 1; // The unique identifier of the Symbol in specific server environment within cTrader platform
    required int64 volume = 2; // Volume in cents
    required ProtoTradeSide tradeSide = 3; // Buy, Sell
    optional int64 traderId = 4; // ID of the Trader
    optional int64 openTimestamp = 7; // UNIX timestamp in milliseconds when Position was opened or Order was created
    optional int64 closeTimestamp = 8; // UNIX timestamp in milliseconds when Position was closed
    optional string label = 12; // Text label specified during Order request
    optional string comment = 13; // Comment specified during Order request
    optional string channel = 14; // Channel specified during Order request
    optional string measurementUnits = 15; // Measurement units for Symbol
    optional int64 lotSize = 16; // Lot size of the Symbol (in cents)
    optional bool spreadBetting = 17; // TRUE for Spread Setting entities
    optional int64 stake = 18; // Stake for Spread Betting
    optional double desiredVWAP = 19; // Price desired by the client as an execution price
    optional bool guaranteedStopLoss = 20; // If TRUE then Position/Order Stop Loss is Guaranteed Stop Loss (GSL)
}

// Position entity
message ProtoPosition {
    required int64 positionId = 1; // ID of Position
    required ProtoTradeData tradeData = 3; // Position/Order trading details entity
    required ProtoPositionStatus positionStatus = 4; // Current status of the Position
    required int64 swap = 5; // Total amount of charged Swap on open Position
    optional double price = 6; // VWAP price of the Position based on all executions (Deals) linked to the Position
    optional double stopLoss = 7; // Current Stop Loss price
    optional double takeProfit = 8; // Current Take Profit price
    optional int64 utcLastUpdateTimestamp = 10; // UNIX timestamp in milliseconds of the last change of the Position, including amend SL/TP of the Position, execution of the related Order, cancel of the related Order, etc
    optional ProtoBookType bookType = 11 [default = BOOK_A]; // Book type
    optional int64 commission = 13; // Current unrealized commission related to the Position
    optional double marginRate = 14; // Rate for used margin computation. Represented as Base/Deposit
    optional int64 introducingBrokerCommission = 16; // Commission of Introducing Broker (IB)
    optional int64 pocketCommission = 17; // Amount of commission, which Broker should pay to IB for introduced clients
    optional int64 pocketMarkup = 18;  // Amount of markup (in points), which Broker should pay to IB for introduced clients
    optional int64 mirroringCommission = 20; // Amount of unrealized commission related to following of Strategy Provider
    optional bool guaranteedStopLoss = 21; // If TRUE then Position's Stop Loss is Guaranteed Stop Loss (GSL)
    optional uint64 usedMargin = 23; // Amount of margin used for the Position in deposit currency
    optional bool trailingStopLoss = 24; // If TRUE then the Trailing Stop Loss is applied
    optional ProtoOrderTriggerMethod stopLossTriggerMethod = 25 [default = TRADE]; // Stop Trigger Method for SL/TP Order
    optional uint32 moneyDigits = 30; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects swap, commission, mirroringCommission, usedMargin
    optional int32 pnlConversionFeeRate = 31; // Conversion Fee rate applied to the Deal in Trader's deposit Asset when Trader Symbol's quote Asset ID <> Trader's deposit Asset ID
}

// Order entity
message ProtoOrder {
    required int64 orderId = 1; // ID of the Order
    required ProtoTradeData tradeData = 2; // Detailed Trader's data
    required ProtoOrderType orderType = 3; // Order type
    required ProtoOrderStatus orderStatus = 4; // Order status
    optional int64 expirationTimestamp = 6; // UNIX timestamp in milliseconds, if the Order has time in force GTD then expiration is specified
    optional double executionPrice = 9; // Price at which an Order was executed. For Orders with FILLED status
    optional int64 executedVolume = 10; // Part of the volume that was filled
    optional double stopLoss = 11; // Absolute Stop Loss price
    optional double takeProfit = 12; // Absolute Take Profit price
    optional int64 utcLastUpdateTimestamp = 13; // UNIX timestamp in milliseconds of the last update of the Order
    optional ProtoBookType bookType = 14 [default = BOOK_A]; // Book type
    optional string method = 16; // Method specified during Order request
    optional double baseSlippagePrice = 18; // Used for Market Range Order with combination of slippageInPoints to specify price range where Order can be executed
    optional bool closingOrder = 20; // If TRUE then the Order is closing part of whole Position. Must have specified positionId
    optional double limitPrice = 21; // Valid only for LIMIT Orders
    optional double stopPrice = 22; // Valid only for STOP and STOP_LIMIT Orders
    optional string clientOrderId = 23; // Optional ClientOrderId. Max Length = 50 chars
    optional int64 commission = 24; // Amount of trading commission
    optional ProtoTimeInForce timeInForce = 26 [default = IMMEDIATE_OR_CANCEL]; // Order's time in force. Depends on Order type
    optional int64 positionId = 30; // ID of Position
    optional int64 relativeStopLoss = 32; // Relative Stop Loss distance. Specifies distance between execution price of the Order and placed Stop Loss
    optional int64 relativeTakeProfit = 33; // Relative Take Profit distance. Specifies distance between execution price of the Order and placed Take Profit
    optional int64 introducingBrokerCommission = 34; // Commission of Introducing Broker (IB)
    optional int64 pocketCommission = 35; // Amount of commission, which Broker should pay to IB for introduced clients
    optional int64 pocketMarkup = 36;  // Amount of markup (in points), which Broker should pay to IB for introduced clients
    optional int64 mirroringCommission = 39; // Amount of unrealized commission related to following of Strategy Provider
    optional string originalClientOrderId = 40; // ClientOrderId specified by Trader
    optional bool checkTolerance = 41; // If TRUE then tolerance check is applied and Order may be rejected due to significant price change. Applied only for B-book Orders
    optional int64 login = 42; // Login of the Trader
    optional string name = 43; // Name of the Trader
    optional string lastName = 44; // Last name of the Trader
    optional bool isStopOut = 45; // If TRUE then Order was Stopped Out from server's side
    optional bool trailingStopLoss = 46; // If TRUE then the Trailing Stop Loss is applied to order. Valid for STOP_LOSS_TAKE_PROFIT Order
    optional int64 closeWithPID = 47; // Some number which may be used to aggregate Deals into Positions on the hedged accounts in UI
    optional ProtoOrderTriggerMethod stopTriggerMethod = 48 [default = TRADE]; // Trigger Method for the STOP or the STOP_LIMIT pending Order
    optional ProtoOrderTriggerMethod stopLossTriggerMethod = 49 [default = TRADE]; // Stop Trigger Method for SL/TP Order
    optional int32 slippageInPoints = 50; // Used for Market Range and STOP_LIMIT Orders to to specify price range were Order can be executed
    optional int64 desiredOpenTimestamp = 51; // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
    optional int64 ocoOrderId = 52; // Link to ID of OCO (one cancels other) Order. OCO Orders is a pair of pending Orders (only STOP, LIMIT and STOP_LIMIT could be linked) Orders where one Order should be cancelled as soon as another Order changes it's status from Accepted to Filled
    optional uint32 moneyDigits = 54; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission, pocketCommission,mirroringCommission
}

// Trading details for Closing Deal
message ProtoClosePositionDetail {
    required double entryPrice = 2; // Position price at the moment of filling the closing Order
    required int64 profit = 7; // Amount of realized gross profit after execution of the Closing Deal
    required int64 swap = 3; // Amount of realized Swap related to closed volume
    required int64 commission = 4; // Amount of realized commission related to closed volume
    required int64 balance = 8; // Account balance after after execution of the Closing Deal
    optional string comment = 11; // Comment specified by the Trader
    optional double stopLoss = 12; // Absolute Stop Loss price
    optional double takeProfit = 13; // Absolute Take Profit price
    optional double quoteToDepositConversionRate = 15; // Conversion rate from quote Asset to Trader's deposit Asset on the moment when the Closing Deal was sent for execution
    optional int64 closedVolume = 16; // Closed volume in cents
    optional int64 balanceVersion = 18; // Balance version of the Account related to Closing Deal operation
    optional int64 introducingBrokerCommission = 19; // Amount of additional commission, which client should pay to IB
    optional int64 pocketCommission = 20; // Amount of commission, which Broker should pay to IB for introduced clients
    optional int64 pocketMarkup = 21; // Amount of markup (in points), which Broker should pay to IB for introduced clients
    optional int64 equity = 23; // Total account's equity after Closing Deal execution
    optional int64 netProfit = 25; // Net realized profit related to the closing of offset part of opening Deals
    optional int64 mirroringCommission = 26; // Amount of unrealized commission related to following of strategy provider
    optional double depositToIbDepositRate = 27; // Conversion rate between Trader's deposit Asset and IB account's deposit Asset
    optional int64 minEquity = 28; // Minimum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
    optional int64 maxEquity = 29; // Maximum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
    optional int64 rebate = 30; // Rebate in deposit Asset, in cents
    optional int64 balanceHistoryId = 31; // ID of related Balance History record
    optional int64 markup = 32; // Markup in USD cents
    optional double equityBasedRoi = 33; // Position ROI
    optional uint64 closedStake = 34; // Closed stake for Spread Betting
    optional bool ibCommissionsPaid = 36; // If TRUE then IB commission is already paid
    optional int64 nonWithdrawableBonus = 37; // Amount of Bonus, which can't be withdrawn (can only be used for trading)
    optional ProtoOrderTriggerMethod stopLossTriggerMethod = 38 [default = TRADE]; // Stop Trigger Method for SL/TP Order
    optional int64 offsetDealTimestamp = 40; // UNIX timestamp in milliseconds of execution of the first offset Deal for this Closing Deal
    optional uint32 moneyDigits = 43; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, balance, pnlConversionFee
    optional int64 pnlConversionFee = 44; // Conversion Fee applied to the Deal in Trader's deposit Asset when Trader Symbol's quote Asset ID <> Trader's deposit Asset ID
}

// Order related action entity
message ProtoOrderAction {
    required int64 actionId = 1; // Action ID
    required ProtoActionType actionType = 3; // Action type
    required ProtoActionStatus actionStatus = 4; // Action status
    optional int64 expirationTimestamp = 5; // UNIX timestamp in milliseconds of Order expiration
    optional int64 volume = 6; // Volume for created Order/Deal
    optional int64 price = 7; // Price for created Deal/amended Order
    optional int64 stopLoss = 8; // Stop Loss price for Stop Loss action
    optional int64 takeProfit = 9; // Take Profit price for Take Profit action
    optional string sessionId = 10; // ID of Trader's session
    optional string clientRequestId = 11; // ClientRequestId specified in the Order
    optional string label = 12; // Label field value from corresponding Order. Used by cAlgo bots to identify its own Orders. Max length = 100
    optional string comment = 13; // Comment specified in the Order
    optional string channel = 14; // Channel, specified in the Order (cTrader, cServer etc)
    optional int64 executeTimestamp = 17; // UNIX timestamp in milliseconds of action execution
    optional int64 relativeStopLoss = 18; // Stop Loss entered by Trader at the moment of market Order creation
    optional int64 relativeTakeProfit = 19; // Take Profit entered by Trader at the moment of market Order creation
    optional ProtoOrderTriggerMethod stopTriggerMethod = 20 [default = TRADE]; // Trigger Method for the STOP or the STOP_LIMIT pending Order
    optional ProtoOrderTriggerMethod stopLossTriggerMethod = 21 [default = TRADE]; // Stop Trigger Method for SL/TP Order
    optional int64 desiredOpenTimestamp = 22; // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
    optional int64 ocoOrderId = 23; // Link to ID of OCO (one cancels other) Order
}

// Type of Order related action
enum ProtoActionType {
    ACTION_CREATE_STOP_LOSS_TAKE_PROFIT = 1;
    ACTION_AMEND_STOP_LOSS_TAKE_PROFIT = 2;
    ACTION_CANCEL_STOP_LOSS_TAKE_PROFIT = 3;
    ACTION_CREATE_CLOSING_ORDER = 4;
    ACTION_CREATE_ORDER = 5;
    ACTION_CANCEL_PENDING_ORDER = 6;
    ACTION_AMEND_OPEN_PENDING_ORDER = 7;
    ACTION_CREATE_OCO_LINK = 8;
    ACTION_CANCEL_OCO_LINK = 9;
}

// Status of Order related action
enum ProtoActionStatus {
    ACTION_PENDING = 1;
    ACTION_STARTED = 2;
    ACTION_PASSED = 3;
    ACTION_FAILED = 4;
    ACTION_ERROR = 5;
}

// Account Deposit/Withdrawal operation entity
message ProtoDepositWithdraw {
    required ProtoChangeBalanceType operationType = 1; // Type of the operation - Deposit/Withdrawal
    required int64 balanceHistoryId = 2; // The unique ID of the Deposit/Withdrawal operation
    required int64 traderId = 3; // ID of the Trader
    required int64 balance = 4; // Trader's balance after the operation was executed
    required int64 delta = 5; // Amount of Deposit/Withdrawal operation
    required int64 changeBalanceTimestamp = 6; // UNIX timestamp in milliseconds when Deposit/Withdrawal operation was executed
    optional string comment = 7; // Comment added to operation. Visible only to Managers
    optional string externalNote = 8; // Note added to operation. Visible to the Trader and to Managers
    optional int64 balanceVersion = 9; // Balance version used to identify the final balance. Increments each time when the Trader's balance is changed
    optional int64 equity = 10; // Trader's equity after balance operation was executed
    optional int64 minEquity = 11; // Min equity since previous balance operation
    optional int64 maxEquity = 12; // Max equity since previous balance operation
    optional int64 nonWithdrawableBonus = 13; // If TRUE then deposit is a non-withdrawable Bonus from Broker that can be used only for trading
    optional string source = 14; // Field can be used to determine source of payment (e. g VISA or PayPal)
    optional string externalId = 15; // ID which can be used for reconciliation with third party systems
    optional uint32 moneyDigits = 16; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects balance, delta, equity
}

// Balance operation entity type ENUM
enum ProtoChangeBalanceType {
    BALANCE_DEPOSIT = 0;
    BALANCE_WITHDRAW = 1;
    BALANCE_CLOSE_POSITION = 2;
    BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER = 3;
    BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER = 4;
    BALANCE_DEPOSIT_IB_COMMISSIONS = 5;
    BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE = 6;
    BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB = 7;
    BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER = 8;
    BALANCE_DEPOSIT_REBATE = 9;
    BALANCE_WITHDRAW_REBATE = 10;
    BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER = 11;
    BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER = 12;
    BALANCE_WITHDRAW_BONUS_COMPENSATION = 13;
    BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER = 14;
    BALANCE_DEPOSIT_DIVIDENDS = 15;
    BALANCE_WITHDRAW_DIVIDENDS = 16;
    BALANCE_WITHDRAW_GSL_CHARGE = 17;
    BALANCE_WITHDRAW_ROLLOVER = 18;
    BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS = 19;
    BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS = 20;
    BALANCE_DEPOSIT_SWAP = 21;
    BALANCE_WITHDRAW_SWAP = 22;
    BALANCE_WITHDRAW_INVESTMENT_TO_STRATEGY = 23;
    BALANCE_DEPOSIT_FROM_INVESTOR = 24;
    BALANCE_DEPOSIT_RETURNED_INVESTMENT = 25;
    BALANCE_WITHDRAW_BY_INVESTOR = 26;
    BALANCE_DEPOSIT_MANAGEMENT_FEE = 27;
    BALANCE_WITHDRAW_MANAGEMENT_FEE = 28;
    BALANCE_DEPOSIT_PERFORMANCE_FEE = 29;
    BALANCE_WITHDRAW_FOR_SUBACCOUNT = 30;
    BALANCE_DEPOSIT_TO_SUBACCOUNT = 31;
    BALANCE_WITHDRAW_FROM_SUBACCOUNT = 32;
    BALANCE_DEPOSIT_FROM_SUBACCOUNT = 33;
    BALANCE_WITHDRAW_COPY_FEE = 34;
    BALANCE_WITHDRAW_INACTIVITY_FEE = 35;
    BALANCE_DEPOSIT_TRANSFER = 36;
    BALANCE_WITHDRAW_TRANSFER = 37;
    BALANCE_DEPOSIT_CONVERTED_BONUS = 38;
    BALANCE_DEPOSIT_NEGATIVE_BALANCE_PROTECTION = 39;
    BALANCE_RESERVED_1 = 40;
    BALANCE_RESERVED_2 = 41;
    BALANCE_RESERVED_3 = 42;
}

// Bonus Deposit/Withdrawal entity
message ProtoBonusDepositWithdraw {
    required ProtoChangeBonusType operationType = 1; // Type of the operation. Bonus Deposit/Withdrawal
    required int64 bonusHistoryId = 2; // The unique ID of the Bonus Deposit/Withdrawal operation
    required int64 traderId = 3; // ID of the Trader
    required int64 managerBonus = 4; // Total amount of broker's Bonus after the operation
    required int64 managerDelta = 5; // Amount of Bonus Deposited/Withdrew by the Manager
    required int64 ibBonus = 6; // Total amount of Introducing Broker's Bonus after the operation
    required int64 ibDelta = 7; // Amount of Bonus Deposited/Withdrew by Introducing Broker
    required int64 changeBonusTimestamp = 8; // UNIX timestamp in milliseconds when the Bonus operation was executed
    optional string comment = 10; // Comment added to operation. Visible only to Managers
    optional string externalNote = 11; // Note added to operation. Visible to the Trader
    optional int64 introducingBrokerId = 12; // ID of Introducing Broker who Deposited/Withdrew Bonus
    optional uint32 moneyDigits = 13; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects managerBonus, managerDelta, ibBonus, ibDelta
}

// Bonus operation type ENUM
enum ProtoChangeBonusType {
    BONUS_DEPOSIT = 0;
    BONUS_WITHDRAW = 1;
}

// Position's status type ENUM
enum ProtoPositionStatus {
    POSITION_STATUS_OPEN = 1;
    POSITION_STATUS_CLOSED = 2;
    POSITION_STATUS_CREATED = 3;
    POSITION_STATUS_ERROR = 4;
}

// Trade side type ENUM
enum ProtoTradeSide {
    BUY = 1;
    SELL = 2;
}

// Order type ENUM
enum ProtoOrderType {
    MARKET = 1;
    LIMIT = 2;
    STOP = 3;
    STOP_LOSS_TAKE_PROFIT = 4;
    MARKET_RANGE = 5;
    STOP_LIMIT = 6;
}

// Order's Time In Force type ENUM
enum ProtoTimeInForce {
    GOOD_TILL_DATE = 1;
    GOOD_TILL_CANCEL = 2;
    IMMEDIATE_OR_CANCEL = 3;
    FILL_OR_KILL = 4;
    MARKET_ON_OPEN = 5;
}

// Order's status type ENUM
enum ProtoOrderStatus {
    ORDER_STATUS_ACCEPTED = 1;
    ORDER_STATUS_FILLED = 2;
    ORDER_STATUS_REJECTED = 3;
    ORDER_STATUS_EXPIRED = 4;
    ORDER_STATUS_CANCELLED = 5;
    ORDER_STATUS_RESERVED = 6;
}

// Order trigger method type ENUM
enum ProtoOrderTriggerMethod {
    TRADE = 1;
    OPPOSITE = 2;
    DOUBLE_TRADE = 3;
    DOUBLE_OPPOSITE = 4;
}

// Type of an Account (Trader) ENUM
enum ProtoAccountType {
    HEDGED = 0;
    NETTED = 1;
    SPREAD_BETTING = 2;
}

// Margin calculation type for an Trader ENUM
enum ProtoTotalMarginCalculationType {
    MAX = 0;
    SUM = 1;
    NET = 2;
}

// Trading access rights ENUM
enum ProtoAccessRights {
    FULL_ACCESS = 0;
    CLOSE_ONLY = 1;
    NO_TRADING = 2;
    NO_LOGIN = 3;
}

// Guaranteed Stop Loss execution policy ENUM
enum ProtoGSLExecutionPolicy {
    DISABLED = 0;
    ENABLED_DECLINE_IF_A_BOOK = 1;
    ENABLED_FORCE_B_BOOK = 2;
    ENABLED_EXECUTE_INTO_SYMBOL_BOOK = 3;
}

// Trader entity
message ProtoTrader {
    required int64 traderId = 1; // Trader ID
    required int64 login = 2; // TraderLogin for a specific Account. Value is displayed on Client App UI
    required int64 groupId = 3; // ID of Trader's group
    required int64 balance = 8; // Current balance
    optional ProtoAccountType accountType = 9 [default = HEDGED]; // Type of Account (Trader)
    optional string name = 10; // Name of the Trader
    optional string passwordHash = 11; // Password hash of the Trader (MD5 of password in utf-8 in lower case)
    optional string description = 12; // Description for the Trader
    optional string status = 13; // Can be used for KYC related purposes
    optional int64 countryId = 14; // ID of Trader's Country
    optional string state = 15; // State (region) of the Trader
    optional string city = 16; // City of the Trader
    optional string address = 17; // Address of the Trader
    optional string zipCode = 18; // Zip code of the Trader
    optional string phone = 19; // Phone number of the Trader
    optional string phonePassword = 20; // Temporary password generated by the server to organize phone trading functionality (Manager trades by Trader's phone request)
    optional string email = 21; // Email of the Trader
    optional string documentId = 22; // Trader's document ID
    optional int64 registrationTimestamp = 25; // UNIX timestamp in milliseconds of Trader registration
    optional int64 lastConnectTimestamp = 26; // UNIX timestamp in milliseconds of the Trader's last successful authorization
    optional bool online = 27; // If TRUE then Trader is online
    optional int64 utcLastUpdateTimestamp = 28; // UNIX timestamp in milliseconds of last update of the Trader
    optional bool deleted = 29; // If TRUE then Trader is deleted
    optional int64 balanceVersion = 30; // Balance version used to identify the final balance. Increments each time when Trader's balance is changed
    optional bool introducingBroker = 32; // TRUE for Introducing Broker (IB)
    optional bool parentIntroducingBrokerIdIsNull = 55 [default = false]; // TRUE sets parentIntroducingBrokerId = null
    optional int64 parentIntroducingBrokerId = 33; // Specifies ID of the Trader which introduced current Trader
    optional int32 introducingBrokerCommissionRate = 34; // Commission rate of Introducing Broker. Additional Commission Paid by Client
    optional int32 pocketCommissionRate = 35; // Commission which Broker will pay to IB for the Deal of the Trader
    optional int32 pocketMarkupRate = 36; // Markup which Broker will pay to IB for the Deal of the Trader
    optional int32 defaultIntroducingBrokerCommissionRate = 37; // When Trader is assigned to IB introducingBrokerCommissionRate of Trader = defaultIntroducingBrokerCommissionRate of IB
    optional int32 defaultPocketCommissionRate = 38; // When Trader is assigned to IB pocketCommissionRate of Trader = defaultPocketCommissionRate of IB
    optional int32 defaultPocketMarkupRate = 39; // When Trader is assigned to IB pocketMarkupRate of Trader = defaultPocketMarkupRate of IB
    optional int32 defaultRebateRate = 43; // When Trader is assigned to IB rebateRate of Trader = defaultRebateRate of IB
    optional ProtoCommissionType defaultIbCommissionsType = 44; // When Trader is assigned to IB ibCommissionsType of Trader = defaultIbCommissionsType of IB
    optional ProtoCommissionType ibCommissionsType = 45; // Determines how ibCommissionRate and pocketCommissionRate will be treated
    optional int64 managerBonus = 47; // Amount of Bonus, given by the Broker
    optional int64 ibBonus = 48; // Amount of Bonus, given by the IB
    optional bool showPersonalData = 49; // If FALSE personal data (Name, Email, Phone) is not sent for this Trader
    optional bool splitRevenue = 50; // IF TRUE then Partner will get some part of Price Stream Markup and Commissions, paid by Client to Broker, depending on the Rank of the IB
    optional bool rankIdIsNull = 51 [default = false]; // TRUE sets rankId=null
    optional int32 rankId = 52; // Refers to ID of rank entity. Rank - is some level of IB. Higher Rank gives more Bonuses to IB
    optional bool hasRank = 53 [default = false]; // If True then Trader has IB rank
    repeated ProtoTraderRank rank = 54; // Refers to IB rank of IB. Higher Rank gives more Bonuses to IB
    optional string lastName = 56; // Last name of the Trader
    optional bool defaultSplitRevenue = 57; // When Trader is assigned to IB splitRevenue of Trader = defaultSplitRevenue of IB
    optional ProtoAccessRights accessRights = 59 [default = FULL_ACCESS]; // Type of the access of the Account
    optional bool sendOwnStatement = 60; // Specifies whether EOD statement should be send to the Trader or not
    optional int64 depositAssetId = 61; // ID of the deposit Asset
    optional bool swapFree = 64; // Specifies whether account is SWAP-free (Shariah compliant)
    optional int64 nonWithdrawableBonus = 65; // Amount of non-withdrawable Bonus, given by the Broker
    optional uint32 leverageInCents = 66; // Trader's leverage in cents
    optional bool moveToIBGroup = 67; // If TRUE then Trader will be added into group where IB is at the moment of linking account to IB
    optional ProtoTotalMarginCalculationType totalMarginCalculationType = 68; // Total margin calculation type
    optional string brokerName = 69; // Some whitelabel assigned to Trader by the Broker at the moment of Account creation
    optional uint32 maxLeverage = 70; // Maximum allowed leverage for the Account. Used as validation when a Trader wants to change leverage value
    optional bool freeTrades = 71; // IF TRUE then commission rate = 0 will be applied to all trades
    optional int64 version = 74; // When any parameter of ProtoTrader is changed (except balance, ibBonus, passwordHash, lastConnectTimestamp, online, balanceVersion, logoutTimestamp, equity) version is incremented
    optional int64 subAccountOf = 75; // Determines parent account of account, if it is Subaccount. Used for Copy service
    optional uint32 maxNOP = 76; // Maximum exposure per Account as % from total Trader's equity. Protocol value = 1 equals to 0.01% = 0.0001. Example: if MaxNOP = 8.0% for account with equity 100 000 USD maximum NOP will be 1 250 000 USD. An Order which breaches this limit will be rejected
    optional bool disablePasswordLogin = 77; // If TRUE then login by a password for Trader is disabled. This password is not used to sign in to the trading applications. cTrader ID is used for this purpose. Password is only used for authenticating FIX API sessions
    optional bool isLimitedRisk = 78; // Specifies whether Trader is of Limited Risk type
    optional ProtoLimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 79 [default = ACCORDING_TO_LEVERAGE]; // Limited Risk type
    optional uint32 moneyDigits = 80; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects balance, managerBonus, ibBonus, nonWithdrawableBonus
    optional int64 managementFee = 81; // Management Fee used in Copy
    optional bool sendStatementToBroker = 82; // If TRUE then statement (report) is sent to the Broker
    repeated ProtoIbCommissionSymbolCategory defaultIbCommissionSymbolCategory = 83; // ID of default applicable ProtoIbCommissionSymbolCategory which allows IB to have a different commission per Symbol
    repeated ProtoIbCommissionSymbolCategory ibCommissionSymbolCategory = 84; // ID of applicable ProtoIbCommissionSymbolCategory which allows IB to have a different commission per Symbol Category
    optional bool fairStopOut = 85; // If TRUE Position is fully closed on Stop Out regardless of ProtoGroup.fairStopOut, if FALSE- smart (partial closing) Stop Out is applied, if unspecified  - Stop Out format is determined by ProtoGroup.fairStopOut.
}

// IB Rank entity. Higher Rank gives more Bonuses to IB
message ProtoTraderRank {
    required int32 id = 1; // ID of Rank entity
    required string name = 2; // Rank name
    required int64 volume = 3; // Volume which is necessary to get this rank in cents
    required int32 parentIbPercentage = 4; // How much IB will pay to their Parent IB in %, 35 means 35%
    required int32 brokerPercentage = 5; // How much IB will pay to Broker in %, 30 means 30%
}

// Spread Constraint entity - spread limit settings for quotes from LP
message ProtoMinimumSpreadConstraint {
    required bool enabled = 1; // Enables functionality
    required uint32 thresholdDigits = 2; // Determines minimum spread (in Symbol.digits, from 0 to 1000), quotes with smaller spread will be ignored
    required ProtoQuoteType bias = 3; // Bid/Ask
}

// Book type ENUM
enum ProtoSymbolBookType {
    SYMBOL_BOOK_TYPE_BOOK_A = 1;
    SYMBOL_BOOK_TYPE_BOOK_B = 2;
}

// Commission type ENUM
enum ProtoCommissionType {
    USD_PER_MILLION_USD = 1; // USD per million USD volume - usually used for FX. Example: 5 USD for 1 mil USD of trading volume. In 10^8: value of 500000000 is 500000000 / 10^8 = 5 USD per million
    USD_PER_LOT = 2; // USD per 1 lot - usually used for CFDs and futures for commodities, and indices. Example: 15 USD for 1 contract. In 10^8: value of 1500000000 is 1500000000 / 10^8 = 15 USD per lot
    PERCENTAGE_OF_VALUE = 3; // Percentage of trading volume - usually used for Equities. Example: 0.005% of notional trading volume. Multiplied by 10^5: value of 500 is 500 / 10^5 = 0.005%
    QUOTE_CCY_PER_LOT = 4; // Quote Asset of Symbol per 1 lot - will be used for CFDs and futures for commodities, and indices. Example: 15 EUR for 1 contract of DAX. In 10^8: value of 1500000000 is 1500000000 / 10^8 = 15 EUR per contract
}

// Trading mode type of a symbol ENUM
enum ProtoTradingMode {
    ENABLED = 0; // Symbol is enabled for trading
    DISABLED_WITHOUT_PENDINGS_EXECUTION = 1; // Symbol is disabled, and pending Orders are not executed
    DISABLED_WITH_PENDINGS_EXECUTION = 2; // Symbol is disabled, but pending Orders are executed
    CLOSE_ONLY_MODE = 3; // Symbol is disabled, and pending Orders are not executed, but only close Orders are executed
}

// Swap calculation type ENUM
enum ProtoSwapCalculationType {
    PIPS = 0;
    PERCENTAGE = 1;
}

// Symbol entity which is available to manager (Trader gets ProtoSymbolEntity with fewer fields)
message ProtoManagerSymbol {
    required int64 symbolId = 1; // ID of the Symbol
    required string name = 2; // Name of the Symbol
    required int32 digits = 4; // Amount of available digits after comma in the price
    required int32 pipPosition = 5; // Specifies digit which is used for determining of Pip Position. WARNING: changing this parameter is not recommended as it will result in changing all future swaps (if they are calculated in pips), Renko bars and Range bars.
    optional bool lpEnabled = 7; // Specifies whether Symbol is turned on for price streaming or not
    optional bool enabled = 8; // Specifies ether Symbol is visible in cTrader or not
    optional int32 bidMarkUp = 12; // Bid markup value
    optional int32 askMarkUp = 13; // Ask markup value
    optional string description = 15; // Description for the Symbol
    optional int64 utcLastUpdateTimestamp = 16; // UNIX timestamp in milliseconds of the last update of the Symbol
    optional double sortingNumber = 23; // Number used to sort Symbols in Symbol Lists responses
    optional string measurementUnits = 24; // Specifies which unit is traded under base Asset
    optional int32 quoteExpirationTimeout = 27; // Timeout for last quote expiration
    optional ProtoMinimumSpreadConstraint minimumSpreadConstraint = 30; // Refers to the applicable Spread Constraint entity
    optional int64 lotSize = 32; // Amount of units of the base Asset in one lot. WARNING: changing of parameter is not recommended as it will result in changing all future commissions (if they are set in USD_PER_LOT) and rollover commissions.
    optional bool enableShortSelling = 33; // Specifies whether short selling is allowed or not
    optional int64 symbolCategoryId = 35; // ID of the Symbol Category where Symbol is located
    optional bool favorite = 37; // Specifies whether Symbol is favorite
    optional string tags = 49; // Custom tags. Used for searching Symbols
    optional int64 baseAssetId = 53; // ID of the base Asset
    optional int64 quoteAssetId = 54; // ID of the quote Asset
    optional ProtoTradingMode tradingMode = 58; // Specified trading mode for the Symbol that limits scope of trading operations Default: ENABLED
    optional ProtoDayOfWeek defaultSwapRollover3Days = 9 [default = MONDAY]; // Default day of 3x Swap
    optional double defaultSwapLong = 10; // Default value of Swap for long Positions
    optional double defaultSwapShort = 11; // Default value of Swap for short Positions
    optional int64 defaultLeverageId = 56; // Refers to default Dynamic Leverage entity
    optional uint32 priceLiquidityFeedId = 59; // ID of Liquidity Feed for market data
    optional uint32 tradeLiquidityFeedId = 60; // ID of Liquidity Feed for trading
    optional int64 defaultDividendTime = 61; // Default time for paying dividends
    repeated ProtoLocalization translation = 62; // Localisation setting for Trader
    optional int64 scheduleProfileId = 66; // Schedule Profile for Symbol
    optional int64 defaultCommissionProfileId = 67; // Default Commission Profile for Symbol
    optional int64 defaultVolumeProfileId = 68; // Default Volume Profile for Symbol
    optional int64 defaultExecutionProfileId = 69; // Default Execution Profile for Symbol
    optional string autochartistAlias = 70; // Name of the Symbol in Autochartist service. Used if Autochartist is enabled
    optional string tradingCentralAlias = 71; // Name of the Symbol in Trading Central service. Used if Trading Central is enabled
    optional int64 defaultProtectionProfileId = 72; // Default Protection Profile for Symbol
    optional int64 defaultSwapFreeProfileId = 73; // Default Swap Free Profile for Symbol
    optional int64 defaultGSLScheduleId = 74; // Default GSL (Guaranteed Stop Loss) Schedule ID for Symbol
    optional int64 holidayProfileId = 75; // Symbol Holiday Profile ID
    optional string bbspAlias = 76; // Name for the Symbol for integration with BBSP
    optional ProtoFuturesSettings futuresSettings = 77; // Settings for futures
    optional int64 defaultTradeNotificationProfileId = 78; // Default Trade Notification Profile for Symbol
    required int32 defaultSwapTime = 79; // Time in minutes from 00:00 (UTC) from which Swap Period is calculated
    required int32 defaultSwapPeriod = 80; // Swap is calculated every Swap Period (in hours)
}

// Archived Symbol entity
message ProtoArchivedSymbol {
    required int64 symbolId = 1; // Symbol ID
    required string name = 2; // Symbol name
    required int64 utcLastUpdateTimestamp = 3; // UNIX timestamp in milliseconds of the last update of the Symbol
    optional string description = 4; // Symbol description
    required int32 digits = 5;
    required int32 pipPosition = 6;
    required int64 lotSize = 7;
    optional string measurementUnits = 8;
    required int64 baseAssetId = 9;
    optional int32 unifiedSymbolId = 10;
}

// Localisation settings entity
message ProtoLocalization {
    required string locale = 1; // Localisation short name (up to 8 characters)
    required string title = 2; // Localisation descriptive name (up to 128 characters)
}

// Day of week ENUM
enum ProtoDayOfWeek {
    NONE = 0;
    MONDAY = 1;
    TUESDAY = 2;
    WEDNESDAY = 3;
    THURSDAY = 4;
    FRIDAY = 5;
    SATURDAY = 6;
    SUNDAY = 7;
}

// Group entity. Groups are used to manage Trader settings and Manager permission. Each Trader belongs to one Group which determines their trading parameters
message ProtoGroup {
    required int64 groupId = 1; // ID of the Group
    optional string name = 2; // Name of the Group
    optional bool enabled = 3; // Specifies whether Group is enabled (Trader's login are allowed) or not
    optional bool swapEnabled = 4; // Specifies whether SWAP charging is enabled or not
    optional int64 swapAndDividendProfileId = 5; // ID of Swap and Dividend profile
    optional double marginStopout = 9; // Margin Stop Out percentage (e.g. 0.50 = 50%)
    optional string description = 11; // Group description
    optional int64 utcLastUpdateTimestamp = 12; // UNIX timestamp in milliseconds of the last Group modification
    optional int64 priceStreamId = 13; // ID of the related Price Stream
    optional bool deleted = 14; // Specifies whether Group is deleted or not
    optional bool hasAccess = 15 [default = false];  // If TRUE then Manager has access to the Group and if FALSE then Manager doesn't have access to the Group
    repeated ProtoGroupSymbol symbol = 17; // List of per Symbol settings
    repeated ProtoDynamicCommission dynamicCommission = 18; // Parameters of the related Dynamic Commissions
    optional int64 bonusConversionRate = 19; // Amount of traded lots to convert one Bonus USD into one deposit USD. Used if bonusConvertLots = 1
    optional bool bonusConvertLots = 20; // Specifies Bonus conversion strategy (1 – Lots into USD; 0 – USD volume into USD) Default: BONUS_CONVERSION_TYPE_USD
    optional int64 bonusConversionRateLots = 21; // Amount of traded USD volume to convert one Bonus USD into one deposit USD. Used if bonusConvertLots = 0
    optional bool isDealingDesk = 23; // Specifies whether Group is Dealing Desk or not
    optional int64 maxAutoExecutionSizeProfileId = 24; // ID of Max Auto Execution Profile
    optional string blockedChannels = 25; // List of channels blocked for trading with ';' as a separator. Channel is sent with trading commands
    optional bool fairStopOut = 26; // If TRUE then Position is fully closed on Stop Out
    optional int64 regionId = 27; // ID of Region which will be used for GUI settings of the Trader
    optional bool copyDisabled = 28 [default = false]; // If TRUE then Traders of the Group are unable to create sub-accounts for Copy service
    optional bool stopoutDisabled = 29 [default = false]; // If TRUE then Traders is not checked for breaching Stop-Out level
    optional int32 inactivityGracePeriod = 30; // Grace period in days during which an Inactivity Fee is not charged for an Account since last filled Deal
    optional int32 inactivityChargePeriod = 31; // Period in days after which an Inactivity Fee is charged
    optional int32 inactivityFeeAmount = 32; // Inactivity Fee amount in cents, specified in USD and converted to Deposit currency of an Account
    optional bool copyProvidingDisabled = 33 [default = false]; // If TRUE then Traders of the Group are unable to become Copy Provider. Logic is on Copy side Default: FALSE
    optional int64 legalEntityId = 35; // ID of Legal Entity
    optional bool disablePasswordLogin = 36; // If TRUE then login by a password for Accounts in this Group is disabled. This password is not used to sign in to the trading applications. cTrader ID is used for this purpose. Password is only used for authenticating FIX API sessions
    optional bool allowWorseGSL = 37 [default = true]; // If TRUE then Traders are allowed to increase risk for Positions with Guaranteed Stop Loss
    optional bool isFakeSpreadBetting = 38; // Account type is treated as Spread Betting (ProtoAccountType=SPREAD_BETTING) if Group of the Trader has isFakeSpreadBetting = TRUE
    optional bool negativeBalanceProtection = 39; // IF TRUE then will get deposited to his balance = 0 when his balance becomes negative
    optional bool allowTraderChangeSO = 40; // If FALSE trader can not change their Stop Out strategy. Null value in ProtoCrudGroupReq is interpreted as keeping the current value of allowTraderChangeSO
}

// Group Symbol entity - per Symbol settings inside a Group
message ProtoGroupSymbol {
    required int64 symbolId = 1; // ID of the Group Symbol
    required bool enabled = 2; // Specifies if Symbol is available for the Traders of the Group
    optional uint64 leverageId = 32; // ID of Dynamic Leverage
    optional uint64 gslScheduleId = 35; // ID of GSL (Guaranteed Stop Loss) Schedule
    optional int64 commissionProfileId = 42; // ID of Commission Profile
    optional int64 volumeProfileId = 43; // ID of Volume Profile
    optional int64 executionProfileId = 44; // ID of Execution Profile
    optional int64 protectionProfileId = 45; // ID of Protection Profile
    optional int64 swapFreeProfileId = 46; // ID of Swap Free Profile
    optional int64 tradeNotificationProfileId = 47; // ID of Trade Notification Profile
}

// Group Symbol entity (with limited number of fields)
message ProtoLightGroup {
    required int64 groupId = 1; // ID of the Group
    optional string name = 2; // Name of the Group
    required bool enabled = 3; // Specifies whether Group is enabled (Trader's login are allowed) or not
    optional bool swapEnabled = 4; // Specifies whether SWAP charging is enabled or not
    optional double marginStopout = 9; // Margin Stop Out percentage (e.g. 0.50 = 50%)
    optional string description = 11; // Group description
    optional int64 priceStreamId = 13; // ID of the related Price Stream
    optional bool deleted = 14; // Specifies whether Group is deleted or not
    optional bool hasAccess = 15 [default = false]; // If TRUE then Manager has access to the group and if FALSE then Manager doesn't have access to the group
    optional bool isDealingDesk = 23; // Specifies whether Group is Dealing Desk or not
    optional int64 maxAutoExecutionSizeProfileId = 24; // ID of Max Auto Execution Size Profile
    optional int64 regionId = 25; // ID of Region which will be used for GUI settings of the Trader
    optional bool copyDisabled = 26 [default = false]; // If TRUE then Traders of the Group are unable to create sub-accounts for Copy service
    optional bool copyProvidingDisabled = 27 [default = false]; // If TRUE then Traders of the Group are unable to become Copy Provider. Logic is on Copy side Default: FALSE
    optional bool isFakeSpreadBetting = 28; // Account type is treated as Spread Betting (ProtoAccountType=SPREAD_BETTING) if Group of the Trader has isFakeSpreadBetting = TRUE
    optional bool negativeBalanceProtection = 29; // IF TRUE then will get deposited to his balance = 0 when his balance becomes negative
}

// Minimal Commission type ENUM
enum ProtoMinCommissionType {
    CURRENCY = 1;
    QUOTE_CURRENCY = 2;
}

// Dynamic Commission type
message ProtoDynamicCommission {
    required int64 monthlyVolume = 2; // Monthly volume in cents
    required int64 discount = 3; // Discount amount in % multiplied by 100: min = 0.01%, max = 100%, step = 0.01%. Value of 4321 means 43.21%
}

// Book type ENUM
enum ProtoBookType {
    BOOK_A = 1;
    BOOK_B = 2;
}

// Book request type ENUM
enum ProtoBookRequestType {
    ALL_BOOKS_REQUEST = 1;
    BOOK_A_REQUEST = 2;
    BOOK_B_REQUEST = 3;
}

// Symbol distance for Protection Profiles ENUM
enum ProtoSymbolDistanceType {
    SYMBOL_DISTANCE_IN_POINTS = 1; // 15 means 15 points
    SYMBOL_DISTANCE_IN_PERCENTAGE = 2; // 15 means 0.15%
}

// Crud operation type ENUM
enum ProtoCrudOperation {
    PROTO_CREATE = 1; // Create entity. Entity ID must be sent as 0
    PROTO_UPDATE = 3; // Update, unspecified fields are set to null/default values
    PROTO_DELETE = 4; // Delete entity
    PROTO_UPDATE_DIFF = 5; // Only specified fields(entities) are updated, unspecified fields are not changed
}

// Server Settings type
message ProtoServerSetting {
    required ProtoServerSettingType key = 1; // Setting type
    optional string value = 2; // Value of the setting
}

// Server Settings type ENUM
enum ProtoServerSettingType {
    END_OF_DAY_TIME = 2; // Time in minutes for applying Administrative (Rollover) Fee under Swap Free Profiles and for IB commissions
    BOOK_B_ORDER_FILLING_STRATEGY = 5; // 'VWAP', 'SPOT', 'PARTIAL'
    PRICE_FILTERING_ENABLED = 7; // 1 - ON, 0 - OFF
    DEPTH_THROTTLING_INTERVAL = 8; // Interval for quotes throttling, in milliseconds
    DEPTH_THROTTLING_ENABLED = 9; // 1 - ON, 0 - OFF
    LIFETIME = 12; // Lifetime of demo accounts, in days
    METHOD_OF_LIFETIME_CALCULATION = 13; // Trader lifetime calculating method used for calculation days for deactivation of inactive Accounts. 0 - Inactivity, 1 - Creation of account
    EVERYONE_IS_IB = 14; // If = 1 and Trader is created via manager protocol then introducingBroker = TRUE if not specified
    ALWAYS_MANUAL_ENABLED = 15; // 1 - ON, 0 - OFF. If enabled automatic execution of Deals is forbidden
    MIN_GAP_TOLERANCE = 16; // Min gap tolerance for automatic execution on Dealing Desk. Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% <= minGapTolerance then Order will be executed at the Order price
    MAX_GAP_TOLERANCE = 17; // Max gap tolerance. Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% >= maxGapTolerance then Order will be passed to the Dealer
    MANUAL_DEAL_TIMEOUT = 18; // Timeout of Manual Deal, in milliseconds
    EOD_REPORT_TIME = 19; // Time of the day in UTC when Report should be generated. HH:MM:SS
    MARGIN_RECALCULATION_TYPE = 21; // 0 - autorecalculation, default; 1 - manual recalculation
    ADDITIONAL_B_BOOK_DELAY_CHANNEL = 22; // List of Order channels which are executed with additional specified delay
    ADDITIONAL_B_BOOK_MIN_DELAY = 23; // Additional minimum delay in Book B added to the delay specified in Group Symbol settings, in milliseconds
    ADDITIONAL_B_BOOK_MAX_DELAY = 24; // Additional maximum delay in Book B added to the delay specified in Group Symbol settings, in milliseconds
    IB_REQUEST_AUTO_APPROVE = 25; // Configuration parameter that will allow to automatically accept IB requests. 0 - OFF, 1 - ON
    AVAILABLE_TRADING_BOOK = 26; // Available trading books: 0 - NONE, 1 - Book A only, 2 - Book B only, 3 - Both books
    MANUAL_DEAL_TIMEOUT_ACTION = 27; // Action after timeout of manual Deal. 0 - REJECT/RESET, 1 - EXECUTE
}

// Manager entity
message ProtoManager {
    required int64 managerId = 1; // ID of Manager
    required int64 login = 2; // Login of Manager
    required bool enabled = 3; // IF FALSE login is disabled
    repeated int64 group = 4 [packed = true]; // List of Groups available for Manager. Manager has access to Traders, Positions, Orders etc. only for Traders which are in their Groups
    required string email = 5; // Email of the Manager
    required string name = 6; // Name of the Manager
    optional string passwordHash = 7; // Hashed password of the manager (MD5 of password in lower case in utf-8)
    optional int64 utcLastUpdateTimestamp = 8; // UNIX timestamp in milliseconds of the last update of the Manager
    repeated ProtoManagerPermission permission = 9; // List of Manager permissions
    optional bool deleted = 11; // IF TRUE then Manager is deleted
    repeated int64 regionId = 12 [packed = true]; // List of Jurisdictions that is used by the Client app (not server) to limit access to personal data of a user from another Legal Entity
    repeated int64 manager = 13 [packed = true]; // List of Managers this Manager has access to
    repeated int64 specificGroupId = 14 [packed = true]; // List of Manager's Groups
    optional string groupMask = 15; // Mask to specify access to Groups by pattern matching by Group name. Patterns are separated by ";" and "*" means from 0 to several symbols (any). Example groupMask: abc* corresponds to Groups with names abc, abcd, abcd45 etc
    repeated string disabledBrokerName = 16; // An array of all broker names disabled for the Manager. The Manager lacks access to all Accounts registered under the broker names contained in this array and any server entities linked to these Accounts (Orders, Positions, etc.). This logic works in addition to permission separation by Groups.
    optional bool template = 17; // If TRUE - this entity is a template used for storing a set of manager permissions. Logging on as this manager is not possible
}

// Country entity
message ProtoCountry {
    required int64 countryId = 1; // ID of the Country
    required string name = 2; // Name of the Country
    optional string countryA2Code = 3; // ISO Code of the Country
}

// Enum type for Manager permissions
enum ProtoManagerPermission {
    ROLE_TRADER_READ = 1;
    ROLE_TRADER_CREATE = 2;
    ROLE_TRADER_EDIT = 3;
    ROLE_TRADER_DELETE = 4;
    ROLE_TRADER_CASHIER = 5;
    ROLE_TRADER_CHANGE_PASSWORD = 6;
    ROLE_TRADER_VIEWALL = 7;
    ROLE_TRADER_PHONE_TRADING = 8;
    ROLE_TRADER_BONUS_CASHIER = 9;
    ROLE_MANAGER_READ = 10;
    ROLE_MANAGER_CREATE = 11;
    ROLE_MANAGER_EDIT = 12;
    ROLE_MANAGER_DELETE = 13;
    ROLE_MANAGER_CHANGE_PASSWORD = 14;
    ROLE_FORCE_TRADING = 15;
    ROLE_GROUP_READ = 20;
    ROLE_GROUP_CREATE = 21;
    ROLE_GROUP_EDIT = 22;
    ROLE_GROUP_DELETE = 23;
    ROLE_GROUPS_SUPERVISOR = 24;
    ROLE_MANAGERS_SUPERVISOR = 25;
    ROLE_PRICE_STREAM_EDIT = 32;
    ROLE_SYMBOL_EDIT = 41;
    ROLE_SETTINGS_READ = 50;
    ROLE_SETTINGS_EDIT = 51;
    ROLE_HISTORICAL_DATA_READ = 100;
    ROLE_HISTORICAL_DATA_IMPORT = 101;
    ROLE_HISTORICAL_DATA_EXPORT = 102;
    ROLE_HISTORICAL_DATA_ADD_BAR = 103;
    ROLE_HISTORICAL_DATA_EDIT_BAR = 104;
    ROLE_HISTORICAL_DATA_DELETE_BAR = 105;
    ROLE_REPORT_READ = 110;
    ROLE_REPORT_EXPORT = 111;
    ROLE_JOURNAL_READ = 120;
    ROLE_JOURNAL_EXPORT = 121;
    ROLE_ORDER_READ = 130;
    ROLE_ORDER_EXPORT = 131;
    ROLE_POSITION_READ = 140;
    ROLE_POSITION_EXPORT = 141;
    ROLE_TRADING_HISTORY_READ = 150;
    ROLE_TRADING_HISTORY_EXPORT = 151;
    ROLE_LIQUIDITY_READ = 160;
    ROLE_LIQUIDITY_EDIT = 161;
    ROLE_EXPOSURE_READ = 170;
    ROLE_INTEGRATION_READ = 180;
    ROLE_ASSET_CLASS_EDIT = 181;
    ROLE_PB_SETTING_READ = 190;
    ROLE_PB_SETTING_WRITE = 191;
    ROLE_PRICE_FILTER_EDIT = 194;
    ROLE_TRADER_INTRODUCING_BROKER = 195;
    ROLE_GIVE_UP_REPORT_READ = 196;
    ROLE_GUI_SETTINGS_EDIT = 197;
    ROLE_REPORT = 198;
    ROLE_DEALING = 199;
    ROLE_ENTITY_BOOK_READ = 201;
    ROLE_FUNNEL_READ = 202;
    ROLE_FUNNEL_EDIT = 203;
    ROLE_HOOK_READ = 204;
    ROLE_HOOK_EDIT = 205;
    ROLE_WITHDRAWAL_REQUEST_READ = 206;
    ROLE_WITHDRAWAL_REQUEST_EDIT = 207;
    ROLE_KYC_READ = 208;
    ROLE_KYC_EDIT = 209;
    ROLE_MARKETING_LINKS_READ = 210;
    ROLE_MARKETING_LINKS_EDIT = 211;
    ROLE_USER_EXPORT = 212;
    ROLE_USER_DELETE = 213;
    ROLE_REGIONS_ADMIN = 214;
    ROLE_COPY_ADMIN = 215;
    ROLE_LIVECHAT = 216;
    ROLE_CTID_NOTIFICATIONS = 217;
    ROLE_PROFILES_EDIT = 218;
    ROLE_MARKETING_SEND_PUSH = 219;
    ROLE_MARKETING_SEND_BLOTTER_MESSAGE = 220;
    ROLE_MANAGER_CHANGE_OWN_PASSWORD = 221;
    ROLE_WHITE_LABELS_SUPERVISOR = 222; // Managers without this permission will not have access to the newly created White Label  as it will be added to their disabledBrokerName
    ROLE_REPORT_FULL_EDIT = 223;
}

// Record with data about exposure per Symbol
message ProtoExposureSymbolRecord {
    required int64 symbolId = 1; // ID of the Symbol
    required ProtoBookType bookType = 2; // Book type
    required int32 positionCount = 3; // Number of Positions
    required int64 buyVolume = 4; // Volume for buy side in USD
    required int64 sellVolume = 5; // Sell volume in USD
    required double buyVwap = 6; // VWAP (volume weighted average price) for buy side
    required double sellVwap = 7; // VWAP (volume weighted average price) for sell side
}

// Execution type ENUM
enum ProtoExecutionType {
    ORDER_ACCEPTED = 2;
    ORDER_FILLED = 3;
    ORDER_REPLACED = 4;
    ORDER_CANCELLED = 5;
    ORDER_EXPIRED = 6;
    ORDER_REJECTED = 7;
    ORDER_CANCEL_REJECTED = 8;
    SWAP = 9;
    DEPOSIT_WITHDRAW = 10;
    ORDER_PARTIAL_FILL = 11;
    BONUS_DEPOSIT_WITHDRAW = 12;
}

// Asset type ENUM
enum ProtoAssetType {
    PROTO_FOREX = 1;
    PROTO_METALS = 2;
    PROTO_INDICES = 3;
    PROTO_COMMODITY = 4;
    PROTO_STOCK = 5;
    PROTO_CRYPTO = 6;
    PROTO_OTHER = 7;
}

// Asset entity
message ProtoAsset {
    required int64 assetId = 1; // Asset ID
    required string name = 2; // Asset name
    required string description = 3; // Asset description
    required ProtoAssetType type = 4; // Asset type
    required bool depositAsset = 5; // Asset is used as a deposit Asset
    required bool depositable = 6; // Asset could be used as a deposit currency
    optional string displayName = 7; // Name of the Asset to be used on UI
    optional bool major = 8; // If TRUE then Asset will be used for conversion chains
    optional int32 digits = 9; // Number of digits allowed for Asset. Precision of the Asset
    optional string calendarAlias = 10; // Alias to subscribe to Calendar News for the Asset News
}

// Price Stream entity
message ProtoPriceStream {
    required int64 priceStreamId = 1; // ID of Price Stream
    required string name = 2; // Name of Price Stream
    optional string description = 3; // Description of Price Stream
    optional bool deleted = 4; // If TRUE then Price Stream is deleted
    optional int64 utcLastUpdateTimestamp = 5; // UNIX timestamp of the last update of the Price Stream
    repeated ProtoPriceStreamSymbol priceStreamSymbol = 6; // Price Stream Symbols
}

// Price Stream settings per Symbol
message ProtoPriceStreamSymbol {
    required int64 symbolId = 1; // ID of the Symbol
    required int32 bidMarkup = 2; // Bid markup value (according to markup type)
    required int32 askMarkup = 3; // Ask markup value (according to markup type)
    optional bool markupIsRelative = 4; // Specifies type of the markup (1 = relative; 0 = absolute)
}

// Represents time frame of Symbol Session
message ProtoInterval {
    required uint32 startSecond = 3; // Start time of the Session. Seconds from the beginning of Sunday 00:00:00
    required uint32 endSecond = 4; // End time of the Session. Seconds from the beginning of Sunday 00:00:00
    optional bool isGlobalSessionStart = 5; // If TRUE then Session start is considered as a start of the Global Session. Used for MOO desired timestamp validation
    optional bool isGlobalSessionEnd = 6; // If TRUE then Session end is considered as end of the Global session. SpotEvent.sessionClose, high, low will be regenerated
}

// Liquidity Feed per Symbol settings
message ProtoLiquidityFeedSymbol {
    required int32 symbolId = 1; // ID of the Liquidity Feed Symbol
    optional string priceAlias = 2; // Symbol Name or ID on LP side for pricing. Should be provided by the LP
    optional string tradeAlias = 3; // Symbol Name or ID on LP side for trading. Should be provided by the LP
    required int64 liquidityFeedSymbolId = 4; // ID of Liquidity Feed Symbol
    required int64 liquidityFeedId = 5; // ID of Liquidity Feed
    required bool sendInLots = 6; // Determines if Volume in Order requests to LP should be sent in Lots. Also determines logic of interpretation of volume in execution events from LP
    required int64 dealExpirationTimeout = 7; // Timeout in milliseconds for receiving execution result from LP
    required int64 noQuoteTimeout = 8; // Timeout in milliseconds for receiving quotes from LP
    optional int64 lpLotSize = 9; // Lot size on LP side
    optional int32 product = 10; // Specific value used by some LPs for different purposes. Get details for specific LP from Spotware support
}

message ProtoLiquidityFeedFIXSettings {
	optional string login = 1; //The login for the FIX connection.
	optional string socketHost = 2; //The host of the server.
	optional int32 socketPort = 3; //The port of the server.
	optional string senderCompId = 4; //The senderCompId.
	optional string targetCompId = 5; //The targetCompId
	optional string timezone = 6; //The time zone used for connection settings.
	optional ProtoDayOfWeek sessionStartDay = 7; //The day of the week when the session starts.
	optional string sessionStartTime = 8; //The time when the session starts denoted in the specified time zone.
	optional ProtoDayOfWeek sessionEndDay = 9; //The day of the week when the session starts.
	optional string sessionEndTime = 10; //The time when the session ends denoted in the specified time zone.
}

// Liquidity feed entity
message ProtoLiquidityFeed {
    required int64 liquidityFeedId = 1; // ID of Liquidity Feed
    required string type = 2; // Type of Liquidity Feed
    required string name = 3; // Name of Liquidity Feed
    optional string configurationSuffix = 10; // Suffix for configuration settings
    optional bool enabled = 12; // Enables Liquidity Feed
    optional ProtoLiquidityFeedFIXSettings pricingFIXSettings = 14; // If Liquidity Feed uses FIX protocol, then this is FIX settings for pricing
    optional ProtoLiquidityFeedFIXSettings tradingFIXSettings = 15; // If Liquidity Feed uses FIX protocol, then this is FIX settings for trading
}

// Deal (execution) entity
message ProtoDeal {
    required int64 dealId = 1; // ID of the Deal
    required int64 orderId = 2; // ID of corresponding trade Order
    required int64 positionId = 3; // ID of corresponding Position
    required int64 traderId = 4; // ID of the Trader
    required int64 volume = 5; // Requested volume
    required int64 filledVolume = 6; // Volume, filled under this Deal
    required int64 symbolId = 7; // Symbol ID
    required int64 createTimestamp = 8; // UNIX timestamp in milliseconds of the Deal creation
    required int64 executionTimestamp = 9; // UNIX timestamp in milliseconds of the Deal execution
    required int64 utcLastUpdateTimestamp = 10; // UNIX timestamp in milliseconds of the last update of the Deal
    optional double executionPrice = 11; // Execution price of the Deal, including all markups
    optional double limitPrice = 12; // Limit price for Deals from Market Orders
    required ProtoTradeSide tradeSide = 13; // Trade side of the Deal Default: TRADE_SIDE_BUY
    required ProtoDealStatus dealStatus = 14; // Status of the Deal Default: DEAL_STATUS_FILLED
    required ProtoDealType dealType = 15; // Type of the Deal Default: DEAL_TYPE_MARKET
    optional double marginRate = 16; // Base Asset to deposit Asset conversion rate
    optional int64 commission = 17; // Amount of trading commission associated with the Deal
    optional string clientRequestId = 18; // ClientRequestId value specified in the Order
    optional ProtoBookType bookType = 19 [default = BOOK_A]; // Book type
    optional double lpExecutionPrice = 20; // Execution price of the Deal, excluding all markups
    optional string lpOrderId = 21; // Order ID in the LP's side
    optional string label = 22; // Label value specified in the corresponding Order request
    optional string channel = 23; // Channel value specified in the corresponding Order request
    optional string comment = 24; // Comment value specified in the corresponding Order request
    optional int64 priceSnapshotId = 25; // ID of the related Price Snapshot (snapshot of the prices at the moment of creation of the Deal)
    optional double baseToUsdConversionRate = 26; // Base Asset to USD conversion rate
    optional int64 feedId = 31; // Liquidity Feed ID
    optional ProtoClosePositionDetail closePositionDetail = 32; // Related trading details for Closing Deal
    optional string serverOrderId = 33; // ClientOrderId from LP
    optional int64 introducingBrokerCommission = 35; // Additional commission which will be paid to the IB for the Deal
    optional int64 pocketCommission = 36; // Commission which Broker will pay to IB for the Deal. Always in USD (cents)
    optional int64 pocketMarkup = 37; // Markup (in terms of the price) which Broker will pay to IB for the Deal. Always in USD (cents)
    optional int64 introducedByBrokerId = 39; // ID of the IB who will get IB commissions for the Deal
    optional int64 mirroringCommission = 40; // Amount of commission which Trader pays to Spotware for providing some strategy in Copy service
    optional string measurementUnits = 41; // Specifies which unit is traded under base Asset
    optional int64 lotSize = 42; // Amount of units of the base Asset in one lot of the Symbol
    optional int64 markup = 43; // Markup value (in USD) of the Deal
    optional bool innerMirroringFee = 44; // Mirroring Fee rate, used by Copy functionality
    optional int64 totalVolumeInUsd = 45; // Total USD volume of the Trader from the beginning of time
    optional bool spreadBetting = 46; // TRUE for Spread Betting Traders
    optional int64 stake = 47; // Stake, filled under this Deal (for Spread Betting)
    optional double desiredVWAP = 48; // Price desired by the Trader as an execution price
    optional double marketVWAP = 49; // Real market VWAP at the moment of execution of the Deal
    optional int32 tolerance = 50; // Tolerance distance
    optional string rejectReason = 51; // Reason why Order was rejected
    optional bool manual = 52; // If TRUE then Deal is Manual Deal
    optional int64 filledEurVolume = 55; // Filled volume in EUR
    optional int64 filledGbpVolume = 56; // Filled volume in GBP
    optional int64 equity = 57; // Trader's equity
    optional uint32 moneyDigits = 58; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission, mirroringCommission, pocketCommission
}

// Closing Deal entity
message ProtoLightClosingDeal {
    required int64 dealId = 1; // ID of Closing Deal
    required int64 orderId = 2; // ID or related Order
    required int64 positionId = 3; // ID of related Position
    required int64 volume = 4; // Requested volume
    required int64 filledVolume = 5; // Volume, filled under this Deal
    required int64 symbolId = 6; // ID of Symbol
    required int64 createTimestamp = 7; // UNIX timestamp in milliseconds of the Deal creation
    required int64 executionTimestamp = 8; // UNIX timestamp in milliseconds of the Deal execution
    optional double executionPrice = 9; // Execution price of the Deal, including all markups
    required ProtoTradeSide tradeSide = 10; // Side of the Deal
    required ProtoDealStatus dealStatus = 11; // Status of the Deal Default: DEAL_STATUS_FILLED
    required ProtoDealType dealType = 12; // Type of the Deal Default: DEAL_TYPE_MARKET
    optional int64 commission = 13; // Amount of trading commission associated with the Deal
    optional string label = 14; // Label field value from corresponding Order
    optional string channel = 15; // Channel value specified in the corresponding Order request
    optional string comment = 16; // Comment value specified in the corresponding Order request
    optional int64 priceSnapshotId = 17; // ID of the related Price Snapshot (snapshot of the prices at the moment of creation of the Deal)
    optional double baseToUsdConversionRate = 18; // Base Asset to USD conversion rate
    optional ProtoLightClosePositionDetail closePositionDetail = 19; // Related trading details for Closing Deal
    optional int64 introducingBrokerCommission = 20; // Additional commission which will be paid to the IB for the Deal
    optional int64 mirroringCommission = 21; // Amount of commission which Trader pays to Spotware for providing some Strategy in Copy
    optional int64 lotSize = 22; // Amount of units of the base Asset in one lot of the Symbol
    optional int64 stake = 23; // Stake, filled under this Deal (for Spread Betting)
    repeated ProtoLightOffsetDeal offsetDeals = 24; // Deals that were offset by a this Deal and that are offsetting this Deal
    optional uint32 moneyDigits = 25; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission,mirroringCommission, introducingBrokerCommission
    optional double marginRate = 26; // Base Asset to deposit Asset conversion rate
}

// Trading details for Closing Deal (with limited number of fields)
message ProtoLightClosePositionDetail {
    required double entryPrice = 1; // Position price at the moment of filling the closing Order
    required int64 profit = 2; // Amount of realized gross profit after Closing Deal execution
    required int64 swap = 3; // Amount of realized Swap related to closed volume
    required int64 commission = 4; // Amount of realized commission related to closed volume
    required int64 balance = 5; // Trader's balance after Closing Deal execution
    optional double quoteToDepositConversionRate = 6; // Quote/Deposit currency conversion rate on the time of Closing Deal execution
    optional int64 closedVolume = 7; // Closed volume in cents
    optional int64 balanceVersion = 8; // Balance version of the Account related to Closing Deal operation
    optional int64 introducingBrokerCommission = 9; // Additional commission which will be paid to the IB for the Deal
    optional int64 mirroringCommission = 10; // Amount of commission which Trader pays to Spotware for providing some Strategy in Copy
    optional int64 minEquity = 11; // Minimum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
    optional int64 maxEquity = 12; // Maximum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
    optional int64 offsetDealTimestamp = 13; // UNIX timestamp in milliseconds of execution of the first offset opening Deal for the Closing Deal
    optional int64 closedStake = 16; // Stake, realized by the related Deal
    optional uint32 moneyDigits = 17; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, mirroringCommission, introducingBrokerCommission, balance, pnlConversionFee
    optional int64 pnlConversionFee = 18; // Conversion Fee applied to the Deal in account's ccy when Trader symbol's quote Asset ID <> ProtoOATrader.depositAssetId
}

// Offset Deal entity
message ProtoLightOffsetDeal {
    required int64 dealId = 1; // ID of offset Deal
    required int64 filledVolume = 2; // Volume, filled under this Deal
    required int64 executionTimestamp = 3; // UNIX timestamp in milliseconds of the Deal creation
    optional double executionPrice = 4; // Execution price of the Deal, including all markups
    optional uint64 stake = 5; // Stake, filled under this Deal (for Spread Betting)
}

// Asset Class entity
message ProtoAssetClass {
    optional int64 id = 1; // ID of Asset Class
    optional string name = 2; // Name of Asset class
    optional double sortingNumber = 3; // Number used for sorting of Asset Classes in UI
    optional bool defaultLots = 6; // Specifies what is the default trading unit for the Symbols of the Asset Class (TRUE=Lots; FALSE=Units)
}

// Details of a Deal that was offset by a specific Deal or is offsetting a specific Deal
message ProtoDealOffset {
    required int64 dealId = 1; // The unique ID of the execution Deal
    required int64 volume = 2; // Matched volume, in cents
    optional uint64 stake = 3; // Stake for Spread Betting
    optional int64 executionTimestamp = 4; // UNIX timestamp in milliseconds of execution of the offset Deal
    optional double executionPrice = 5; // Execution price of the offset Deal
}

// Deal status type ENUM
enum ProtoDealStatus {
    FILLED = 2;
    PARTIALLY_FILLED = 3;
    REJECTED = 4;
    INTERNALLY_REJECTED = 5;
    ERROR = 6;
    MISSED = 7;
}

// Deal type ENUM
enum ProtoDealType {
    MARKET_DEAL = 1;
    LIMIT_DEAL = 2;
}

// Quote type ENUM
enum ProtoQuoteType {
    BID = 1;
    ASK = 2;
}

// Record with info about changes in SL/TP for specific Order
message ProtoStopLossTakeProfitChangeRecord {
    optional double newStopLoss = 1; // New value of Stop Loss
    optional double newTakeProfit = 2; // New value of Take Profit
    required int64 createTimestamp = 3; // UNIX timestamp in milliseconds of when the record was created
    optional int64 orderId = 4; // ID of related Order
}

// Swap calculation record
message ProtoSwapCalculationRecord {
    required int64 chargedSwap = 1; // Amount of SWAP charged for the specified Position
    required int64 currentSwap = 2; // Full amount of SWAP for the specified Position
    required int64 createTimestamp = 3; // UNIX timestamp in milliseconds of Swap calculation
    optional string depositCurrency = 4; // Deposit currency of the Trader
    optional uint32 moneyDigits = 5; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects chargedSwap, currentSwap
}

// Trader session info
message ProtoTraderSessionInfo {
    required uint64 sessionId = 1; // ID of Trader Session
    required uint64 traderId = 2; // ID of Trader
    required string proxyId = 3; // ID of Proxy
    optional ProtoGeoInfo geoInfo = 4; // Info about Trader geolocation (based on their ip address)
    optional string applicationType = 5; // Application used by Trader
}

// Symbol Category
message ProtoSymbolCategory {
    required int64 id = 1; // ID of the Symbol Category
    required int64 assetClassId = 2; // ID of the Asset Class which contains Symbol Category
    required string name = 3; // Name of the Symbol Category
    required string color = 4; // Color used in UI for the Symbol Category
    required double sortingNumber = 5; // Sorting number used in UI for the Symbol Category
    required bool expanded = 6; // If TRUE then Category is displayed in UI expanded, otherwise - collapsed
    required bool isDefault = 7; // IF TRUE then Category is shown by default in UI
    optional bool isDomEnabled = 8; // IF TRUE then Depth of market is displayed in UI for Symbols in this Category
}

// Max Auto Execution settings for specific Symbol. Applied for Dealing Desk Groups
message ProtoMaxAutoExecutionSizeSymbol {
    required uint64 symbolId = 1; // Symbol ID
    required uint64 maxAutoExecutionSize = 2; // If Order size is larger than this value it will be passed to the Dealer, in cents
}

// Profile with Max Auto execution settings. Applied for Dealing Desk Groups
message ProtoMaxAutoExecutionSizeProfile {
    required uint64 profileId = 1; // Profile ID
    required string name = 2; // Profile name
    optional string description = 3; // Profile description
    repeated ProtoMaxAutoExecutionSizeSymbol symbol = 4; // Symbol setting entity
}

// Symbol setting for manual execution
message ProtoDealingSymbol {
    required int64 symbolId = 1; // Symbol ID
    required bool alwaysManual = 2; // If TRUE then execution for this Symbol is always manual
}

// Manual execution reason (why Order was sent for manual execution) ENUM
enum ProtoManualDealReason {
    MANUAL_DEAL_REASON_ALWAYS_MANUAL = 1;
    MANUAL_DEAL_REASON_VOLUME = 2;
    MANUAL_DEAL_REASON_MAX_GAP_TOLERANCE = 3;
    MANUAL_DEAL_REASON_EMPTY_DOM = 4;
}

// Manual Deal
message ProtoManualDeal {
    required int64 traderId = 1; // ID of the Trader
    required int64 traderLogin = 2; // Login of the Trader
    optional string traderName = 3; // Name of the Trader
    required int64 positionId = 5; // Position ID
    required int64 symbolId = 6; // Symbol ID
    required int64 orderId = 7; // Order ID
    required ProtoOrderType orderType = 8; // Order type
    required ProtoTradeSide tradeSide = 9; // Trade side of the Deal Default: TRADE_SIDE_BUY
    required ProtoBookType bookType = 10; // Book type
    required bool closingOrder = 11; // Related closing Order
    required bool guaranteedStopLoss = 12; // If TRUE then Stop Loss is Guaranteed
    required bool checkTolerance = 13; // Specifies whether tolerance check should be applied at the moment of execution or not
    optional int64 limitPrice = 14; // Limit price for Deals from Market Range Orders
    optional int64 desiredVWAP = 15; // Price desired by the Trader as an execution price
    required int64 dealId = 16; // ID of the Deal
    required int64 volume = 17; // Volume in cents
    optional int64 stake = 18; // Stake (for Spread Betting)
    optional int64 triggerPrice = 19; // Price which triggered the Deal
    required int64 groupId = 20; // ID of Trader's Group
    required ProtoManualDealReason reason = 21; // Reason for manual execution
    required int64 timestamp = 22; // UNIX timestamp in milliseconds of the Manual Deal
    optional int64 managerId = 23; // ID of the Manager, who processed the Deal
    optional int64 managerLogin = 24; // Login of the Manager, who processed the Deal
    required int64 markup = 25; // Total (Symbol + Price Stream) absolute amount of points of markup for the moment of generating of the Deal
    optional bool stopOut = 26; // If TRUE then Deal was generated by Stop Out
    optional int64 closeWithPID = 27; // Some number which may be used to aggregate Deals into Positions on the hedged accounts in UI
    required int64 depositAssetId = 28; // ID of the deposit Asset of the Trader
}

// Symbol entity (with limited number of fields)
message ProtoLightSymbol {
    required int64 id = 1; // Symbol ID
    required int64 symbolCategoryId = 2; // Symbol Category ID
    required double sortingNumber = 3; // Number used to sort Symbols in Symbol Lists responses
    optional string name = 4; // Symbol name
    optional string description = 5; // Symbol description
    optional string tags = 6; // Custom tags. Used for searching Symbols
    optional bool favorite = 7; // Specifies whether Symbol is favorite
    optional bool enabled = 8; // Specifies if Symbol is available for the tTraders
    optional int64 baseAssetId = 9; // ID of base Asset
    optional int64 quoteAssetId = 10; // ID of quote Asset
    optional string translation = 11; // Localisation setting for Trader
    optional int32 unifiedSymbolId = 12; // Additional Symbol ID used for matching symbols of different Brokers
}

// Symbol description
message ProtoSymbolDescription {
    required int64 symbolId = 1; // Symbol ID
    optional string longDescription = 2; // Long description of the symbol. Max length = 5120 symbols
    optional bytes symbolLogo = 3; // PNG file that contains Symbol logo. Max bytes = 65536
}

// Dynamic Leverage entity (see https://help.ctrader.com/ctrader/trading/dynamic-leverage)
message ProtoDynamicLeverage {
    required int64 leverageId = 1; // ID of Dynamic Leverage
    required string name = 2; // Name of Dynamic Leverage
    optional string description = 3; // Description of Dynamic Leverage
    repeated ProtoDynamicLeverageTier tiers = 4; // Tier of Dynamic Leverage
    optional int64 utcLastUpdateTimestamp = 5; // UNIX timestamp in milliseconds when record was updated
}

// Dynamic Leverage tier entity
message ProtoDynamicLeverageTier {
    required int64 volume = 1; // Volume of Tier as max USD volume of the Open Position (per side) to apply specified Leverage
    required int32 leverage = 2; // Leverage of Tier
}

// GSL Schedule entity
message ProtoGSLSchedule {
    required int64 scheduleId = 1; // ID of GSL Schedule
    required string name = 2; // Name of this GSL Schedule
    repeated ProtoGSLScheduleTier tiers = 3; // List of (time -> multiplier) Schedule Tiers
}

// GSL Tier entity
message ProtoGSLScheduleTier {
    required int32 startTime = 1; // This Tier is active from startTime (Count of seconds from 00:00:00)
    required int32 multiplier = 2; // Tier's multiplier (in percents): 34 means 34%
}

// Records with info about ip address related with specific Order action
message ProtoOrderActionIP {
    required int64 actionId = 1; // Action ID
    required string actionIPAddress = 2; // IP address
}

// Withdrawal Request entity
message ProtoWithdrawRequest {
    required uint64 id = 2; // ID of Withdrawal Request
    required uint64 traderId = 3; // Trader ID
    required uint64 createTimestamp = 4; // UNIX timestamp in milliseconds of the Withdrawal Request creation
    required uint64 utcLastUpdateTimestamp = 5; // UNIX timestamp in milliseconds when the the Withdrawal Request was updated
    required uint64 amount = 6; // Amount of operation
    optional string comment = 7; // Comment specified by the Trader
    required ProtoRequestStatus requestStatus = 8; // Status of the Withdrawal Request
    optional uint64 assignedTo = 9; // ID of the Manager who processed this request
    optional string brokerComment = 10; // Comment specified by the Manager
    optional uint32 moneyDigits = 11; // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects amount
}

// Withdrawal Request type ENUM
enum ProtoRequestStatus {
    NEW = 0;
    APPROVED = 1;
    DECLINED = 2;
    CANCELLED = 3;
}

// Limited Risk types ENUM
enum ProtoLimitedRiskMarginCalculationStrategy {
    ACCORDING_TO_LEVERAGE = 0;
    ACCORDING_TO_GSL = 1;
    ACCORDING_TO_GSL_AND_LEVERAGE = 2;
}

// Trading Schedule Profile entity
message ProtoScheduleProfile {
    required int64 scheduleProfileId = 1; // ID of the Schedule Profile
    required string name = 2; // Name of the Schedule Profile
    optional string description = 3; // Description of Schedule Profile
    required string scheduleTimeZone = 4; // Profile time zone
    repeated ProtoInterval interval = 5; // Schedule Profile intervals
    optional int64 utcLastUpdateTimestamp = 6; // UNIX timestamp in milliseconds when the Schedule was last updated
}

// Commission Profile entity
message ProtoCommissionProfile {
    required int64 commissionProfileId = 1; // ID of the Commission Profile
    required string name = 2; // Name of the Commission Profile
    optional string description = 3; // Description of Commission Profile
    required ProtoCommissionType commissionType = 5 [default = USD_PER_MILLION_USD]; // Commission Type to interpret preciseTradingCommissionRate
    required ProtoMinCommissionType minCommissionType = 7 [default = CURRENCY]; // Commission Type to interpret preciseMinCommission
    required int64 minCommissionAssetId = 8; // Asset of the minimal commission. Used when minCommissionType = 0
    optional int64 preciseTradingCommissionRate = 9; // Commission rate for the Profile
    optional int64 preciseMinCommission = 10; // Amount of minimal commission to be paid for each Order, multiplied by 10^8: 10053099944 = 100.53099944 USD
    optional bool avoidMinCommissionOnStopOut = 11 [default = false]; // If TRUE then minimal commission is not charged on Stop Out
    optional int64 utcLastUpdateTimestamp = 12; // UNIX timestamp in milliseconds when the Profile was last updated
    optional int32 pnlConversionFeeRate = 13; // Conversion Fee in percentage cents, 1234 means 12.34%
}

// Volume Profile entity
message ProtoVolumeProfile {
    required int64 volumeProfileId = 1; // ID of the Volume Profile
    required string name = 2; // Name of the Volume Profile
    optional string description = 3; // Description of Volume Profile
    required int64 minVolume = 4; // Minimum volume in base Asset of the Symbol
    required int64 stepVolume = 5; // Allowed volume step in base Asset of the Symbol
    required int64 maxVolume = 6; // Maximum volume in base Asset of the Symbol
    required int64 minStake = 7; // Minimal stake (for Spread Betting) in Deposit currency. MinVolume is ignored for Spread Betting Accounts
    required int64 stepStake = 8; // Step of stake (for Spread Betting) in Deposit currency. StepVolume is ignored for Spread Betting Accounts
    required int64 maxStake = 9; // Maximum stake (for Spread Betting) in Deposit currency. MaxVolume is ignored for Spread Betting Accounts
    required uint64 maxExposure = 10; // Maximum exposure as volume in USD cents
    optional int64 utcLastUpdateTimestamp = 11; // UNIX timestamp in milliseconds when the Profile was last updated
}

// Execution Profile entity
message ProtoExecutionProfile {
    required int64 executionProfileId = 1; // ID of the Execution Profile
    required string name = 2; // Name of the Execution Profile
    optional string description = 3; // Description of Execution Profile
    required uint32 minBookBDelay = 4; // Minimal Book B execution delay in milliseconds
    required uint32 maxBookBDelay = 5; // Maximum Book B execution delay in milliseconds
    required ProtoExecutionPolicy executionPolicy = 6; // Determines execution policy for all opening Orders
    required ProtoGSLExecutionPolicy gslExecutionPolicy = 7 [default = DISABLED]; // Type of execution policy
    optional int64 utcLastUpdateTimestamp = 8; // UNIX timestamp in milliseconds when the Profile was last updated
    optional int64 conditionVolumeUsd = 9; // Used only if executionPolicy = BOOK_A_WITH_CONDITION. If usdVolume >= conditionVolumeUsd then BOOK_A is used, otherwise BOOK_B is used
}

// Protection Profile Entity
message ProtoProtectionProfile {
    required int64 protectionProfileId = 1; // ID of the Protection Profile
    required string name = 2; // Name of the Protection Profile
    optional string description = 3; // Description of Protection Profile
    required int64 gslCharge = 4; // Charge (additional commission) for Guaranteed Stop Loss placement
    required uint32 slDistance = 5; // Minimal distance between current market price and Stop Loss specified in units as per distanceSetIn
    required uint32 tpDistance = 6; // Minimal distance between current market price and Stop Loss Take Profit specified in units as per distanceSetIn
    required uint32 gslDistance = 7; // Minimal distance for placing Guaranteed Stop Loss specified in units as per distanceSetIn
    required ProtoSymbolDistanceType distanceSetIn = 8 [default = SYMBOL_DISTANCE_IN_POINTS]; // Distance in points (15 means 15 points) or percentage (15 means 0.15%)
    required int32 tolerance = 9; // Tolerance distance(max slippage for instant Orders) specified in units as per distanceSetIn. If slippage is more than tolerance and price is better for the Trader Order will be executed at market price. If slippage is more than tolerance and price is worse for the Trader Order will be cancelled
}

// Swap Free Profile (with Administrative Fee instead of Swaps)
message ProtoSwapFreeProfile {
    required int64 swapFreeProfileId = 1; // ID of the Swap Free Profile
    required string name = 2; // Name of the Swap Free Profile
    optional string description = 3; // Description of Swap Free Profile
    required int64 rolloverCommission = 4; // Kind of Swap for Swap free Accounts (USD per million USD in cents)
    required int32 skipRolloverDays = 5; // Count of nights before first Rollover Commission is charged
    required int32 rolloverChargePeriod = 6; // Payment period of Rollover Commission in days (default = 1). 1 (or 0) means daily payments, 2 each second day. 3x rollover is applied only for daily payments
    required ProtoDayOfWeek rolloverCommission3Days = 7 [default = MONDAY]; // Day of the week (in UTC) when Administrative Fee charge amount will be tripled. Applied only if rollover charge period = 0 or 1
    optional int64 utcLastUpdateTimestamp = 8; // UNIX timestamp in milliseconds when the Profile was last updated
}

// Holiday entity
message ProtoHoliday {
    required int64 holidayId = 1; // ID of Holiday
    required string name = 2; // Name of the Holiday
    optional string description = 3; // Description of the Holiday
    required string scheduleTimeZone = 4; // Timezone of the Holiday
    required int64 holidayDate = 5; // Holiday date. EpochMillis / 86400000 (ms * sec * min * hours)
    required bool isRecurring = 6; // If TRUE then Holiday's date considered as annual event at the same date, so year is not important anymore
    optional int32 startSecond = 7; // Amount of seconds from 00:00:00 of the Holiday day when Holiday actually starts
    optional int32 endSecond = 8; // Amount of seconds from 00:00:00 of the Holiday day when Holiday actually finished
}

// Holiday Profile - profile with set of Holidays
message ProtoHolidayProfile {
    required int64 holidayProfileId = 1; // ID of Holiday Profile
    required string name = 2; // Name of the Holiday Profile
    optional string description = 3; // Description of the Holiday Profile
    repeated int64 holidayId = 4 [packed = true]; // List of IDs of Holidays
    optional int64 utcLastUpdateTimestamp = 5; // UNIX timestamp in milliseconds when the Profile was last updated
}

// Swap and Dividends settings for symbol
message ProtoSwapAndDividendSymbol {
    required int64 symbolId = 1; // Symbol ID
    optional ProtoDayOfWeek swapRollover3Days = 2 [default = MONDAY]; // Day of the week when SWAP charge amount will be tripled. Doesn't impact Rollover Commission. If unspecified, default parameter from Symbol is used
    optional double swapLong = 3; // SWAP value for long Positions If unspecified, default parameter from Symbol is used
    optional double swapShort = 4; // SWAP value for short Positions If unspecified, default parameter from Symbol is used
    optional ProtoSwapCalculationType swapCalculationType = 5 [default = PIPS]; // Specifies type of SWAP computation as PIPS (0) or PERCENTAGE (1, annual, in percent). If unspecified, default parameter from Symbol is used Default: PIPS
    optional int64 dividendsLong = 6; // Amount of dividends for Long Positions. If unspecified, default parameter from Symbol is used
    optional int64 dividendsShort = 7; // Amount of dividends for Short positions. If unspecified, default parameter from Symbol is used
    optional int64 dividendTime = 8; // UNIX timestamp in milliseconds of charging dividends
    optional int32 swapTime = 9; // Time from which Swap Period is calculated, in minutes from 00:00. If unspecified, default parameter from Symbol is used
    optional int32 swapPeriod = 10; // SWAP is calculated every Swap Period (in hours). If unspecified, default parameter from Symbol is used
}

// Swap and Dividends Profile
message ProtoSwapAndDividendProfile {
    required int64 swapAndDividendProfileId = 1; // Profile ID
    required string name = 2; // Profile name
    optional string description = 3; // Profile description
    optional int64 utcLastUpdateTimestamp = 4; // UNIX timestamp in milliseconds of modification time
    repeated ProtoSwapAndDividendSymbol symbol = 5; // List of associated Symbols specific settings
}

// Swap and Dividends Profile (with limited number of fields)
message ProtoLightSwapAndDividendProfile {
    required int64 swapAndDividendProfileId = 1; // Profile ID
    required string name = 2; // Profile name
    optional string description = 3; // Profile description
}

// Futures settings
message ProtoFuturesSettings {
    required string datesTimeZone = 1; // Time zone for parameters lastTradeTimestampInMinutes and expirationTimestampInMinutes
    required uint32 lastTradeTimestampInMinutes = 2; // Amount of minutes passed since 01.01.1970 00:00 at specified datesTimeZone (for UTC+5 01:23 3rd July 2021 would be 27087923, so as for UTC+2) of the last Trade (Positions can not be opened after this time, trading mode will be CLOSE_ONLY). For example zone is UTC+2 and value is 27519286, then trigger will happen at 27519406 UTC+0 (120 minutes less)
    required uint32 expirationTimestampInMinutes = 3; // Amount of minutes passed since 01.01.1970 00:00 at specified datesTimeZone (for UTC+5 01:23 3rd July 2021 would be 27087923, so as for UTC+2) of the future expiration (trading will be disabled, Positions closed, Orders cancelled, trading mode will be FULLY_DISABLED). For example zone is UTC+2 and value is 27519286, then trigger will happen at 27519406 UTC+0 (120 minutes less)
}

// Introducing Broker default commissions per Symbol Category
message ProtoIbCommissionSymbolCategory {
    required int64 symbolCategoryId = 1; // ID of Symbol Category
    required int32 introducingBrokerCommissionRate = 2; // Commission rate of IB
    required int32 pocketCommissionRate = 3; // Commission rate which Broker will pay to IB for the Deal of the Trader
    required int32 pocketMarkupRate = 4; // Markup which Broker will pay to IB
    required ProtoCommissionType ibCommissionsType = 5; // Default Commission Type for IB
}

// Action on Manual Deal timeout ENUM
enum ProtoManualDealTimeoutAction {
    REJECT_RESET = 0;
    EXECUTE = 1;
}

// Bonus Provider type ENUM
enum ProtoBonusOwner {
    MANAGER = 0;
    IB = 1;
}

// Execution Policy ENUM
enum ProtoExecutionPolicy {
    BOOKA = 1;
    BOOKB = 2;
    BOOKA_WITH_CONDITION = 3;
}

// Trade Notification Profile (notification of big volume trades)
message ProtoTradeNotificationProfile {
    required int64 tradeNotificationProfileId = 1; // Profile ID
    required string name = 2; // Profile name
    optional string description = 3; // Profile description
    required ProtoBookRequestType bookType = 4; // Book type for which Profile is applied
    required bool notifyAtCbroker = 5; // If TRUE then notification is displayed in cBroker application
    required bool notifyAtEmail = 6; // If TRUE then Manager is notified by email
    required int64 usdVolumeCbroker = 7; // Volume threshold for notification in cBroker
    required int64 usdVolumeEmail = 8; // Volume threshold for notification by email
    optional int64 utcLastUpdateTimestamp = 9; // UNIX timestamp in milliseconds when the Profile was last updated
    repeated string emails = 10; // List of emails for email notification
}

// Trader entity (with limited number of fields)
message ProtoManagerLightTrader {
    required int64 traderId = 1; // ID of the Trader
    required int64 login = 2; // Login of the Trader
    required int64 groupId = 3; // Group ID of the Trader
    required int64 depositAssetId = 4; // ID of deposit Asset
    optional string name = 5; // Trader name
    optional string lastName = 6; // Trader last name
    required int64 registrationTimestamp = 7; // UNIX timestamp in milliseconds of Trader registration
    optional int64 subAccountOf = 8; // Determines parent Account of Account, if it is Subaccount. Used for Copy service
    optional string brokerName = 9; // Some whitelabel assigned to Trader by the Broker at the moment of Account creation
    optional string strategyProviderName = 10; // If the trader is a Subaccount, then this field contains Strategy Provider's name
    optional int64 strategyProviderId = 11; // If the trader is a Subaccount, then this field contains Strategy Provider's ID
}

// Trend bars period ENUM
enum ProtoTrendbarPeriod {
    M1 = 1;
    M2 = 2;
    M3 = 3;
    M4 = 4;
    M5 = 5;
    M10 = 6;
    M15 = 7;
    M30 = 8;
    H1 = 9;
    H4 = 10;
    H12 = 11;
    D1 = 12;
    W1 = 13;
    MN1 = 14;
}

// Enum for trend bar timeframe
enum ProtoTimeframe {
    M_1 = 1; // 1 minute
    M_2 = 2; // 2 minutes
    M_3 = 3; // 3 minutes
    M_4 = 4; // 4 minutes
    M_5 = 5; // 5 minutes
    M_6 = 6; // 6 minutes
    M_7 = 7; // 7 minutes
    M_8 = 8; // 8 minutes
    M_9 = 9; // 9 minutes
    M_10 = 10; // 10 minutes
    M_15 = 11; // 15 minutes
    M_20 = 12; // 20 minutes
    M_30 = 13; // 30 minutes
    M_45 = 14; // 45 minutes
    H_1 = 15; // 1 hour
    H_2 = 16; // 2  hours
    H_3 = 17; // 3 hours
    H_4 = 18; // 4 hours
    H_6 = 19; // 6 hours
    H_8 = 20; // 8 hours
    H_12 = 21; // 12 hours
    D_1 = 22; // 1 day
    D_2 = 23; // 2 days
    D_3 = 24; // 3 days
    W_1 = 25; // 1 week
    MN_1 = 26; // 1 month
}

// Message with trend bar to be inserted
message ProtoInsertTrendbar {
    required int64 timestamp = 1; // Timestamp of the trend bar
    required double open = 2; // Opening price
    required double high = 3; // Highest price
    required double low = 4; // Lowest price
    required double close = 5; // Closing price
    required uint32 volume = 6; // Volume in ticks
    required int32 trendbarId = 7; // Id of the trend bar, used to identify rejected trend bar in ProtoInsertTrendbarRes
}

// Message with the list of the invalid trend bars which were rejected during ProtoInsertTrendbarReq
message ProtoInsertTrendbarError {
    required int32 trendbarId = 1; // Id of the rejected trend bar
    required string errorDescription = 2; // Error description
}

// Enum for trend bar type
enum ProtoTrendbarType {
    REGULAR_OHLC = 0; // Regular trend bar
    HEIKIN_ASHI = 1; // Heikin-Ashi trend bar
}