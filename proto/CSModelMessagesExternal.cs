// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CSModelMessages_External.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from CSModelMessages_External.proto</summary>
public static partial class CSModelMessagesExternalReflection {

  #region Descriptor
  /// <summary>File descriptor for CSModelMessages_External.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CSModelMessagesExternalReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5DU01vZGVsTWVzc2FnZXNfRXh0ZXJuYWwucHJvdG8aIkNvbW1vbk1vZGVs",
          "TWVzc2FnZXNfRXh0ZXJuYWwucHJvdG8izwEKDVByb3RvVHJlbmRiYXISDgoG",
          "dm9sdW1lGAMgAigDEigKBnBlcmlvZBgEIAEoDjIULlByb3RvVHJlbmRiYXJQ",
          "ZXJpb2Q6Ak0xEgsKA2xvdxgFIAEoAxIRCglkZWx0YU9wZW4YBiABKAQSEgoK",
          "ZGVsdGFDbG9zZRgHIAEoBBIRCglkZWx0YUhpZ2gYCCABKAQSHQoVdXRjVGlt",
          "ZXN0YW1wSW5NaW51dGVzGAkgASgNEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3Rh",
          "bXAYCiABKAQiygIKDlByb3RvVHJhZGVEYXRhEhAKCHN5bWJvbElkGAEgAigD",
          "Eg4KBnZvbHVtZRgCIAIoAxIiCgl0cmFkZVNpZGUYAyACKA4yDy5Qcm90b1Ry",
          "YWRlU2lkZRIQCgh0cmFkZXJJZBgEIAEoAxIVCg1vcGVuVGltZXN0YW1wGAcg",
          "ASgDEhYKDmNsb3NlVGltZXN0YW1wGAggASgDEg0KBWxhYmVsGAwgASgJEg8K",
          "B2NvbW1lbnQYDSABKAkSDwoHY2hhbm5lbBgOIAEoCRIYChBtZWFzdXJlbWVu",
          "dFVuaXRzGA8gASgJEg8KB2xvdFNpemUYECABKAMSFQoNc3ByZWFkQmV0dGlu",
          "ZxgRIAEoCBINCgVzdGFrZRgSIAEoAxITCgtkZXNpcmVkVldBUBgTIAEoARIa",
          "ChJndWFyYW50ZWVkU3RvcExvc3MYFCABKAgi2QQKDVByb3RvUG9zaXRpb24S",
          "EgoKcG9zaXRpb25JZBgBIAIoAxIiCgl0cmFkZURhdGEYAyACKAsyDy5Qcm90",
          "b1RyYWRlRGF0YRIsCg5wb3NpdGlvblN0YXR1cxgEIAIoDjIULlByb3RvUG9z",
          "aXRpb25TdGF0dXMSDAoEc3dhcBgFIAIoAxINCgVwcmljZRgGIAEoARIQCghz",
          "dG9wTG9zcxgHIAEoARISCgp0YWtlUHJvZml0GAggASgBEh4KFnV0Y0xhc3RV",
          "cGRhdGVUaW1lc3RhbXAYCiABKAMSKAoIYm9va1R5cGUYCyABKA4yDi5Qcm90",
          "b0Jvb2tUeXBlOgZCT09LX0ESEgoKY29tbWlzc2lvbhgNIAEoAxISCgptYXJn",
          "aW5SYXRlGA4gASgBEiMKG2ludHJvZHVjaW5nQnJva2VyQ29tbWlzc2lvbhgQ",
          "IAEoAxIYChBwb2NrZXRDb21taXNzaW9uGBEgASgDEhQKDHBvY2tldE1hcmt1",
          "cBgSIAEoAxIbChNtaXJyb3JpbmdDb21taXNzaW9uGBQgASgDEhoKEmd1YXJh",
          "bnRlZWRTdG9wTG9zcxgVIAEoCBISCgp1c2VkTWFyZ2luGBcgASgEEhgKEHRy",
          "YWlsaW5nU3RvcExvc3MYGCABKAgSPgoVc3RvcExvc3NUcmlnZ2VyTWV0aG9k",
          "GBkgASgOMhguUHJvdG9PcmRlclRyaWdnZXJNZXRob2Q6BVRSQURFEhMKC21v",
          "bmV5RGlnaXRzGB4gASgNEhwKFHBubENvbnZlcnNpb25GZWVSYXRlGB8gASgF",
          "ItwICgpQcm90b09yZGVyEg8KB29yZGVySWQYASACKAMSIgoJdHJhZGVEYXRh",
          "GAIgAigLMg8uUHJvdG9UcmFkZURhdGESIgoJb3JkZXJUeXBlGAMgAigOMg8u",
          "UHJvdG9PcmRlclR5cGUSJgoLb3JkZXJTdGF0dXMYBCACKA4yES5Qcm90b09y",
          "ZGVyU3RhdHVzEhsKE2V4cGlyYXRpb25UaW1lc3RhbXAYBiABKAMSFgoOZXhl",
          "Y3V0aW9uUHJpY2UYCSABKAESFgoOZXhlY3V0ZWRWb2x1bWUYCiABKAMSEAoI",
          "c3RvcExvc3MYCyABKAESEgoKdGFrZVByb2ZpdBgMIAEoARIeChZ1dGNMYXN0",
          "VXBkYXRlVGltZXN0YW1wGA0gASgDEigKCGJvb2tUeXBlGA4gASgOMg4uUHJv",
          "dG9Cb29rVHlwZToGQk9PS19BEg4KBm1ldGhvZBgQIAEoCRIZChFiYXNlU2xp",
          "cHBhZ2VQcmljZRgSIAEoARIUCgxjbG9zaW5nT3JkZXIYFCABKAgSEgoKbGlt",
          "aXRQcmljZRgVIAEoARIRCglzdG9wUHJpY2UYFiABKAESFQoNY2xpZW50T3Jk",
          "ZXJJZBgXIAEoCRISCgpjb21taXNzaW9uGBggASgDEjsKC3RpbWVJbkZvcmNl",
          "GBogASgOMhEuUHJvdG9UaW1lSW5Gb3JjZToTSU1NRURJQVRFX09SX0NBTkNF",
          "TBISCgpwb3NpdGlvbklkGB4gASgDEhgKEHJlbGF0aXZlU3RvcExvc3MYICAB",
          "KAMSGgoScmVsYXRpdmVUYWtlUHJvZml0GCEgASgDEiMKG2ludHJvZHVjaW5n",
          "QnJva2VyQ29tbWlzc2lvbhgiIAEoAxIYChBwb2NrZXRDb21taXNzaW9uGCMg",
          "ASgDEhQKDHBvY2tldE1hcmt1cBgkIAEoAxIbChNtaXJyb3JpbmdDb21taXNz",
          "aW9uGCcgASgDEh0KFW9yaWdpbmFsQ2xpZW50T3JkZXJJZBgoIAEoCRIWCg5j",
          "aGVja1RvbGVyYW5jZRgpIAEoCBINCgVsb2dpbhgqIAEoAxIMCgRuYW1lGCsg",
          "ASgJEhAKCGxhc3ROYW1lGCwgASgJEhEKCWlzU3RvcE91dBgtIAEoCBIYChB0",
          "cmFpbGluZ1N0b3BMb3NzGC4gASgIEhQKDGNsb3NlV2l0aFBJRBgvIAEoAxI6",
          "ChFzdG9wVHJpZ2dlck1ldGhvZBgwIAEoDjIYLlByb3RvT3JkZXJUcmlnZ2Vy",
          "TWV0aG9kOgVUUkFERRI+ChVzdG9wTG9zc1RyaWdnZXJNZXRob2QYMSABKA4y",
          "GC5Qcm90b09yZGVyVHJpZ2dlck1ldGhvZDoFVFJBREUSGAoQc2xpcHBhZ2VJ",
          "blBvaW50cxgyIAEoBRIcChRkZXNpcmVkT3BlblRpbWVzdGFtcBgzIAEoAxIS",
          "CgpvY29PcmRlcklkGDQgASgDEhMKC21vbmV5RGlnaXRzGDYgASgNIoMGChhQ",
          "cm90b0Nsb3NlUG9zaXRpb25EZXRhaWwSEgoKZW50cnlQcmljZRgCIAIoARIO",
          "CgZwcm9maXQYByACKAMSDAoEc3dhcBgDIAIoAxISCgpjb21taXNzaW9uGAQg",
          "AigDEg8KB2JhbGFuY2UYCCACKAMSDwoHY29tbWVudBgLIAEoCRIQCghzdG9w",
          "TG9zcxgMIAEoARISCgp0YWtlUHJvZml0GA0gASgBEiQKHHF1b3RlVG9EZXBv",
          "c2l0Q29udmVyc2lvblJhdGUYDyABKAESFAoMY2xvc2VkVm9sdW1lGBAgASgD",
          "EhYKDmJhbGFuY2VWZXJzaW9uGBIgASgDEiMKG2ludHJvZHVjaW5nQnJva2Vy",
          "Q29tbWlzc2lvbhgTIAEoAxIYChBwb2NrZXRDb21taXNzaW9uGBQgASgDEhQK",
          "DHBvY2tldE1hcmt1cBgVIAEoAxIOCgZlcXVpdHkYFyABKAMSEQoJbmV0UHJv",
          "Zml0GBkgASgDEhsKE21pcnJvcmluZ0NvbW1pc3Npb24YGiABKAMSHgoWZGVw",
          "b3NpdFRvSWJEZXBvc2l0UmF0ZRgbIAEoARIRCgltaW5FcXVpdHkYHCABKAMS",
          "EQoJbWF4RXF1aXR5GB0gASgDEg4KBnJlYmF0ZRgeIAEoAxIYChBiYWxhbmNl",
          "SGlzdG9yeUlkGB8gASgDEg4KBm1hcmt1cBggIAEoAxIWCg5lcXVpdHlCYXNl",
          "ZFJvaRghIAEoARITCgtjbG9zZWRTdGFrZRgiIAEoBBIZChFpYkNvbW1pc3Np",
          "b25zUGFpZBgkIAEoCBIcChRub25XaXRoZHJhd2FibGVCb251cxglIAEoAxI+",
          "ChVzdG9wTG9zc1RyaWdnZXJNZXRob2QYJiABKA4yGC5Qcm90b09yZGVyVHJp",
          "Z2dlck1ldGhvZDoFVFJBREUSGwoTb2Zmc2V0RGVhbFRpbWVzdGFtcBgoIAEo",
          "AxITCgttb25leURpZ2l0cxgrIAEoDRIYChBwbmxDb252ZXJzaW9uRmVlGCwg",
          "ASgDIrEEChBQcm90b09yZGVyQWN0aW9uEhAKCGFjdGlvbklkGAEgAigDEiQK",
          "CmFjdGlvblR5cGUYAyACKA4yEC5Qcm90b0FjdGlvblR5cGUSKAoMYWN0aW9u",
          "U3RhdHVzGAQgAigOMhIuUHJvdG9BY3Rpb25TdGF0dXMSGwoTZXhwaXJhdGlv",
          "blRpbWVzdGFtcBgFIAEoAxIOCgZ2b2x1bWUYBiABKAMSDQoFcHJpY2UYByAB",
          "KAMSEAoIc3RvcExvc3MYCCABKAMSEgoKdGFrZVByb2ZpdBgJIAEoAxIRCglz",
          "ZXNzaW9uSWQYCiABKAkSFwoPY2xpZW50UmVxdWVzdElkGAsgASgJEg0KBWxh",
          "YmVsGAwgASgJEg8KB2NvbW1lbnQYDSABKAkSDwoHY2hhbm5lbBgOIAEoCRIY",
          "ChBleGVjdXRlVGltZXN0YW1wGBEgASgDEhgKEHJlbGF0aXZlU3RvcExvc3MY",
          "EiABKAMSGgoScmVsYXRpdmVUYWtlUHJvZml0GBMgASgDEjoKEXN0b3BUcmln",
          "Z2VyTWV0aG9kGBQgASgOMhguUHJvdG9PcmRlclRyaWdnZXJNZXRob2Q6BVRS",
          "QURFEj4KFXN0b3BMb3NzVHJpZ2dlck1ldGhvZBgVIAEoDjIYLlByb3RvT3Jk",
          "ZXJUcmlnZ2VyTWV0aG9kOgVUUkFERRIcChRkZXNpcmVkT3BlblRpbWVzdGFt",
          "cBgWIAEoAxISCgpvY29PcmRlcklkGBcgASgDIv4CChRQcm90b0RlcG9zaXRX",
          "aXRoZHJhdxIuCg1vcGVyYXRpb25UeXBlGAEgAigOMhcuUHJvdG9DaGFuZ2VC",
          "YWxhbmNlVHlwZRIYChBiYWxhbmNlSGlzdG9yeUlkGAIgAigDEhAKCHRyYWRl",
          "cklkGAMgAigDEg8KB2JhbGFuY2UYBCACKAMSDQoFZGVsdGEYBSACKAMSHgoW",
          "Y2hhbmdlQmFsYW5jZVRpbWVzdGFtcBgGIAIoAxIPCgdjb21tZW50GAcgASgJ",
          "EhQKDGV4dGVybmFsTm90ZRgIIAEoCRIWCg5iYWxhbmNlVmVyc2lvbhgJIAEo",
          "AxIOCgZlcXVpdHkYCiABKAMSEQoJbWluRXF1aXR5GAsgASgDEhEKCW1heEVx",
          "dWl0eRgMIAEoAxIcChRub25XaXRoZHJhd2FibGVCb251cxgNIAEoAxIOCgZz",
          "b3VyY2UYDiABKAkSEgoKZXh0ZXJuYWxJZBgPIAEoCRITCgttb25leURpZ2l0",
          "cxgQIAEoDSK4AgoZUHJvdG9Cb251c0RlcG9zaXRXaXRoZHJhdxIsCg1vcGVy",
          "YXRpb25UeXBlGAEgAigOMhUuUHJvdG9DaGFuZ2VCb251c1R5cGUSFgoOYm9u",
          "dXNIaXN0b3J5SWQYAiACKAMSEAoIdHJhZGVySWQYAyACKAMSFAoMbWFuYWdl",
          "ckJvbnVzGAQgAigDEhQKDG1hbmFnZXJEZWx0YRgFIAIoAxIPCgdpYkJvbnVz",
          "GAYgAigDEg8KB2liRGVsdGEYByACKAMSHAoUY2hhbmdlQm9udXNUaW1lc3Rh",
          "bXAYCCACKAMSDwoHY29tbWVudBgKIAEoCRIUCgxleHRlcm5hbE5vdGUYCyAB",
          "KAkSGwoTaW50cm9kdWNpbmdCcm9rZXJJZBgMIAEoAxITCgttb25leURpZ2l0",
          "cxgNIAEoDSLKDwoLUHJvdG9UcmFkZXISEAoIdHJhZGVySWQYASACKAMSDQoF",
          "bG9naW4YAiACKAMSDwoHZ3JvdXBJZBgDIAIoAxIPCgdiYWxhbmNlGAggAigD",
          "Ei4KC2FjY291bnRUeXBlGAkgASgOMhEuUHJvdG9BY2NvdW50VHlwZToGSEVE",
          "R0VEEgwKBG5hbWUYCiABKAkSFAoMcGFzc3dvcmRIYXNoGAsgASgJEhMKC2Rl",
          "c2NyaXB0aW9uGAwgASgJEg4KBnN0YXR1cxgNIAEoCRIRCgljb3VudHJ5SWQY",
          "DiABKAMSDQoFc3RhdGUYDyABKAkSDAoEY2l0eRgQIAEoCRIPCgdhZGRyZXNz",
          "GBEgASgJEg8KB3ppcENvZGUYEiABKAkSDQoFcGhvbmUYEyABKAkSFQoNcGhv",
          "bmVQYXNzd29yZBgUIAEoCRINCgVlbWFpbBgVIAEoCRISCgpkb2N1bWVudElk",
          "GBYgASgJEh0KFXJlZ2lzdHJhdGlvblRpbWVzdGFtcBgZIAEoAxIcChRsYXN0",
          "Q29ubmVjdFRpbWVzdGFtcBgaIAEoAxIOCgZvbmxpbmUYGyABKAgSHgoWdXRj",
          "TGFzdFVwZGF0ZVRpbWVzdGFtcBgcIAEoAxIPCgdkZWxldGVkGB0gASgIEhYK",
          "DmJhbGFuY2VWZXJzaW9uGB4gASgDEhkKEWludHJvZHVjaW5nQnJva2VyGCAg",
          "ASgIEi4KH3BhcmVudEludHJvZHVjaW5nQnJva2VySWRJc051bGwYNyABKAg6",
          "BWZhbHNlEiEKGXBhcmVudEludHJvZHVjaW5nQnJva2VySWQYISABKAMSJwof",
          "aW50cm9kdWNpbmdCcm9rZXJDb21taXNzaW9uUmF0ZRgiIAEoBRIcChRwb2Nr",
          "ZXRDb21taXNzaW9uUmF0ZRgjIAEoBRIYChBwb2NrZXRNYXJrdXBSYXRlGCQg",
          "ASgFEi4KJmRlZmF1bHRJbnRyb2R1Y2luZ0Jyb2tlckNvbW1pc3Npb25SYXRl",
          "GCUgASgFEiMKG2RlZmF1bHRQb2NrZXRDb21taXNzaW9uUmF0ZRgmIAEoBRIf",
          "ChdkZWZhdWx0UG9ja2V0TWFya3VwUmF0ZRgnIAEoBRIZChFkZWZhdWx0UmVi",
          "YXRlUmF0ZRgrIAEoBRI2ChhkZWZhdWx0SWJDb21taXNzaW9uc1R5cGUYLCAB",
          "KA4yFC5Qcm90b0NvbW1pc3Npb25UeXBlEi8KEWliQ29tbWlzc2lvbnNUeXBl",
          "GC0gASgOMhQuUHJvdG9Db21taXNzaW9uVHlwZRIUCgxtYW5hZ2VyQm9udXMY",
          "LyABKAMSDwoHaWJCb251cxgwIAEoAxIYChBzaG93UGVyc29uYWxEYXRhGDEg",
          "ASgIEhQKDHNwbGl0UmV2ZW51ZRgyIAEoCBIbCgxyYW5rSWRJc051bGwYMyAB",
          "KAg6BWZhbHNlEg4KBnJhbmtJZBg0IAEoBRIWCgdoYXNSYW5rGDUgASgIOgVm",
          "YWxzZRIeCgRyYW5rGDYgAygLMhAuUHJvdG9UcmFkZXJSYW5rEhAKCGxhc3RO",
          "YW1lGDggASgJEhsKE2RlZmF1bHRTcGxpdFJldmVudWUYOSABKAgSNQoMYWNj",
          "ZXNzUmlnaHRzGDsgASgOMhIuUHJvdG9BY2Nlc3NSaWdodHM6C0ZVTExfQUND",
          "RVNTEhgKEHNlbmRPd25TdGF0ZW1lbnQYPCABKAgSFgoOZGVwb3NpdEFzc2V0",
          "SWQYPSABKAMSEAoIc3dhcEZyZWUYQCABKAgSHAoUbm9uV2l0aGRyYXdhYmxl",
          "Qm9udXMYQSABKAMSFwoPbGV2ZXJhZ2VJbkNlbnRzGEIgASgNEhUKDW1vdmVU",
          "b0lCR3JvdXAYQyABKAgSRAoadG90YWxNYXJnaW5DYWxjdWxhdGlvblR5cGUY",
          "RCABKA4yIC5Qcm90b1RvdGFsTWFyZ2luQ2FsY3VsYXRpb25UeXBlEhIKCmJy",
          "b2tlck5hbWUYRSABKAkSEwoLbWF4TGV2ZXJhZ2UYRiABKA0SEgoKZnJlZVRy",
          "YWRlcxhHIAEoCBIPCgd2ZXJzaW9uGEogASgDEhQKDHN1YkFjY291bnRPZhhL",
          "IAEoAxIOCgZtYXhOT1AYTCABKA0SHAoUZGlzYWJsZVBhc3N3b3JkTG9naW4Y",
          "TSABKAgSFQoNaXNMaW1pdGVkUmlzaxhOIAEoCBJvCiRsaW1pdGVkUmlza01h",
          "cmdpbkNhbGN1bGF0aW9uU3RyYXRlZ3kYTyABKA4yKi5Qcm90b0xpbWl0ZWRS",
          "aXNrTWFyZ2luQ2FsY3VsYXRpb25TdHJhdGVneToVQUNDT1JESU5HX1RPX0xF",
          "VkVSQUdFEhMKC21vbmV5RGlnaXRzGFAgASgNEhUKDW1hbmFnZW1lbnRGZWUY",
          "USABKAMSHQoVc2VuZFN0YXRlbWVudFRvQnJva2VyGFIgASgIEksKIWRlZmF1",
          "bHRJYkNvbW1pc3Npb25TeW1ib2xDYXRlZ29yeRhTIAMoCzIgLlByb3RvSWJD",
          "b21taXNzaW9uU3ltYm9sQ2F0ZWdvcnkSRAoaaWJDb21taXNzaW9uU3ltYm9s",
          "Q2F0ZWdvcnkYVCADKAsyIC5Qcm90b0liQ29tbWlzc2lvblN5bWJvbENhdGVn",
          "b3J5EhMKC2ZhaXJTdG9wT3V0GFUgASgIInEKD1Byb3RvVHJhZGVyUmFuaxIK",
          "CgJpZBgBIAIoBRIMCgRuYW1lGAIgAigJEg4KBnZvbHVtZRgDIAIoAxIaChJw",
          "YXJlbnRJYlBlcmNlbnRhZ2UYBCACKAUSGAoQYnJva2VyUGVyY2VudGFnZRgF",
          "IAIoBSJnChxQcm90b01pbmltdW1TcHJlYWRDb25zdHJhaW50Eg8KB2VuYWJs",
          "ZWQYASACKAgSFwoPdGhyZXNob2xkRGlnaXRzGAIgAigNEh0KBGJpYXMYAyAC",
          "KA4yDy5Qcm90b1F1b3RlVHlwZSKICgoSUHJvdG9NYW5hZ2VyU3ltYm9sEhAK",
          "CHN5bWJvbElkGAEgAigDEgwKBG5hbWUYAiACKAkSDgoGZGlnaXRzGAQgAigF",
          "EhMKC3BpcFBvc2l0aW9uGAUgAigFEhEKCWxwRW5hYmxlZBgHIAEoCBIPCgdl",
          "bmFibGVkGAggASgIEhEKCWJpZE1hcmtVcBgMIAEoBRIRCglhc2tNYXJrVXAY",
          "DSABKAUSEwoLZGVzY3JpcHRpb24YDyABKAkSHgoWdXRjTGFzdFVwZGF0ZVRp",
          "bWVzdGFtcBgQIAEoAxIVCg1zb3J0aW5nTnVtYmVyGBcgASgBEhgKEG1lYXN1",
          "cmVtZW50VW5pdHMYGCABKAkSHgoWcXVvdGVFeHBpcmF0aW9uVGltZW91dBgb",
          "IAEoBRI+ChdtaW5pbXVtU3ByZWFkQ29uc3RyYWludBgeIAEoCzIdLlByb3Rv",
          "TWluaW11bVNwcmVhZENvbnN0cmFpbnQSDwoHbG90U2l6ZRggIAEoAxIaChJl",
          "bmFibGVTaG9ydFNlbGxpbmcYISABKAgSGAoQc3ltYm9sQ2F0ZWdvcnlJZBgj",
          "IAEoAxIQCghmYXZvcml0ZRglIAEoCBIMCgR0YWdzGDEgASgJEhMKC2Jhc2VB",
          "c3NldElkGDUgASgDEhQKDHF1b3RlQXNzZXRJZBg2IAEoAxImCgt0cmFkaW5n",
          "TW9kZRg6IAEoDjIRLlByb3RvVHJhZGluZ01vZGUSOQoYZGVmYXVsdFN3YXBS",
          "b2xsb3ZlcjNEYXlzGAkgASgOMg8uUHJvdG9EYXlPZldlZWs6Bk1PTkRBWRIX",
          "Cg9kZWZhdWx0U3dhcExvbmcYCiABKAESGAoQZGVmYXVsdFN3YXBTaG9ydBgL",
          "IAEoARIZChFkZWZhdWx0TGV2ZXJhZ2VJZBg4IAEoAxIcChRwcmljZUxpcXVp",
          "ZGl0eUZlZWRJZBg7IAEoDRIcChR0cmFkZUxpcXVpZGl0eUZlZWRJZBg8IAEo",
          "DRIbChNkZWZhdWx0RGl2aWRlbmRUaW1lGD0gASgDEicKC3RyYW5zbGF0aW9u",
          "GD4gAygLMhIuUHJvdG9Mb2NhbGl6YXRpb24SGQoRc2NoZWR1bGVQcm9maWxl",
          "SWQYQiABKAMSIgoaZGVmYXVsdENvbW1pc3Npb25Qcm9maWxlSWQYQyABKAMS",
          "HgoWZGVmYXVsdFZvbHVtZVByb2ZpbGVJZBhEIAEoAxIhChlkZWZhdWx0RXhl",
          "Y3V0aW9uUHJvZmlsZUlkGEUgASgDEhkKEWF1dG9jaGFydGlzdEFsaWFzGEYg",
          "ASgJEhsKE3RyYWRpbmdDZW50cmFsQWxpYXMYRyABKAkSIgoaZGVmYXVsdFBy",
          "b3RlY3Rpb25Qcm9maWxlSWQYSCABKAMSIAoYZGVmYXVsdFN3YXBGcmVlUHJv",
          "ZmlsZUlkGEkgASgDEhwKFGRlZmF1bHRHU0xTY2hlZHVsZUlkGEogASgDEhgK",
          "EGhvbGlkYXlQcm9maWxlSWQYSyABKAMSEQoJYmJzcEFsaWFzGEwgASgJEi4K",
          "D2Z1dHVyZXNTZXR0aW5ncxhNIAEoCzIVLlByb3RvRnV0dXJlc1NldHRpbmdz",
          "EikKIWRlZmF1bHRUcmFkZU5vdGlmaWNhdGlvblByb2ZpbGVJZBhOIAEoAxIX",
          "Cg9kZWZhdWx0U3dhcFRpbWUYTyACKAUSGQoRZGVmYXVsdFN3YXBQZXJpb2QY",
          "UCACKAUi6AEKE1Byb3RvQXJjaGl2ZWRTeW1ib2wSEAoIc3ltYm9sSWQYASAC",
          "KAMSDAoEbmFtZRgCIAIoCRIeChZ1dGNMYXN0VXBkYXRlVGltZXN0YW1wGAMg",
          "AigDEhMKC2Rlc2NyaXB0aW9uGAQgASgJEg4KBmRpZ2l0cxgFIAIoBRITCgtw",
          "aXBQb3NpdGlvbhgGIAIoBRIPCgdsb3RTaXplGAcgAigDEhgKEG1lYXN1cmVt",
          "ZW50VW5pdHMYCCABKAkSEwoLYmFzZUFzc2V0SWQYCSACKAMSFwoPdW5pZmll",
          "ZFN5bWJvbElkGAogASgFIjIKEVByb3RvTG9jYWxpemF0aW9uEg4KBmxvY2Fs",
          "ZRgBIAIoCRINCgV0aXRsZRgCIAIoCSKcBwoKUHJvdG9Hcm91cBIPCgdncm91",
          "cElkGAEgAigDEgwKBG5hbWUYAiABKAkSDwoHZW5hYmxlZBgDIAEoCBITCgtz",
          "d2FwRW5hYmxlZBgEIAEoCBIgChhzd2FwQW5kRGl2aWRlbmRQcm9maWxlSWQY",
          "BSABKAMSFQoNbWFyZ2luU3RvcG91dBgJIAEoARITCgtkZXNjcmlwdGlvbhgL",
          "IAEoCRIeChZ1dGNMYXN0VXBkYXRlVGltZXN0YW1wGAwgASgDEhUKDXByaWNl",
          "U3RyZWFtSWQYDSABKAMSDwoHZGVsZXRlZBgOIAEoCBIYCgloYXNBY2Nlc3MY",
          "DyABKAg6BWZhbHNlEiEKBnN5bWJvbBgRIAMoCzIRLlByb3RvR3JvdXBTeW1i",
          "b2wSMgoRZHluYW1pY0NvbW1pc3Npb24YEiADKAsyFy5Qcm90b0R5bmFtaWND",
          "b21taXNzaW9uEhsKE2JvbnVzQ29udmVyc2lvblJhdGUYEyABKAMSGAoQYm9u",
          "dXNDb252ZXJ0TG90cxgUIAEoCBIfChdib251c0NvbnZlcnNpb25SYXRlTG90",
          "cxgVIAEoAxIVCg1pc0RlYWxpbmdEZXNrGBcgASgIEiUKHW1heEF1dG9FeGVj",
          "dXRpb25TaXplUHJvZmlsZUlkGBggASgDEhcKD2Jsb2NrZWRDaGFubmVscxgZ",
          "IAEoCRITCgtmYWlyU3RvcE91dBgaIAEoCBIQCghyZWdpb25JZBgbIAEoAxIb",
          "Cgxjb3B5RGlzYWJsZWQYHCABKAg6BWZhbHNlEh4KD3N0b3BvdXREaXNhYmxl",
          "ZBgdIAEoCDoFZmFsc2USHQoVaW5hY3Rpdml0eUdyYWNlUGVyaW9kGB4gASgF",
          "Eh4KFmluYWN0aXZpdHlDaGFyZ2VQZXJpb2QYHyABKAUSGwoTaW5hY3Rpdml0",
          "eUZlZUFtb3VudBggIAEoBRIkChVjb3B5UHJvdmlkaW5nRGlzYWJsZWQYISAB",
          "KAg6BWZhbHNlEhUKDWxlZ2FsRW50aXR5SWQYIyABKAMSHAoUZGlzYWJsZVBh",
          "c3N3b3JkTG9naW4YJCABKAgSGwoNYWxsb3dXb3JzZUdTTBglIAEoCDoEdHJ1",
          "ZRIbChNpc0Zha2VTcHJlYWRCZXR0aW5nGCYgASgIEiEKGW5lZ2F0aXZlQmFs",
          "YW5jZVByb3RlY3Rpb24YJyABKAgSGwoTYWxsb3dUcmFkZXJDaGFuZ2VTTxgo",
          "IAEoCCKOAgoQUHJvdG9Hcm91cFN5bWJvbBIQCghzeW1ib2xJZBgBIAIoAxIP",
          "CgdlbmFibGVkGAIgAigIEhIKCmxldmVyYWdlSWQYICABKAQSFQoNZ3NsU2No",
          "ZWR1bGVJZBgjIAEoBBIbChNjb21taXNzaW9uUHJvZmlsZUlkGCogASgDEhcK",
          "D3ZvbHVtZVByb2ZpbGVJZBgrIAEoAxIaChJleGVjdXRpb25Qcm9maWxlSWQY",
          "LCABKAMSGwoTcHJvdGVjdGlvblByb2ZpbGVJZBgtIAEoAxIZChFzd2FwRnJl",
          "ZVByb2ZpbGVJZBguIAEoAxIiChp0cmFkZU5vdGlmaWNhdGlvblByb2ZpbGVJ",
          "ZBgvIAEoAyKXAwoPUHJvdG9MaWdodEdyb3VwEg8KB2dyb3VwSWQYASACKAMS",
          "DAoEbmFtZRgCIAEoCRIPCgdlbmFibGVkGAMgAigIEhMKC3N3YXBFbmFibGVk",
          "GAQgASgIEhUKDW1hcmdpblN0b3BvdXQYCSABKAESEwoLZGVzY3JpcHRpb24Y",
          "CyABKAkSFQoNcHJpY2VTdHJlYW1JZBgNIAEoAxIPCgdkZWxldGVkGA4gASgI",
          "EhgKCWhhc0FjY2VzcxgPIAEoCDoFZmFsc2USFQoNaXNEZWFsaW5nRGVzaxgX",
          "IAEoCBIlCh1tYXhBdXRvRXhlY3V0aW9uU2l6ZVByb2ZpbGVJZBgYIAEoAxIQ",
          "CghyZWdpb25JZBgZIAEoAxIbCgxjb3B5RGlzYWJsZWQYGiABKAg6BWZhbHNl",
          "EiQKFWNvcHlQcm92aWRpbmdEaXNhYmxlZBgbIAEoCDoFZmFsc2USGwoTaXNG",
          "YWtlU3ByZWFkQmV0dGluZxgcIAEoCBIhChluZWdhdGl2ZUJhbGFuY2VQcm90",
          "ZWN0aW9uGB0gASgIIkEKFlByb3RvRHluYW1pY0NvbW1pc3Npb24SFQoNbW9u",
          "dGhseVZvbHVtZRgCIAIoAxIQCghkaXNjb3VudBgDIAIoAyJJChJQcm90b1Nl",
          "cnZlclNldHRpbmcSJAoDa2V5GAEgAigOMhcuUHJvdG9TZXJ2ZXJTZXR0aW5n",
          "VHlwZRINCgV2YWx1ZRgCIAEoCSLuAgoMUHJvdG9NYW5hZ2VyEhEKCW1hbmFn",
          "ZXJJZBgBIAIoAxINCgVsb2dpbhgCIAIoAxIPCgdlbmFibGVkGAMgAigIEhEK",
          "BWdyb3VwGAQgAygDQgIQARINCgVlbWFpbBgFIAIoCRIMCgRuYW1lGAYgAigJ",
          "EhQKDHBhc3N3b3JkSGFzaBgHIAEoCRIeChZ1dGNMYXN0VXBkYXRlVGltZXN0",
          "YW1wGAggASgDEisKCnBlcm1pc3Npb24YCSADKA4yFy5Qcm90b01hbmFnZXJQ",
          "ZXJtaXNzaW9uEg8KB2RlbGV0ZWQYCyABKAgSFAoIcmVnaW9uSWQYDCADKANC",
          "AhABEhMKB21hbmFnZXIYDSADKANCAhABEhsKD3NwZWNpZmljR3JvdXBJZBgO",
          "IAMoA0ICEAESEQoJZ3JvdXBNYXNrGA8gASgJEhoKEmRpc2FibGVkQnJva2Vy",
          "TmFtZRgQIAMoCRIQCgh0ZW1wbGF0ZRgRIAEoCCJGCgxQcm90b0NvdW50cnkS",
          "EQoJY291bnRyeUlkGAEgAigDEgwKBG5hbWUYAiACKAkSFQoNY291bnRyeUEy",
          "Q29kZRgDIAEoCSKwAQoZUHJvdG9FeHBvc3VyZVN5bWJvbFJlY29yZBIQCghz",
          "eW1ib2xJZBgBIAIoAxIgCghib29rVHlwZRgCIAIoDjIOLlByb3RvQm9va1R5",
          "cGUSFQoNcG9zaXRpb25Db3VudBgDIAIoBRIRCglidXlWb2x1bWUYBCACKAMS",
          "EgoKc2VsbFZvbHVtZRgFIAIoAxIPCgdidXlWd2FwGAYgAigBEhAKCHNlbGxW",
          "d2FwGAcgAigBItUBCgpQcm90b0Fzc2V0Eg8KB2Fzc2V0SWQYASACKAMSDAoE",
          "bmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAIoCRIdCgR0eXBlGAQgAigO",
          "Mg8uUHJvdG9Bc3NldFR5cGUSFAoMZGVwb3NpdEFzc2V0GAUgAigIEhMKC2Rl",
          "cG9zaXRhYmxlGAYgAigIEhMKC2Rpc3BsYXlOYW1lGAcgASgJEg0KBW1ham9y",
          "GAggASgIEg4KBmRpZ2l0cxgJIAEoBRIVCg1jYWxlbmRhckFsaWFzGAogASgJ",
          "IrEBChBQcm90b1ByaWNlU3RyZWFtEhUKDXByaWNlU3RyZWFtSWQYASACKAMS",
          "DAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIPCgdkZWxldGVk",
          "GAQgASgIEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAYBSABKAMSMgoRcHJp",
          "Y2VTdHJlYW1TeW1ib2wYBiADKAsyFy5Qcm90b1ByaWNlU3RyZWFtU3ltYm9s",
          "ImoKFlByb3RvUHJpY2VTdHJlYW1TeW1ib2wSEAoIc3ltYm9sSWQYASACKAMS",
          "EQoJYmlkTWFya3VwGAIgAigFEhEKCWFza01hcmt1cBgDIAIoBRIYChBtYXJr",
          "dXBJc1JlbGF0aXZlGAQgASgIInEKDVByb3RvSW50ZXJ2YWwSEwoLc3RhcnRT",
          "ZWNvbmQYAyACKA0SEQoJZW5kU2Vjb25kGAQgAigNEhwKFGlzR2xvYmFsU2Vz",
          "c2lvblN0YXJ0GAUgASgIEhoKEmlzR2xvYmFsU2Vzc2lvbkVuZBgGIAEoCCL7",
          "AQoYUHJvdG9MaXF1aWRpdHlGZWVkU3ltYm9sEhAKCHN5bWJvbElkGAEgAigF",
          "EhIKCnByaWNlQWxpYXMYAiABKAkSEgoKdHJhZGVBbGlhcxgDIAEoCRIdChVs",
          "aXF1aWRpdHlGZWVkU3ltYm9sSWQYBCACKAMSFwoPbGlxdWlkaXR5RmVlZElk",
          "GAUgAigDEhIKCnNlbmRJbkxvdHMYBiACKAgSHQoVZGVhbEV4cGlyYXRpb25U",
          "aW1lb3V0GAcgAigDEhYKDm5vUXVvdGVUaW1lb3V0GAggAigDEhEKCWxwTG90",
          "U2l6ZRgJIAEoAxIPCgdwcm9kdWN0GAogASgFIpgCCh1Qcm90b0xpcXVpZGl0",
          "eUZlZWRGSVhTZXR0aW5ncxINCgVsb2dpbhgBIAEoCRISCgpzb2NrZXRIb3N0",
          "GAIgASgJEhIKCnNvY2tldFBvcnQYAyABKAUSFAoMc2VuZGVyQ29tcElkGAQg",
          "ASgJEhQKDHRhcmdldENvbXBJZBgFIAEoCRIQCgh0aW1lem9uZRgGIAEoCRIo",
          "Cg9zZXNzaW9uU3RhcnREYXkYByABKA4yDy5Qcm90b0RheU9mV2VlaxIYChBz",
          "ZXNzaW9uU3RhcnRUaW1lGAggASgJEiYKDXNlc3Npb25FbmREYXkYCSABKA4y",
          "Dy5Qcm90b0RheU9mV2VlaxIWCg5zZXNzaW9uRW5kVGltZRgKIAEoCSLvAQoS",
          "UHJvdG9MaXF1aWRpdHlGZWVkEhcKD2xpcXVpZGl0eUZlZWRJZBgBIAIoAxIM",
          "CgR0eXBlGAIgAigJEgwKBG5hbWUYAyACKAkSGwoTY29uZmlndXJhdGlvblN1",
          "ZmZpeBgKIAEoCRIPCgdlbmFibGVkGAwgASgIEjoKEnByaWNpbmdGSVhTZXR0",
          "aW5ncxgOIAEoCzIeLlByb3RvTGlxdWlkaXR5RmVlZEZJWFNldHRpbmdzEjoK",
          "EnRyYWRpbmdGSVhTZXR0aW5ncxgPIAEoCzIeLlByb3RvTGlxdWlkaXR5RmVl",
          "ZEZJWFNldHRpbmdzIrgJCglQcm90b0RlYWwSDgoGZGVhbElkGAEgAigDEg8K",
          "B29yZGVySWQYAiACKAMSEgoKcG9zaXRpb25JZBgDIAIoAxIQCgh0cmFkZXJJ",
          "ZBgEIAIoAxIOCgZ2b2x1bWUYBSACKAMSFAoMZmlsbGVkVm9sdW1lGAYgAigD",
          "EhAKCHN5bWJvbElkGAcgAigDEhcKD2NyZWF0ZVRpbWVzdGFtcBgIIAIoAxIa",
          "ChJleGVjdXRpb25UaW1lc3RhbXAYCSACKAMSHgoWdXRjTGFzdFVwZGF0ZVRp",
          "bWVzdGFtcBgKIAIoAxIWCg5leGVjdXRpb25QcmljZRgLIAEoARISCgpsaW1p",
          "dFByaWNlGAwgASgBEiIKCXRyYWRlU2lkZRgNIAIoDjIPLlByb3RvVHJhZGVT",
          "aWRlEiQKCmRlYWxTdGF0dXMYDiACKA4yEC5Qcm90b0RlYWxTdGF0dXMSIAoI",
          "ZGVhbFR5cGUYDyACKA4yDi5Qcm90b0RlYWxUeXBlEhIKCm1hcmdpblJhdGUY",
          "ECABKAESEgoKY29tbWlzc2lvbhgRIAEoAxIXCg9jbGllbnRSZXF1ZXN0SWQY",
          "EiABKAkSKAoIYm9va1R5cGUYEyABKA4yDi5Qcm90b0Jvb2tUeXBlOgZCT09L",
          "X0ESGAoQbHBFeGVjdXRpb25QcmljZRgUIAEoARIRCglscE9yZGVySWQYFSAB",
          "KAkSDQoFbGFiZWwYFiABKAkSDwoHY2hhbm5lbBgXIAEoCRIPCgdjb21tZW50",
          "GBggASgJEhcKD3ByaWNlU25hcHNob3RJZBgZIAEoAxIfChdiYXNlVG9Vc2RD",
          "b252ZXJzaW9uUmF0ZRgaIAEoARIOCgZmZWVkSWQYHyABKAMSNgoTY2xvc2VQ",
          "b3NpdGlvbkRldGFpbBggIAEoCzIZLlByb3RvQ2xvc2VQb3NpdGlvbkRldGFp",
          "bBIVCg1zZXJ2ZXJPcmRlcklkGCEgASgJEiMKG2ludHJvZHVjaW5nQnJva2Vy",
          "Q29tbWlzc2lvbhgjIAEoAxIYChBwb2NrZXRDb21taXNzaW9uGCQgASgDEhQK",
          "DHBvY2tldE1hcmt1cBglIAEoAxIcChRpbnRyb2R1Y2VkQnlCcm9rZXJJZBgn",
          "IAEoAxIbChNtaXJyb3JpbmdDb21taXNzaW9uGCggASgDEhgKEG1lYXN1cmVt",
          "ZW50VW5pdHMYKSABKAkSDwoHbG90U2l6ZRgqIAEoAxIOCgZtYXJrdXAYKyAB",
          "KAMSGQoRaW5uZXJNaXJyb3JpbmdGZWUYLCABKAgSGAoQdG90YWxWb2x1bWVJ",
          "blVzZBgtIAEoAxIVCg1zcHJlYWRCZXR0aW5nGC4gASgIEg0KBXN0YWtlGC8g",
          "ASgDEhMKC2Rlc2lyZWRWV0FQGDAgASgBEhIKCm1hcmtldFZXQVAYMSABKAES",
          "EQoJdG9sZXJhbmNlGDIgASgFEhQKDHJlamVjdFJlYXNvbhgzIAEoCRIOCgZt",
          "YW51YWwYNCABKAgSFwoPZmlsbGVkRXVyVm9sdW1lGDcgASgDEhcKD2ZpbGxl",
          "ZEdicFZvbHVtZRg4IAEoAxIOCgZlcXVpdHkYOSABKAMSEwoLbW9uZXlEaWdp",
          "dHMYOiABKA0isAUKFVByb3RvTGlnaHRDbG9zaW5nRGVhbBIOCgZkZWFsSWQY",
          "ASACKAMSDwoHb3JkZXJJZBgCIAIoAxISCgpwb3NpdGlvbklkGAMgAigDEg4K",
          "BnZvbHVtZRgEIAIoAxIUCgxmaWxsZWRWb2x1bWUYBSACKAMSEAoIc3ltYm9s",
          "SWQYBiACKAMSFwoPY3JlYXRlVGltZXN0YW1wGAcgAigDEhoKEmV4ZWN1dGlv",
          "blRpbWVzdGFtcBgIIAIoAxIWCg5leGVjdXRpb25QcmljZRgJIAEoARIiCgl0",
          "cmFkZVNpZGUYCiACKA4yDy5Qcm90b1RyYWRlU2lkZRIkCgpkZWFsU3RhdHVz",
          "GAsgAigOMhAuUHJvdG9EZWFsU3RhdHVzEiAKCGRlYWxUeXBlGAwgAigOMg4u",
          "UHJvdG9EZWFsVHlwZRISCgpjb21taXNzaW9uGA0gASgDEg0KBWxhYmVsGA4g",
          "ASgJEg8KB2NoYW5uZWwYDyABKAkSDwoHY29tbWVudBgQIAEoCRIXCg9wcmlj",
          "ZVNuYXBzaG90SWQYESABKAMSHwoXYmFzZVRvVXNkQ29udmVyc2lvblJhdGUY",
          "EiABKAESOwoTY2xvc2VQb3NpdGlvbkRldGFpbBgTIAEoCzIeLlByb3RvTGln",
          "aHRDbG9zZVBvc2l0aW9uRGV0YWlsEiMKG2ludHJvZHVjaW5nQnJva2VyQ29t",
          "bWlzc2lvbhgUIAEoAxIbChNtaXJyb3JpbmdDb21taXNzaW9uGBUgASgDEg8K",
          "B2xvdFNpemUYFiABKAMSDQoFc3Rha2UYFyABKAMSKgoLb2Zmc2V0RGVhbHMY",
          "GCADKAsyFS5Qcm90b0xpZ2h0T2Zmc2V0RGVhbBITCgttb25leURpZ2l0cxgZ",
          "IAEoDRISCgptYXJnaW5SYXRlGBogASgBIpMDCh1Qcm90b0xpZ2h0Q2xvc2VQ",
          "b3NpdGlvbkRldGFpbBISCgplbnRyeVByaWNlGAEgAigBEg4KBnByb2ZpdBgC",
          "IAIoAxIMCgRzd2FwGAMgAigDEhIKCmNvbW1pc3Npb24YBCACKAMSDwoHYmFs",
          "YW5jZRgFIAIoAxIkChxxdW90ZVRvRGVwb3NpdENvbnZlcnNpb25SYXRlGAYg",
          "ASgBEhQKDGNsb3NlZFZvbHVtZRgHIAEoAxIWCg5iYWxhbmNlVmVyc2lvbhgI",
          "IAEoAxIjChtpbnRyb2R1Y2luZ0Jyb2tlckNvbW1pc3Npb24YCSABKAMSGwoT",
          "bWlycm9yaW5nQ29tbWlzc2lvbhgKIAEoAxIRCgltaW5FcXVpdHkYCyABKAMS",
          "EQoJbWF4RXF1aXR5GAwgASgDEhsKE29mZnNldERlYWxUaW1lc3RhbXAYDSAB",
          "KAMSEwoLY2xvc2VkU3Rha2UYECABKAMSEwoLbW9uZXlEaWdpdHMYESABKA0S",
          "GAoQcG5sQ29udmVyc2lvbkZlZRgSIAEoAyJ/ChRQcm90b0xpZ2h0T2Zmc2V0",
          "RGVhbBIOCgZkZWFsSWQYASACKAMSFAoMZmlsbGVkVm9sdW1lGAIgAigDEhoK",
          "EmV4ZWN1dGlvblRpbWVzdGFtcBgDIAIoAxIWCg5leGVjdXRpb25QcmljZRgE",
          "IAEoARINCgVzdGFrZRgFIAEoBCJXCg9Qcm90b0Fzc2V0Q2xhc3MSCgoCaWQY",
          "ASABKAMSDAoEbmFtZRgCIAEoCRIVCg1zb3J0aW5nTnVtYmVyGAMgASgBEhMK",
          "C2RlZmF1bHRMb3RzGAYgASgIInQKD1Byb3RvRGVhbE9mZnNldBIOCgZkZWFs",
          "SWQYASACKAMSDgoGdm9sdW1lGAIgAigDEg0KBXN0YWtlGAMgASgEEhoKEmV4",
          "ZWN1dGlvblRpbWVzdGFtcBgEIAEoAxIWCg5leGVjdXRpb25QcmljZRgFIAEo",
          "ASJ7CiNQcm90b1N0b3BMb3NzVGFrZVByb2ZpdENoYW5nZVJlY29yZBITCgtu",
          "ZXdTdG9wTG9zcxgBIAEoARIVCg1uZXdUYWtlUHJvZml0GAIgASgBEhcKD2Ny",
          "ZWF0ZVRpbWVzdGFtcBgDIAIoAxIPCgdvcmRlcklkGAQgASgDIo0BChpQcm90",
          "b1N3YXBDYWxjdWxhdGlvblJlY29yZBITCgtjaGFyZ2VkU3dhcBgBIAIoAxIT",
          "CgtjdXJyZW50U3dhcBgCIAIoAxIXCg9jcmVhdGVUaW1lc3RhbXAYAyACKAMS",
          "FwoPZGVwb3NpdEN1cnJlbmN5GAQgASgJEhMKC21vbmV5RGlnaXRzGAUgASgN",
          "IocBChZQcm90b1RyYWRlclNlc3Npb25JbmZvEhEKCXNlc3Npb25JZBgBIAIo",
          "BBIQCgh0cmFkZXJJZBgCIAIoBBIPCgdwcm94eUlkGAMgAigJEh4KB2dlb0lu",
          "Zm8YBCABKAsyDS5Qcm90b0dlb0luZm8SFwoPYXBwbGljYXRpb25UeXBlGAUg",
          "ASgJIqYBChNQcm90b1N5bWJvbENhdGVnb3J5EgoKAmlkGAEgAigDEhQKDGFz",
          "c2V0Q2xhc3NJZBgCIAIoAxIMCgRuYW1lGAMgAigJEg0KBWNvbG9yGAQgAigJ",
          "EhUKDXNvcnRpbmdOdW1iZXIYBSACKAESEAoIZXhwYW5kZWQYBiACKAgSEQoJ",
          "aXNEZWZhdWx0GAcgAigIEhQKDGlzRG9tRW5hYmxlZBgIIAEoCCJRCh9Qcm90",
          "b01heEF1dG9FeGVjdXRpb25TaXplU3ltYm9sEhAKCHN5bWJvbElkGAEgAigE",
          "EhwKFG1heEF1dG9FeGVjdXRpb25TaXplGAIgAigEIooBCiBQcm90b01heEF1",
          "dG9FeGVjdXRpb25TaXplUHJvZmlsZRIRCglwcm9maWxlSWQYASACKAQSDAoE",
          "bmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIwCgZzeW1ib2wYBCAD",
          "KAsyIC5Qcm90b01heEF1dG9FeGVjdXRpb25TaXplU3ltYm9sIjwKElByb3Rv",
          "RGVhbGluZ1N5bWJvbBIQCghzeW1ib2xJZBgBIAIoAxIUCgxhbHdheXNNYW51",
          "YWwYAiACKAgi6QQKD1Byb3RvTWFudWFsRGVhbBIQCgh0cmFkZXJJZBgBIAIo",
          "AxITCgt0cmFkZXJMb2dpbhgCIAIoAxISCgp0cmFkZXJOYW1lGAMgASgJEhIK",
          "CnBvc2l0aW9uSWQYBSACKAMSEAoIc3ltYm9sSWQYBiACKAMSDwoHb3JkZXJJ",
          "ZBgHIAIoAxIiCglvcmRlclR5cGUYCCACKA4yDy5Qcm90b09yZGVyVHlwZRIi",
          "Cgl0cmFkZVNpZGUYCSACKA4yDy5Qcm90b1RyYWRlU2lkZRIgCghib29rVHlw",
          "ZRgKIAIoDjIOLlByb3RvQm9va1R5cGUSFAoMY2xvc2luZ09yZGVyGAsgAigI",
          "EhoKEmd1YXJhbnRlZWRTdG9wTG9zcxgMIAIoCBIWCg5jaGVja1RvbGVyYW5j",
          "ZRgNIAIoCBISCgpsaW1pdFByaWNlGA4gASgDEhMKC2Rlc2lyZWRWV0FQGA8g",
          "ASgDEg4KBmRlYWxJZBgQIAIoAxIOCgZ2b2x1bWUYESACKAMSDQoFc3Rha2UY",
          "EiABKAMSFAoMdHJpZ2dlclByaWNlGBMgASgDEg8KB2dyb3VwSWQYFCACKAMS",
          "JgoGcmVhc29uGBUgAigOMhYuUHJvdG9NYW51YWxEZWFsUmVhc29uEhEKCXRp",
          "bWVzdGFtcBgWIAIoAxIRCgltYW5hZ2VySWQYFyABKAMSFAoMbWFuYWdlckxv",
          "Z2luGBggASgDEg4KBm1hcmt1cBgZIAIoAxIPCgdzdG9wT3V0GBogASgIEhQK",
          "DGNsb3NlV2l0aFBJRBgbIAEoAxIWCg5kZXBvc2l0QXNzZXRJZBgcIAIoAyL8",
          "AQoQUHJvdG9MaWdodFN5bWJvbBIKCgJpZBgBIAIoAxIYChBzeW1ib2xDYXRl",
          "Z29yeUlkGAIgAigDEhUKDXNvcnRpbmdOdW1iZXIYAyACKAESDAoEbmFtZRgE",
          "IAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIMCgR0YWdzGAYgASgJEhAKCGZh",
          "dm9yaXRlGAcgASgIEg8KB2VuYWJsZWQYCCABKAgSEwoLYmFzZUFzc2V0SWQY",
          "CSABKAMSFAoMcXVvdGVBc3NldElkGAogASgDEhMKC3RyYW5zbGF0aW9uGAsg",
          "ASgJEhcKD3VuaWZpZWRTeW1ib2xJZBgMIAEoBSJXChZQcm90b1N5bWJvbERl",
          "c2NyaXB0aW9uEhAKCHN5bWJvbElkGAEgAigDEhcKD2xvbmdEZXNjcmlwdGlv",
          "bhgCIAEoCRISCgpzeW1ib2xMb2dvGAMgASgMIpcBChRQcm90b0R5bmFtaWNM",
          "ZXZlcmFnZRISCgpsZXZlcmFnZUlkGAEgAigDEgwKBG5hbWUYAiACKAkSEwoL",
          "ZGVzY3JpcHRpb24YAyABKAkSKAoFdGllcnMYBCADKAsyGS5Qcm90b0R5bmFt",
          "aWNMZXZlcmFnZVRpZXISHgoWdXRjTGFzdFVwZGF0ZVRpbWVzdGFtcBgFIAEo",
          "AyI8ChhQcm90b0R5bmFtaWNMZXZlcmFnZVRpZXISDgoGdm9sdW1lGAEgAigD",
          "EhAKCGxldmVyYWdlGAIgAigFIloKEFByb3RvR1NMU2NoZWR1bGUSEgoKc2No",
          "ZWR1bGVJZBgBIAIoAxIMCgRuYW1lGAIgAigJEiQKBXRpZXJzGAMgAygLMhUu",
          "UHJvdG9HU0xTY2hlZHVsZVRpZXIiPQoUUHJvdG9HU0xTY2hlZHVsZVRpZXIS",
          "EQoJc3RhcnRUaW1lGAEgAigFEhIKCm11bHRpcGxpZXIYAiACKAUiPwoSUHJv",
          "dG9PcmRlckFjdGlvbklQEhAKCGFjdGlvbklkGAEgAigDEhcKD2FjdGlvbklQ",
          "QWRkcmVzcxgCIAIoCSL6AQoUUHJvdG9XaXRoZHJhd1JlcXVlc3QSCgoCaWQY",
          "AiACKAQSEAoIdHJhZGVySWQYAyACKAQSFwoPY3JlYXRlVGltZXN0YW1wGAQg",
          "AigEEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAYBSACKAQSDgoGYW1vdW50",
          "GAYgAigEEg8KB2NvbW1lbnQYByABKAkSKgoNcmVxdWVzdFN0YXR1cxgIIAIo",
          "DjITLlByb3RvUmVxdWVzdFN0YXR1cxISCgphc3NpZ25lZFRvGAkgASgEEhUK",
          "DWJyb2tlckNvbW1lbnQYCiABKAkSEwoLbW9uZXlEaWdpdHMYCyABKA0isAEK",
          "FFByb3RvU2NoZWR1bGVQcm9maWxlEhkKEXNjaGVkdWxlUHJvZmlsZUlkGAEg",
          "AigDEgwKBG5hbWUYAiACKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSGAoQc2No",
          "ZWR1bGVUaW1lWm9uZRgEIAIoCRIgCghpbnRlcnZhbBgFIAMoCzIOLlByb3Rv",
          "SW50ZXJ2YWwSHgoWdXRjTGFzdFVwZGF0ZVRpbWVzdGFtcBgGIAEoAyKlAwoW",
          "UHJvdG9Db21taXNzaW9uUHJvZmlsZRIbChNjb21taXNzaW9uUHJvZmlsZUlk",
          "GAEgAigDEgwKBG5hbWUYAiACKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSQQoO",
          "Y29tbWlzc2lvblR5cGUYBSACKA4yFC5Qcm90b0NvbW1pc3Npb25UeXBlOhNV",
          "U0RfUEVSX01JTExJT05fVVNEEjwKEW1pbkNvbW1pc3Npb25UeXBlGAcgAigO",
          "MhcuUHJvdG9NaW5Db21taXNzaW9uVHlwZToIQ1VSUkVOQ1kSHAoUbWluQ29t",
          "bWlzc2lvbkFzc2V0SWQYCCACKAMSJAoccHJlY2lzZVRyYWRpbmdDb21taXNz",
          "aW9uUmF0ZRgJIAEoAxIcChRwcmVjaXNlTWluQ29tbWlzc2lvbhgKIAEoAxIq",
          "Chthdm9pZE1pbkNvbW1pc3Npb25PblN0b3BPdXQYCyABKAg6BWZhbHNlEh4K",
          "FnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAYDCABKAMSHAoUcG5sQ29udmVyc2lv",
          "bkZlZVJhdGUYDSABKAUi9gEKElByb3RvVm9sdW1lUHJvZmlsZRIXCg92b2x1",
          "bWVQcm9maWxlSWQYASACKAMSDAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlv",
          "bhgDIAEoCRIRCgltaW5Wb2x1bWUYBCACKAMSEgoKc3RlcFZvbHVtZRgFIAIo",
          "AxIRCgltYXhWb2x1bWUYBiACKAMSEAoIbWluU3Rha2UYByACKAMSEQoJc3Rl",
          "cFN0YWtlGAggAigDEhAKCG1heFN0YWtlGAkgAigDEhMKC21heEV4cG9zdXJl",
          "GAogAigEEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAYCyABKAMisAIKFVBy",
          "b3RvRXhlY3V0aW9uUHJvZmlsZRIaChJleGVjdXRpb25Qcm9maWxlSWQYASAC",
          "KAMSDAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIVCg1taW5C",
          "b29rQkRlbGF5GAQgAigNEhUKDW1heEJvb2tCRGVsYXkYBSACKA0SLgoPZXhl",
          "Y3V0aW9uUG9saWN5GAYgAigOMhUuUHJvdG9FeGVjdXRpb25Qb2xpY3kSPgoS",
          "Z3NsRXhlY3V0aW9uUG9saWN5GAcgAigOMhguUHJvdG9HU0xFeGVjdXRpb25Q",
          "b2xpY3k6CERJU0FCTEVEEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAYCCAB",
          "KAMSGgoSY29uZGl0aW9uVm9sdW1lVXNkGAkgASgDIocCChZQcm90b1Byb3Rl",
          "Y3Rpb25Qcm9maWxlEhsKE3Byb3RlY3Rpb25Qcm9maWxlSWQYASACKAMSDAoE",
          "bmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIRCglnc2xDaGFyZ2UY",
          "BCACKAMSEgoKc2xEaXN0YW5jZRgFIAIoDRISCgp0cERpc3RhbmNlGAYgAigN",
          "EhMKC2dzbERpc3RhbmNlGAcgAigNEkoKDWRpc3RhbmNlU2V0SW4YCCACKA4y",
          "GC5Qcm90b1N5bWJvbERpc3RhbmNlVHlwZToZU1lNQk9MX0RJU1RBTkNFX0lO",
          "X1BPSU5UUxIRCgl0b2xlcmFuY2UYCSACKAUiggIKFFByb3RvU3dhcEZyZWVQ",
          "cm9maWxlEhkKEXN3YXBGcmVlUHJvZmlsZUlkGAEgAigDEgwKBG5hbWUYAiAC",
          "KAkSEwoLZGVzY3JpcHRpb24YAyABKAkSGgoScm9sbG92ZXJDb21taXNzaW9u",
          "GAQgAigDEhgKEHNraXBSb2xsb3ZlckRheXMYBSACKAUSHAoUcm9sbG92ZXJD",
          "aGFyZ2VQZXJpb2QYBiACKAUSOAoXcm9sbG92ZXJDb21taXNzaW9uM0RheXMY",
          "ByACKA4yDy5Qcm90b0RheU9mV2VlazoGTU9OREFZEh4KFnV0Y0xhc3RVcGRh",
          "dGVUaW1lc3RhbXAYCCABKAMisAEKDFByb3RvSG9saWRheRIRCglob2xpZGF5",
          "SWQYASACKAMSDAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIY",
          "ChBzY2hlZHVsZVRpbWVab25lGAQgAigJEhMKC2hvbGlkYXlEYXRlGAUgAigD",
          "EhMKC2lzUmVjdXJyaW5nGAYgAigIEhMKC3N0YXJ0U2Vjb25kGAcgASgFEhEK",
          "CWVuZFNlY29uZBgIIAEoBSKJAQoTUHJvdG9Ib2xpZGF5UHJvZmlsZRIYChBo",
          "b2xpZGF5UHJvZmlsZUlkGAEgAigDEgwKBG5hbWUYAiACKAkSEwoLZGVzY3Jp",
          "cHRpb24YAyABKAkSFQoJaG9saWRheUlkGAQgAygDQgIQARIeChZ1dGNMYXN0",
          "VXBkYXRlVGltZXN0YW1wGAUgASgDIrACChpQcm90b1N3YXBBbmREaXZpZGVu",
          "ZFN5bWJvbBIQCghzeW1ib2xJZBgBIAIoAxIyChFzd2FwUm9sbG92ZXIzRGF5",
          "cxgCIAEoDjIPLlByb3RvRGF5T2ZXZWVrOgZNT05EQVkSEAoIc3dhcExvbmcY",
          "AyABKAESEQoJc3dhcFNob3J0GAQgASgBEjwKE3N3YXBDYWxjdWxhdGlvblR5",
          "cGUYBSABKA4yGS5Qcm90b1N3YXBDYWxjdWxhdGlvblR5cGU6BFBJUFMSFQoN",
          "ZGl2aWRlbmRzTG9uZxgGIAEoAxIWCg5kaXZpZGVuZHNTaG9ydBgHIAEoAxIU",
          "CgxkaXZpZGVuZFRpbWUYCCABKAMSEAoIc3dhcFRpbWUYCSABKAUSEgoKc3dh",
          "cFBlcmlvZBgKIAEoBSKvAQobUHJvdG9Td2FwQW5kRGl2aWRlbmRQcm9maWxl",
          "EiAKGHN3YXBBbmREaXZpZGVuZFByb2ZpbGVJZBgBIAIoAxIMCgRuYW1lGAIg",
          "AigJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEh4KFnV0Y0xhc3RVcGRhdGVUaW1l",
          "c3RhbXAYBCABKAMSKwoGc3ltYm9sGAUgAygLMhsuUHJvdG9Td2FwQW5kRGl2",
          "aWRlbmRTeW1ib2wiZwogUHJvdG9MaWdodFN3YXBBbmREaXZpZGVuZFByb2Zp",
          "bGUSIAoYc3dhcEFuZERpdmlkZW5kUHJvZmlsZUlkGAEgAigDEgwKBG5hbWUY",
          "AiACKAkSEwoLZGVzY3JpcHRpb24YAyABKAkieAoUUHJvdG9GdXR1cmVzU2V0",
          "dGluZ3MSFQoNZGF0ZXNUaW1lWm9uZRgBIAIoCRIjChtsYXN0VHJhZGVUaW1l",
          "c3RhbXBJbk1pbnV0ZXMYAiACKA0SJAocZXhwaXJhdGlvblRpbWVzdGFtcElu",
          "TWludXRlcxgDIAIoDSLNAQofUHJvdG9JYkNvbW1pc3Npb25TeW1ib2xDYXRl",
          "Z29yeRIYChBzeW1ib2xDYXRlZ29yeUlkGAEgAigDEicKH2ludHJvZHVjaW5n",
          "QnJva2VyQ29tbWlzc2lvblJhdGUYAiACKAUSHAoUcG9ja2V0Q29tbWlzc2lv",
          "blJhdGUYAyACKAUSGAoQcG9ja2V0TWFya3VwUmF0ZRgEIAIoBRIvChFpYkNv",
          "bW1pc3Npb25zVHlwZRgFIAIoDjIULlByb3RvQ29tbWlzc2lvblR5cGUioQIK",
          "HVByb3RvVHJhZGVOb3RpZmljYXRpb25Qcm9maWxlEiIKGnRyYWRlTm90aWZp",
          "Y2F0aW9uUHJvZmlsZUlkGAEgAigDEgwKBG5hbWUYAiACKAkSEwoLZGVzY3Jp",
          "cHRpb24YAyABKAkSJwoIYm9va1R5cGUYBCACKA4yFS5Qcm90b0Jvb2tSZXF1",
          "ZXN0VHlwZRIXCg9ub3RpZnlBdENicm9rZXIYBSACKAgSFQoNbm90aWZ5QXRF",
          "bWFpbBgGIAIoCBIYChB1c2RWb2x1bWVDYnJva2VyGAcgAigDEhYKDnVzZFZv",
          "bHVtZUVtYWlsGAggAigDEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAYCSAB",
          "KAMSDgoGZW1haWxzGAogAygJIoYCChdQcm90b01hbmFnZXJMaWdodFRyYWRl",
          "chIQCgh0cmFkZXJJZBgBIAIoAxINCgVsb2dpbhgCIAIoAxIPCgdncm91cElk",
          "GAMgAigDEhYKDmRlcG9zaXRBc3NldElkGAQgAigDEgwKBG5hbWUYBSABKAkS",
          "EAoIbGFzdE5hbWUYBiABKAkSHQoVcmVnaXN0cmF0aW9uVGltZXN0YW1wGAcg",
          "AigDEhQKDHN1YkFjY291bnRPZhgIIAEoAxISCgpicm9rZXJOYW1lGAkgASgJ",
          "EhwKFHN0cmF0ZWd5UHJvdmlkZXJOYW1lGAogASgJEhoKEnN0cmF0ZWd5UHJv",
          "dmlkZXJJZBgLIAEoAyKEAQoTUHJvdG9JbnNlcnRUcmVuZGJhchIRCgl0aW1l",
          "c3RhbXAYASACKAMSDAoEb3BlbhgCIAIoARIMCgRoaWdoGAMgAigBEgsKA2xv",
          "dxgEIAIoARINCgVjbG9zZRgFIAIoARIOCgZ2b2x1bWUYBiACKA0SEgoKdHJl",
          "bmRiYXJJZBgHIAIoBSJIChhQcm90b0luc2VydFRyZW5kYmFyRXJyb3ISEgoK",
          "dHJlbmRiYXJJZBgBIAIoBRIYChBlcnJvckRlc2NyaXB0aW9uGAIgAigJKqlH",
          "ChJQcm90b0NTUGF5bG9hZFR5cGUSFAoQUFJPVE9fU1BPVF9FVkVOVBADEhsK",
          "F1BST1RPX1RSRU5EQkFSX0xJU1RfUkVREHESGwoXUFJPVE9fVFJFTkRCQVJf",
          "TElTVF9SRVMQchIcChdQUk9UT19PUkRFUl9FUlJPUl9FVkVOVBCKARIWChFQ",
          "Uk9UT19WRVJTSU9OX1JFURCaARIWChFQUk9UT19WRVJTSU9OX1JFUxCbARIc",
          "ChdQUk9UT19NQU5BR0VSX0JZX0lEX1JFURDiARIcChdQUk9UT19NQU5BR0VS",
          "X0JZX0lEX1JFUxDjARIoCiNQUk9UT19NQU5BR0VSX0xJR0hUX1RSQURFUl9M",
          "SVNUX1JFURDkARIoCiNQUk9UT19NQU5BR0VSX0xJR0hUX1RSQURFUl9MSVNU",
          "X1JFUxDlARIaChVQUk9UT19FWEVDVVRJT05fRVZFTlQQrAISGwoWUFJPVE9f",
          "TUFOQUdFUl9BVVRIX1JFURCtAhIbChZQUk9UT19NQU5BR0VSX0FVVEhfUkVT",
          "EK4CEiUKIFBST1RPX0NIQU5HRV9UUkFERVJfUEFTU1dPUkRfUkVREK8CEiUK",
          "IFBST1RPX0NIQU5HRV9UUkFERVJfUEFTU1dPUkRfUkVTELACEiYKIVBST1RP",
          "X0NIQU5HRV9NQU5BR0VSX1BBU1NXT1JEX1JFURCxAhImCiFQUk9UT19DSEFO",
          "R0VfTUFOQUdFUl9QQVNTV09SRF9SRVMQsgISJAofUFJPVE9fQ0hFQ0tfVFJB",
          "REVSX1BBU1NXT1JEX1JFURCzAhIkCh9QUk9UT19DSEVDS19UUkFERVJfUEFT",
          "U1dPUkRfUkVTELQCEiUKIFBST1RPX0NIRUNLX01BTkFHRVJfUEFTU1dPUkRf",
          "UkVRELUCEiUKIFBST1RPX0NIRUNLX01BTkFHRVJfUEFTU1dPUkRfUkVTELYC",
          "EhoKFVBST1RPX1NFUlZFUl9USU1FX1JFURC5AhIaChVQUk9UT19TRVJWRVJf",
          "VElNRV9SRVMQugISHAoXUFJPVE9fT1JERVJfREVUQUlMU19SRVEQwQISHAoX",
          "UFJPVE9fT1JERVJfREVUQUlMU19SRVMQwgISKAojUFJPVE9fUE9TSVRJT05f",
          "TUFSR0lOX0NIQU5HRURfRVZFTlQQzwISKQokUFJPVE9fUkVDQUxDVUxBVEVf",
          "QUNDT1VOVF9NQVJHSU5fUkVRENACEikKJFBST1RPX1JFQ0FMQ1VMQVRFX0FD",
          "Q09VTlRfTUFSR0lOX1JFUxDRAhIoCiNQUk9UT19SRUNBTENVTEFURV9TWU1C",
          "T0xfTUFSR0lOX1JFURDSAhIoCiNQUk9UT19SRUNBTENVTEFURV9TWU1CT0xf",
          "TUFSR0lOX1JFUxDTAhIrCiZQUk9UT19SRUNBTENVTEFURV9EWU5BTUlDX0xF",
          "VkVSQUdFX1JFURDbAhIrCiZQUk9UT19SRUNBTENVTEFURV9EWU5BTUlDX0xF",
          "VkVSQUdFX1JFUxDcAhInCiJQUk9UT19NQU5BR0VSX0JBTEFOQ0VfVFJBTlNG",
          "RVJfUkVREOMCEicKIlBST1RPX01BTkFHRVJfQkFMQU5DRV9UUkFOU0ZFUl9S",
          "RVMQ5AISJAofUFJPVE9fQ1JVRF9TQ0hFRFVMRV9QUk9GSUxFX1JFURDoAhIk",
          "Ch9QUk9UT19DUlVEX1NDSEVEVUxFX1BST0ZJTEVfUkVTEOkCEikKJFBST1RP",
          "X1NDSEVEVUxFX1BST0ZJTEVfQ0hBTkdFRF9FVkVOVBDqAhIkCh9QUk9UT19T",
          "Q0hFRFVMRV9QUk9GSUxFX0xJU1RfUkVREOsCEiQKH1BST1RPX1NDSEVEVUxF",
          "X1BST0ZJTEVfTElTVF9SRVMQ7AISJgohUFJPVE9fQ1JVRF9DT01NSVNTSU9O",
          "X1BST0ZJTEVfUkVREO0CEiYKIVBST1RPX0NSVURfQ09NTUlTU0lPTl9QUk9G",
          "SUxFX1JFUxDuAhIrCiZQUk9UT19DT01NSVNTSU9OX1BST0ZJTEVfQ0hBTkdF",
          "RF9FVkVOVBDvAhImCiFQUk9UT19DT01NSVNTSU9OX1BST0ZJTEVfTElTVF9S",
          "RVEQ8AISJgohUFJPVE9fQ09NTUlTU0lPTl9QUk9GSUxFX0xJU1RfUkVTEPEC",
          "EiIKHVBST1RPX0NSVURfVk9MVU1FX1BST0ZJTEVfUkVREPcCEiIKHVBST1RP",
          "X0NSVURfVk9MVU1FX1BST0ZJTEVfUkVTEPgCEicKIlBST1RPX1ZPTFVNRV9Q",
          "Uk9GSUxFX0NIQU5HRURfRVZFTlQQ+QISIgodUFJPVE9fVk9MVU1FX1BST0ZJ",
          "TEVfTElTVF9SRVEQ+gISIgodUFJPVE9fVk9MVU1FX1BST0ZJTEVfTElTVF9S",
          "RVMQ+wISJQogUFJPVE9fQ1JVRF9FWEVDVVRJT05fUFJPRklMRV9SRVEQ/AIS",
          "JQogUFJPVE9fQ1JVRF9FWEVDVVRJT05fUFJPRklMRV9SRVMQ/QISKgolUFJP",
          "VE9fRVhFQ1VUSU9OX1BST0ZJTEVfQ0hBTkdFRF9FVkVOVBD+AhIlCiBQUk9U",
          "T19FWEVDVVRJT05fUFJPRklMRV9MSVNUX1JFURD/AhIlCiBQUk9UT19FWEVD",
          "VVRJT05fUFJPRklMRV9MSVNUX1JFUxCAAxImCiFQUk9UT19DUlVEX1BST1RF",
          "Q1RJT05fUFJPRklMRV9SRVEQgQMSJgohUFJPVE9fQ1JVRF9QUk9URUNUSU9O",
          "X1BST0ZJTEVfUkVTEIIDEisKJlBST1RPX1BST1RFQ1RJT05fUFJPRklMRV9D",
          "SEFOR0VEX0VWRU5UEIMDEiYKIVBST1RPX1BST1RFQ1RJT05fUFJPRklMRV9M",
          "SVNUX1JFURCEAxImCiFQUk9UT19QUk9URUNUSU9OX1BST0ZJTEVfTElTVF9S",
          "RVMQhQMSJQogUFJPVE9fQ1JVRF9TV0FQX0ZSRUVfUFJPRklMRV9SRVEQhgMS",
          "JQogUFJPVE9fQ1JVRF9TV0FQX0ZSRUVfUFJPRklMRV9SRVMQhwMSKgolUFJP",
          "VE9fU1dBUF9GUkVFX1BST0ZJTEVfQ0hBTkdFRF9FVkVOVBCIAxIlCiBQUk9U",
          "T19TV0FQX0ZSRUVfUFJPRklMRV9MSVNUX1JFURCJAxIlCiBQUk9UT19TV0FQ",
          "X0ZSRUVfUFJPRklMRV9MSVNUX1JFUxCKAxIbChZQUk9UT19DUlVEX0hPTElE",
          "QVlfUkVREIsDEhsKFlBST1RPX0NSVURfSE9MSURBWV9SRVMQjAMSIAobUFJP",
          "VE9fSE9MSURBWV9DSEFOR0VEX0VWRU5UEI0DEhsKFlBST1RPX0hPTElEQVlf",
          "TElTVF9SRVEQjgMSGwoWUFJPVE9fSE9MSURBWV9MSVNUX1JFUxCPAxIjCh5Q",
          "Uk9UT19DUlVEX0hPTElEQVlfUFJPRklMRV9SRVEQkAMSIwoeUFJPVE9fQ1JV",
          "RF9IT0xJREFZX1BST0ZJTEVfUkVTEJEDEigKI1BST1RPX0hPTElEQVlfUFJP",
          "RklMRV9DSEFOR0VEX0VWRU5UEJIDEhoKFVBST1RPX1RSQURFUl9MSVNUX1JF",
          "URCTAxIaChVQUk9UT19UUkFERVJfTElTVF9SRVMQlAMSHAoXUFJPVE9fUE9T",
          "SVRJT05fTElTVF9SRVEQlwMSHAoXUFJPVE9fUE9TSVRJT05fTElTVF9SRVMQ",
          "mAMSIQocUFJPVE9fUEVORElOR19PUkRFUl9MSVNUX1JFURCZAxIhChxQUk9U",
          "T19QRU5ESU5HX09SREVSX0xJU1RfUkVTEJoDEhsKFlBST1RPX01BTkFHRVJf",
          "TElTVF9SRVEQmwMSGwoWUFJPVE9fTUFOQUdFUl9MSVNUX1JFUxCcAxIjCh5Q",
          "Uk9UT19CQUxBTkNFX0hJU1RPUllfTElTVF9SRVEQoQMSIwoeUFJPVE9fQkFM",
          "QU5DRV9ISVNUT1JZX0xJU1RfUkVTEKIDEiMKHlBST1RPX0VYUE9TVVJFX1NZ",
          "TUJPTF9MSVNUX1JFURCjAxIjCh5QUk9UT19FWFBPU1VSRV9TWU1CT0xfTElT",
          "VF9SRVMQpAMSHgoZUFJPVE9fU0VSVkVSX1NFVFRJTkdTX1JFURCnAxIeChlQ",
          "Uk9UT19TRVJWRVJfU0VUVElOR1NfUkVTEKgDEiAKG1BST1RPX1BSSUNFX1NU",
          "UkVBTV9MSVNUX1JFURCrAxIgChtQUk9UT19QUklDRV9TVFJFQU1fTElTVF9S",
          "RVMQrAMSIgodUFJPVE9fTElRVUlESVRZX0ZFRURfTElTVF9SRVEQrQMSIgod",
          "UFJPVE9fTElRVUlESVRZX0ZFRURfTElTVF9SRVMQrgMSIAobUFJPVE9fTUFO",
          "QUdFUl9ERUFMX0xJU1RfUkVREK8DEiAKG1BST1RPX01BTkFHRVJfREVBTF9M",
          "SVNUX1JFUxCwAxIbChZQUk9UT19DT1VOVFJZX0xJU1RfUkVRELMDEhsKFlBS",
          "T1RPX0NPVU5UUllfTElTVF9SRVMQtAMSHwoaUFJPVE9fQVNTRVRfQ0xBU1Nf",
          "TElTVF9SRVEQtQMSHwoaUFJPVE9fQVNTRVRfQ0xBU1NfTElTVF9SRVMQtgMS",
          "IQocUFJPVE9fT1JERVJfTUFOQUdFUl9MSVNUX1JFURC7AxIhChxQUk9UT19P",
          "UkRFUl9NQU5BR0VSX0xJU1RfUkVTELwDEiMKHlBST1RPX0hPTElEQVlfUFJP",
          "RklMRV9MSVNUX1JFURC/AxIjCh5QUk9UT19IT0xJREFZX1BST0ZJTEVfTElT",
          "VF9SRVMQwAMSLwoqUFJPVE9fTUFOQUdFUl9ERUFMX0xJU1RfQllfUE9TSVRJ",
          "T05fSURfUkVREMsDEi8KKlBST1RPX01BTkFHRVJfREVBTF9MSVNUX0JZX1BP",
          "U0lUSU9OX0lEX1JFUxDMAxIxCixQUk9UT19NQU5BR0VSX19PUkRFUl9MSVNU",
          "X0JZX1BPU0lUSU9OX0lEX1JFURDNAxIxCixQUk9UT19NQU5BR0VSX19PUkRF",
          "Ul9MSVNUX0JZX1BPU0lUSU9OX0lEX1JFUxDOAxIjCh5QUk9UT19TWU1CT0xf",
          "Q0FURUdPUllfTElTVF9SRVEQzwMSIwoeUFJPVE9fU1lNQk9MX0NBVEVHT1JZ",
          "X0xJU1RfUkVTENADEhkKFFBST1RPX0FTU0VUX0xJU1RfUkVRENEDEhkKFFBS",
          "T1RPX0FTU0VUX0xJU1RfUkVTENIDEiIKHVBST1RPX01BTkFHRVJfU1lNQk9M",
          "X0xJU1RfUkVRENMDEiIKHVBST1RPX01BTkFHRVJfU1lNQk9MX0xJU1RfUkVT",
          "ENQDEiQKH1BST1RPX0RZTkFNSUNfTEVWRVJBR0VfTElTVF9SRVEQ1QMSJAof",
          "UFJPVE9fRFlOQU1JQ19MRVZFUkFHRV9MSVNUX1JFUxDWAxIgChtQUk9UT19H",
          "U0xfU0NIRURVTEVfTElTVF9SRVEQ1wMSIAobUFJPVE9fR1NMX1NDSEVEVUxF",
          "X0xJU1RfUkVTENgDEh8KGlBST1RPX0xJR0hUX0dST1VQX0xJU1RfUkVRENkD",
          "Eh8KGlBST1RPX0xJR0hUX0dST1VQX0xJU1RfUkVTENoDEhoKFVBST1RPX0dS",
          "T1VQX0JZX0lEX1JFURDbAxIaChVQUk9UT19HUk9VUF9CWV9JRF9SRVMQ3AMS",
          "KQokUFJPVE9fTElRVUlESVRZX0ZFRURfU1lNQk9MX0xJU1RfUkVREOkDEikK",
          "JFBST1RPX0xJUVVJRElUWV9GRUVEX1NZTUJPTF9MSVNUX1JFUxDqAxIzCi5Q",
          "Uk9UT19MSUdIVF9TV0FQX0FORF9ESVZJREVORF9QUk9GSUxFX0xJU1RfUkVR",
          "EO0DEjMKLlBST1RPX0xJR0hUX1NXQVBfQU5EX0RJVklERU5EX1BST0ZJTEVf",
          "TElTVF9SRVMQ7gMSLgopUFJPVE9fU1dBUF9BTkRfRElWSURFTkRfUFJPRklM",
          "RV9CWV9JRF9SRVEQ7wMSLgopUFJPVE9fU1dBUF9BTkRfRElWSURFTkRfUFJP",
          "RklMRV9CWV9JRF9SRVMQ8AMSGgoVUFJPVE9fQ1JVRF9UUkFERVJfUkVREPUD",
          "EhoKFVBST1RPX0NSVURfVFJBREVSX1JFUxD2AxIfChpQUk9UT19UUkFERVJf",
          "Q0hBTkdFRF9FVkVOVBD3AxIZChRQUk9UT19DUlVEX0dST1VQX1JFURD4AxIZ",
          "ChRQUk9UT19DUlVEX0dST1VQX1JFUxD5AxIeChlQUk9UT19HUk9VUF9DSEFO",
          "R0VEX0VWRU5UEPoDEhoKFVBST1RPX0NSVURfU1lNQk9MX1JFURD7AxIaChVQ",
          "Uk9UT19DUlVEX1NZTUJPTF9SRVMQ/AMSGwoWUFJPVE9fQ1JVRF9NQU5BR0VS",
          "X1JFURD+AxIbChZQUk9UT19DUlVEX01BTkFHRVJfUkVTEP8DEiAKG1BST1RP",
          "X01BTkFHRVJfQ0hBTkdFRF9FVkVOVBCABBItCihQUk9UT19DUlVEX1NXQVBf",
          "QU5EX0RJVklERU5EX1BST0ZJTEVfUkVREIEEEi0KKFBST1RPX0NSVURfU1dB",
          "UF9BTkRfRElWSURFTkRfUFJPRklMRV9SRVMQggQSMgotUFJPVE9fU1dBUF9B",
          "TkRfRElWSURFTkRfUFJPRklMRV9DSEFOR0VEX0VWRU5UEIMEEiUKIFBST1RP",
          "X1VQREFURV9TRVJWRVJfU0VUVElOR1NfUkVREIQEEiUKIFBST1RPX1VQREFU",
          "RV9TRVJWRVJfU0VUVElOR1NfUkVTEIUEEigKI1BST1RPX1NFUlZFUl9TRVRU",
          "SU5HU19DSEFOR0VEX0VWRU5UEIYEEh0KGFBST1RPX0NIQU5HRV9CQUxBTkNF",
          "X1JFURCHBBIdChhQUk9UT19DSEFOR0VfQkFMQU5DRV9SRVMQiAQSIgodUFJP",
          "VE9fUFJJQ0VfU1RSRUFNX0NSRUFURV9SRVEQjwQSIgodUFJPVE9fUFJJQ0Vf",
          "U1RSRUFNX0NSRUFURV9SRVMQkAQSIgodUFJPVE9fUFJJQ0VfU1RSRUFNX0RF",
          "TEVURV9SRVEQkQQSIgodUFJPVE9fUFJJQ0VfU1RSRUFNX0RFTEVURV9SRVMQ",
          "kgQSIgodUFJPVE9fUFJJQ0VfU1RSRUFNX1VQREFURV9SRVEQkwQSIgodUFJP",
          "VE9fUFJJQ0VfU1RSRUFNX1VQREFURV9SRVMQlAQSJQogUFJPVE9fUFJJQ0Vf",
          "U1RSRUFNX0NIQU5HRURfRVZFTlQQlQQSGQoUUFJPVE9fQ1JVRF9BU1NFVF9S",
          "RVEQmgQSGQoUUFJPVE9fQ1JVRF9BU1NFVF9SRVMQmwQSHgoZUFJPVE9fQVNT",
          "RVRfQ0hBTkdFRF9FVkVOVBCcBBIpCiRQUk9UT19DUlVEX0xJUVVJRElUWV9G",
          "RUVEX1NZTUJPTF9SRVEQoQQSKQokUFJPVE9fQ1JVRF9MSVFVSURJVFlfRkVF",
          "RF9TWU1CT0xfUkVTEKIEEi4KKVBST1RPX0xJUVVJRElUWV9GRUVEX1NZTUJP",
          "TF9DSEFOR0VEX0VWRU5UEKMEEh4KGVBST1RPX0lOU0VSVF9UUkVOREJBUl9S",
          "RVEQpwQSHgoZUFJPVE9fSU5TRVJUX1RSRU5EQkFSX1JFUxCoBBInCiJQUk9U",
          "T19NQU5BR0VSX1NZTUJPTF9DSEFOR0VEX0VWRU5UEK4EEiQKH1BST1RPX0NS",
          "VURfRFlOQU1JQ19MRVZFUkFHRV9SRVEQrwQSJAofUFJPVE9fQ1JVRF9EWU5B",
          "TUlDX0xFVkVSQUdFX1JFUxCwBBIpCiRQUk9UT19EWU5BTUlDX0xFVkVSQUdF",
          "X0NIQU5HRURfRVZFTlQQsQQSJwoiUFJPVE9fVFJBREVSX1BFUk1JU1NJT05f",
          "TE9TRV9FVkVOVBCyBBIgChtQUk9UT19DUlVEX0dTTF9TQ0hFRFVMRV9SRVEQ",
          "swQSIAobUFJPVE9fQ1JVRF9HU0xfU0NIRURVTEVfUkVTELQEEiUKIFBST1RP",
          "X0dTTF9TQ0hFRFVMRV9DSEFOR0VEX0VWRU5UELUEEhwKF1BST1RPX0NSRUFU",
          "RV9TWU1CT0xfUkVRELsEEhwKF1BST1RPX0NSRUFURV9TWU1CT0xfUkVTELwE",
          "EiAKG1BST1RPX1NZTUJPTF9BUkNISVZFRF9FVkVOVBC/BBIgChtQUk9UT19T",
          "WU1CT0xfUkVTVE9SRURfRVZFTlQQxAQSLgopUFJPVE9fQ1JVRF9UUkFERV9O",
          "T1RJRklDQVRJT05fUFJPRklMRV9SRVEQxQQSLgopUFJPVE9fQ1JVRF9UUkFE",
          "RV9OT1RJRklDQVRJT05fUFJPRklMRV9SRVMQxgQSOAozUFJPVE9fQ1JVRF9U",
          "UkFERV9OT1RJRklDQVRJT05fUFJPRklMRV9DSEFOR0VEX0VWRU5UEMcEEjMK",
          "LlBST1RPX0NSVURfVFJBREVfTk9USUZJQ0FUSU9OX1BST0ZJTEVfTElTVF9S",
          "RVEQyAQSMwouUFJPVE9fQ1JVRF9UUkFERV9OT1RJRklDQVRJT05fUFJPRklM",
          "RV9MSVNUX1JFUxDJBBIeChlQUk9UT19ERUxFVEVfVFJFTkRCQVJfUkVREMoE",
          "Eh4KGVBST1RPX0RFTEVURV9UUkVOREJBUl9SRVMQywQSJAofUFJPVE9fU1VC",
          "U0NSSUJFX1NQT1RfUVVPVEVTX1JFURDZBBIkCh9QUk9UT19TVUJTQ1JJQkVf",
          "U1BPVF9RVU9URVNfUkVTENoEEiYKIVBST1RPX1VOU1VCU0NSSUJFX1NQT1Rf",
          "UVVPVEVTX1JFURDgBBImCiFQUk9UT19VTlNVQlNDUklCRV9TUE9UX1FVT1RF",
          "U19SRVMQ4QQSGwoWUFJPVE9fVFJBREVSX0JZX0lEX1JFURC/BRIbChZQUk9U",
          "T19UUkFERVJfQllfSURfUkVTEMAFEh8KGlBST1RPX01BTkFHRVJfR0VUX0RF",
          "QUxfUkVREMUFEh8KGlBST1RPX01BTkFHRVJfR0VUX0RFQUxfUkVTEMcFEisK",
          "JlBST1RPX01BTkFHRVJfQ0xPU0VEX1BPU0lUSU9OX0xJU1RfUkVRENAFEisK",
          "JlBST1RPX01BTkFHRVJfQ0xPU0VEX1BPU0lUSU9OX0xJU1RfUkVTENEFEh0K",
          "GFBST1RPX1RSQURFUl9MT0dPTl9FVkVOVBDaBRIeChlQUk9UT19UUkFERVJf",
          "TE9HT1VUX0VWRU5UENsFEiAKG1BST1RPX01BTkFHRVJfTkVXX09SREVSX1JF",
          "URDiBRIiCh1QUk9UT19NQU5BR0VSX0FNRU5EX09SREVSX1JFURDjBRIjCh5Q",
          "Uk9UT19NQU5BR0VSX0NBTkNFTF9PUkRFUl9SRVEQ5AUSJQogUFJPVE9fTUFO",
          "QUdFUl9BTUVORF9QT1NJVElPTl9SRVEQ5QUSJQogUFJPVE9fTUFOQUdFUl9D",
          "TE9TRV9QT1NJVElPTl9SRVEQ5gUSIAobUFJPVE9fUkVCVUlMRF9UUkVOREJB",
          "UlNfUkVREPAFEiAKG1BST1RPX1JFQlVJTERfVFJFTkRCQVJTX1JFUxDxBRIk",
          "Ch9QUk9UT19QT1NJVElPTl9ERVRBSUxTX0xJVEVfUkVREPIFEiQKH1BST1RP",
          "X1BPU0lUSU9OX0RFVEFJTFNfTElURV9SRVMQ8wUSIwoeUFJPVE9fTUFOQUdF",
          "Ul9DSEFOR0VfQk9OVVNfUkVREIwGEiMKHlBST1RPX01BTkFHRVJfQ0hBTkdF",
          "X0JPTlVTX1JFUxCNBhIhChxQUk9UT19CT05VU19ISVNUT1JZX0xJU1RfUkVR",
          "EJIGEiEKHFBST1RPX0JPTlVTX0hJU1RPUllfTElTVF9SRVMQkwYSJAofUFJP",
          "VE9fTElRVUlESVRZX0ZFRURfU1RBVFVTX1JFURCkBhIkCh9QUk9UT19MSVFV",
          "SURJVFlfRkVFRF9TVEFUVVNfUkVTEKUGEh8KGlBST1RPX0RFQUxJTkdfU0VU",
          "VElOR1NfUkVRELAGEh8KGlBST1RPX0RFQUxJTkdfU0VUVElOR1NfUkVTELEG",
          "EiYKIVBST1RPX1VQREFURV9ERUFMSU5HX1NFVFRJTkdTX1JFURCyBhImCiFQ",
          "Uk9UT19VUERBVEVfREVBTElOR19TRVRUSU5HU19SRVMQswYSIAobUFJPVE9f",
          "TkVXX01BTlVBTF9ERUFMX0VWRU5UELQGEh8KGlBST1RPX01BTlVBTF9ERUFM",
          "X0xJU1RfUkVRELUGEh8KGlBST1RPX01BTlVBTF9ERUFMX0xJU1RfUkVTELYG",
          "EiAKG1BST1RPX01BTlVBTF9ERUFMX0NMQUlNX1JFURC3BhIgChtQUk9UT19N",
          "QU5VQUxfREVBTF9DTEFJTV9SRVMQuAYSJAofUFJPVE9fTUFOVUFMX0RFQUxf",
          "Q0xBSU1FRF9FVkVOVBC5BhIiCh1QUk9UT19NQU5VQUxfREVBTF9VTkNMQUlN",
          "X1JFURC6BhIiCh1QUk9UT19NQU5VQUxfREVBTF9VTkNMQUlNX1JFUxC7BhIm",
          "CiFQUk9UT19NQU5VQUxfREVBTF9VTkNMQUlNRURfRVZFTlQQvAYSIAobUFJP",
          "VE9fTUFOVUFMX0RFQUxfUkVTRVRfUkVREL0GEiAKG1BST1RPX01BTlVBTF9E",
          "RUFMX1JFU0VUX1JFUxC+BhIhChxQUk9UT19NQU5VQUxfREVBTF9SRUpFQ1Rf",
          "UkVREL8GEiEKHFBST1RPX01BTlVBTF9ERUFMX1JFSkVDVF9SRVMQwAYSIgod",
          "UFJPVE9fTUFOVUFMX0RFQUxfRVhFQ1VURV9SRVEQwQYSIgodUFJPVE9fTUFO",
          "VUFMX0RFQUxfRVhFQ1VURV9SRVMQwgYSJgohUFJPVE9fTUFOVUFMX0RFQUxf",
          "UFJPQ0VTU0VEX0VWRU5UEMMGEh8KGlBST1RPX0RFQUxFUl9ORVdfT1JERVJf",
          "UkVREMQGEiEKHFBST1RPX0RFQUxFUl9BTUVORF9PUkRFUl9SRVEQxQYSIgod",
          "UFJPVE9fREVBTEVSX0NBTkNFTF9PUkRFUl9SRVEQxgYSJAofUFJPVE9fREVB",
          "TEVSX0FNRU5EX1BPU0lUSU9OX1JFURDHBhIkCh9QUk9UT19ERUFMRVJfQ0xP",
          "U0VfUE9TSVRJT05fUkVREMgGEikKJFBST1RPX0RFQUxJTkdfU0VUVElOR1Nf",
          "VVBEQVRFRF9FVkVOVBDLBhIkCh9QUk9UT19BU1NFVF9DTEFTU19DSEFOR0VE",
          "X0VWRU5UEM4GEiQKH1BST1RPX0FTU0VUX0NMQVNTX0RFTEVURURfRVZFTlQQ",
          "zwYSKAojUFJPVE9fU1lNQk9MX0NBVEVHT1JZX0NIQU5HRURfRVZFTlQQ0AYS",
          "KAojUFJPVE9fU1lNQk9MX0NBVEVHT1JZX0RFTEVURURfRVZFTlQQ0QYSJQog",
          "UFJPVE9fTUFOQUdFUl9HRVRfQVVUSF9UT0tFTl9SRVEQ0gYSJQogUFJPVE9f",
          "TUFOQUdFUl9HRVRfQVVUSF9UT0tFTl9SRVMQ0wYSJQogUFJPVE9fU1lNQk9M",
          "U19GT1JfQ09OVkVSU0lPTl9SRVEQ4AYSJQogUFJPVE9fU1lNQk9MU19GT1Jf",
          "Q09OVkVSU0lPTl9SRVMQ4QYSIwoeUFJPVE9fRk9SQ0VfQ0xPU0VfUE9TSVRJ",
          "T05fUkVREOYGEiIKHVBST1RPX0ZPUkNFX09QRU5fUE9TSVRJT05fUkVREOcG",
          "EjMKLlBST1RPX0NSVURfTUFYX0FVVE9fRVhFQ1VUSU9OX1NJWkVfUFJPRklM",
          "RV9SRVEQ8wYSMwouUFJPVE9fQ1JVRF9NQVhfQVVUT19FWEVDVVRJT05fU0la",
          "RV9QUk9GSUxFX1JFUxD0BhI9CjhQUk9UT19DUlVEX01BWF9BVVRPX0VYRUNV",
          "VElPTl9TSVpFX1BST0ZJTEVfQ0hBTkdFRF9FVkVOVBD1BhI4CjNQUk9UT19D",
          "UlVEX01BWF9BVVRPX0VYRUNVVElPTl9TSVpFX1BST0ZJTEVfTElTVF9SRVEQ",
          "9gYSOAozUFJPVE9fQ1JVRF9NQVhfQVVUT19FWEVDVVRJT05fU0laRV9QUk9G",
          "SUxFX0xJU1RfUkVTEPcGEhYKEVBST1RPX0hFTExPX0VWRU5UEN4HKsIOChBQ",
          "cm90b0NTRXJyb3JDb2RlEhQKEE5PVF9FTk9VR0hfTU9ORVkQARIVChFOT1Rf",
          "RU5PVUdIX1JJR0hUUxACEhkKFUFVVEhFTlRJQ0FUSU9OX0ZBSUxFRBADEhYK",
          "ElBPU0lUSU9OX05PVF9GT1VORBAEEhMKD1BPU0lUSU9OX0xPQ0tFRBAFEh0K",
          "GUNIQU5HRV9CQUxBTkNFX0JBRF9BTU9VTlQQBhINCglOT19RVU9URVMQBxIU",
          "ChBUUkFESU5HX0RJU0FCTEVEEAgSFwoTVFJBRElOR19OT1RfQUxMT1dFRBAJ",
          "EhYKElRSQURJTkdfQkFEX1ZPTFVNRRAKEhQKEFRSQURFUl9OT1RfRk9VTkQQ",
          "CxIaChZUUkFERVJfR1JPVVBfTk9UX0ZPVU5EEAwSHgoaUkVDT05DSUxJQVRJ",
          "T05fSU5fUFJPR1JFU1MQDRIVChFBTFJFQURZX0xPR0dFRF9JThAOEhYKElRP",
          "T19NQU5ZX1BPU0lUSU9OUxAQEhMKD09SREVSX05PVF9GT1VORBAREhUKEVRS",
          "QURJTkdfQkFEX1NUT1BTEBISEwoPQUxSRUFEWV9ERUxFVEVEEBMSEgoOV1JP",
          "TkdfTEVWRVJBR0UQFBIfChtUUkFESU5HX0JBRF9FWFBJUkFUSU9OX0RBVEUQ",
          "FRIWChJBTFJFQURZX1NVQlNDUklCRUQQFhIeChpSRVFVRVNUX0ZSRVFVRU5D",
          "WV9FWENFRURFRBAXEhUKEVBPU0lUSU9OX05PVF9PUEVOEBgSFwoTV1JPTkdf",
          "VElNRV9TRVFVRU5DRRAZEh8KG0ZPUkJJRF9XSVRIX1RSQURJTkdfRU5BQkxF",
          "RBAaEhkKFUlOQ09SUkVDVF9QT1NJVElPTl9JRBAbEhgKFFRSQURFUl9IQVNf",
          "UE9TSVRJT05TEBwSGQoVVU5LTk9XTl9MSVFJRElUWV9GRUVEEB0SHQoZQVNT",
          "RVRfQ0xBU1NfQUxSRUFEWV9FWElTVBAeEhwKGEFTU0VUX0NMQVNTX0lTX05P",
          "VF9FTVBUWRAfEhYKElRSQURJTkdfQkFEX1BSSUNFUxAgEh0KGVVOQUJMRV9U",
          "T19GT1JXQVJEX0NPTU1BTkQQIRISCg5VTktOT1dOX1NZTUJPTBAiEhgKFElO",
          "Q09SUkVDVF9CT1VOREFSSUVTECMSFAoQU1lNQk9MX05PVF9GT1VORBAkEhIK",
          "DkRFQUxfTk9UX0ZPVU5EECUSHgoaUE9TSVRJT05fQ09OQ1VSUkVOVF9DSEFO",
          "R0UQJhIaChZOT1RfSU5UUk9EVUNJTkdfQlJPS0VSECcSHAoYSU5UUk9EVUNJ",
          "TkdfQlJPS0VSX0NZQ0xFECgSGgoWVU5BQkxFX1RPX0NBTkNFTF9PUkRFUhAp",
          "EhkKFVVOQUJMRV9UT19BTUVORF9PUkRFUhAqEhwKGFVOS05PV05fREVQT1NJ",
          "VF9DVVJSRU5DWRArEiAKHERFUE9TSVRfQ1VSUkVOQ1lfTk9UX0FMTE9XRUQQ",
          "LBIdChlTSE9SVF9TRUxMSU5HX05PVF9BTExPV0VEEC0SGwoXQ0hBTkdFX0JP",
          "TlVTX0JBRF9BTU9VTlQQLhIfChtTRVJWRVJfSVNfVU5ERVJfTUFJTlRFTkFO",
          "Q0UQLxIVChFUUkFESU5HX0JBRF9TVEFLRRAwEhoKFkdVSV9TRVRUSU5HU19O",
          "T1RfRk9VTkQQMRIlCiFQUk9URUNUSU9OX0lTX1RPT19DTE9TRV9UT19NQVJL",
          "RVQQMhIaChZPUkRFUl9UWVBFX05PVF9BTExPV0VEEDMSEAoMSU5WQUxJRF9E",
          "QVRBEDQSEQoNTk9fU1VDSF9MT0dJThA1EhgKFE1BWF9FWFBPU1VSRV9SRUFD",
          "SEVEEDYSFQoRUEVORElOR19FWEVDVVRJT04QNxIkCiBGT1JCSURfV0lUSF9T",
          "VUJTQ1JJUFRJT05fRU5BQkxFRBA4EhsKF05PVF9TVUJTQ1JJQkVEX1RPX1NQ",
          "T1RTEDkSGgoWREFJTFlfRVFVSVRZX05PVF9GT1VORBA6EhYKElNUUkFURUdZ",
          "X05PVF9GT1VORBA7Eh0KGVNZTUJPTF9OQU1FX0FMUkVBRFlfRVhJU1QQPBIS",
          "Cg5ISURERU5fSElTVE9SWRA9EhkKFU9QRVJBVElPTl9OT1RfQUxMT1dFRBA+",
          "EhYKEkNIQU5ORUxfSVNfQkxPQ0tFRBA/EhwKGE5PVF9TVUJTQ1JJQkVEX1RP",
          "X0RFUFRIUxBAEhUKEVNRQV9OT1RfQUNUSVZBVEVEEEESGQoVU1FBX0FMUkVB",
          "RFlfQUNUSVZBVEVEEEISHgoaQ09OTkVDVElPTlNfTElNSVRfRVhDRUVERUQQ",
          "QxIZChVXT1JTRV9HU0xfTk9UX0FMTE9XRUQQRBIWChJTWU1CT0xfSEFTX0hP",
          "TElEQVkQRRIOCgpSRVNFUlZFRF8zEEYSDgoKUkVTRVJWRURfNBBHEg4KClJF",
          "U0VSVkVEXzUQSCrlCQoPUHJvdG9SZXN1bHRDb2RlEgoKBlJFVF9PSxAAEg8K",
          "C1JFVF9PS19OT05FEAESDQoJUkVUX0VSUk9SEAISFAoQUkVUX0lOVkFMSURf",
          "REFUQRADEhQKEFJFVF9URUNIX1BST0JMRU0QBBITCg9SRVRfT0xEX1ZFUlNJ",
          "T04QBRISCg5SRVRfTk9fQ09OTkVDVBAGEhkKFVJFVF9OT1RfRU5PVUdIX1JJ",
          "R0hUUxAHEhQKEFJFVF9UT09fRlJFUVVFTlQQCBITCg9SRVRfTUFMRlVOQ1RJ",
          "T04QCRIUChBSRVRfR0VORVJBVEVfS0VZEAoSGAoUUkVUX1NFQ1VSSVRZX1NF",
          "U1NJT04QCxIVChFSRVRfTk9fU1VDSF9MT0dJThAMEhgKFFJFVF9BQ0NPVU5U",
          "X0RJU0FCTEVEEEASGAoUUkVUX0JBRF9BQ0NPVU5UX0lORk8QQRIaChZSRVRf",
          "UFVCTElDX0tFWV9NSVNTSU5HEEISFgoRUkVUX1RSQURFX1RJTUVPVVQQgAES",
          "GQoUUkVUX1RSQURFX0JBRF9QUklDRVMQgQESGAoTUkVUX1RSQURFX0JBRF9T",
          "VE9QUxCCARIZChRSRVRfVFJBREVfQkFEX1ZPTFVNRRCDARIcChdSRVRfVFJB",
          "REVfTUFSS0VUX0NMT1NFRBCEARIWChFSRVRfVFJBREVfRElTQUJMRRCFARIX",
          "ChJSRVRfVFJBREVfTk9fTU9ORVkQhgESHAoXUkVUX1RSQURFX1BSSUNFX0NI",
          "QU5HRUQQhwESGgoVUkVUX1RSQURFX0JST0tFUl9CVVNZEIgBEhYKEVJFVF9U",
          "UkFERV9SRVFVT1RFEIkBEhsKFlJFVF9UUkFERV9PUkRFUl9MT0NLRUQQigES",
          "GAoTUkVUX1RSQURFX0xPTkdfT05MWRCLARIbChZSRVRfVFJBREVfVE9PX01B",
          "TllfUkVREIwBEhcKElJFVF9UUkFERV9BQ0NFUFRFRBCNARIWChFSRVRfVFJB",
          "REVfUFJPQ0VTUxCOARIaChVSRVRfVFJBREVfVVNFUl9DQU5DRUwQjwESHAoX",
          "UkVUX1RSQURFX01PRElGWV9ERU5JRUQQkAESGwoWUkVUX1RSQURFX0NPTlRF",
          "WFRfQlVTWRCRARIgChtSRVRfVFJBREVfRVhQSVJBVElPTl9ERU5JRUQQkgES",
          "HgoZUkVUX1RSQURFX1RPT19NQU5ZX09SREVSUxCTARIfChpSRVRfVFJBREVf",
          "SEVER0VfUFJPSElCSVRFRBCUARIjCh5SRVRfVFJBREVfTUFYX0VYUE9TVVJF",
          "X1JFQUNIRUQQlQESGgoVUkVUX1BFTkRJTkdfRVhFQ1VUSU9OEJYBEikKJFJF",
          "VF9GT1JCSURfV0lUSF9TVUJTQ1JJUFRJT05fRU5BQkxFRBCXARIgChtSRVRf",
          "Tk9UX1NVQlNDUklCRURfVE9fU1BPVFMQmAESHwoaUkVUX0RBSUxZX0VRVUlU",
          "WV9OT1RfRk9VTkQQmQESGwoWUkVUX1NUUkFURUdZX05PVF9GT1VORBCaARIh",
          "ChxSRVRfTk9UX1NVQlNDUklCRURfVE9fREVQVEhTEJsBEhMKDlJFVF9SRVNF",
          "UlZFRF8xEJwBEhMKDlJFVF9SRVNFUlZFRF8yEJ0BEhMKDlJFVF9SRVNFUlZF",
          "RF8zEJ4BKsMCCg9Qcm90b0FjdGlvblR5cGUSJwojQUNUSU9OX0NSRUFURV9T",
          "VE9QX0xPU1NfVEFLRV9QUk9GSVQQARImCiJBQ1RJT05fQU1FTkRfU1RPUF9M",
          "T1NTX1RBS0VfUFJPRklUEAISJwojQUNUSU9OX0NBTkNFTF9TVE9QX0xPU1Nf",
          "VEFLRV9QUk9GSVQQAxIfChtBQ1RJT05fQ1JFQVRFX0NMT1NJTkdfT1JERVIQ",
          "BBIXChNBQ1RJT05fQ1JFQVRFX09SREVSEAUSHwobQUNUSU9OX0NBTkNFTF9Q",
          "RU5ESU5HX09SREVSEAYSIwofQUNUSU9OX0FNRU5EX09QRU5fUEVORElOR19P",
          "UkRFUhAHEhoKFkFDVElPTl9DUkVBVEVfT0NPX0xJTksQCBIaChZBQ1RJT05f",
          "Q0FOQ0VMX09DT19MSU5LEAkqcwoRUHJvdG9BY3Rpb25TdGF0dXMSEgoOQUNU",
          "SU9OX1BFTkRJTkcQARISCg5BQ1RJT05fU1RBUlRFRBACEhEKDUFDVElPTl9Q",
          "QVNTRUQQAxIRCg1BQ1RJT05fRkFJTEVEEAQSEAoMQUNUSU9OX0VSUk9SEAUq",
          "tQwKFlByb3RvQ2hhbmdlQmFsYW5jZVR5cGUSEwoPQkFMQU5DRV9ERVBPU0lU",
          "EAASFAoQQkFMQU5DRV9XSVRIRFJBVxABEhoKFkJBTEFOQ0VfQ0xPU0VfUE9T",
          "SVRJT04QAhItCilCQUxBTkNFX0RFUE9TSVRfU1RSQVRFR1lfQ09NTUlTU0lP",
          "Tl9JTk5FUhADEi4KKkJBTEFOQ0VfV0lUSERSQVdfU1RSQVRFR1lfQ09NTUlT",
          "U0lPTl9JTk5FUhAEEiIKHkJBTEFOQ0VfREVQT1NJVF9JQl9DT01NSVNTSU9O",
          "UxAFEikKJUJBTEFOQ0VfV0lUSERSQVdfSUJfU0hBUkVEX1BFUkNFTlRBR0UQ",
          "BhI0CjBCQUxBTkNFX0RFUE9TSVRfSUJfU0hBUkVEX1BFUkNFTlRBR0VfRlJP",
          "TV9TVUJfSUIQBxI0CjBCQUxBTkNFX0RFUE9TSVRfSUJfU0hBUkVEX1BFUkNF",
          "TlRBR0VfRlJPTV9CUk9LRVIQCBIaChZCQUxBTkNFX0RFUE9TSVRfUkVCQVRF",
          "EAkSGwoXQkFMQU5DRV9XSVRIRFJBV19SRUJBVEUQChItCilCQUxBTkNFX0RF",
          "UE9TSVRfU1RSQVRFR1lfQ09NTUlTU0lPTl9PVVRFUhALEi4KKkJBTEFOQ0Vf",
          "V0lUSERSQVdfU1RSQVRFR1lfQ09NTUlTU0lPTl9PVVRFUhAMEicKI0JBTEFO",
          "Q0VfV0lUSERSQVdfQk9OVVNfQ09NUEVOU0FUSU9OEA0SMwovQkFMQU5DRV9X",
          "SVRIRFJBV19JQl9TSEFSRURfUEVSQ0VOVEFHRV9UT19CUk9LRVIQDhIdChlC",
          "QUxBTkNFX0RFUE9TSVRfRElWSURFTkRTEA8SHgoaQkFMQU5DRV9XSVRIRFJB",
          "V19ESVZJREVORFMQEBIfChtCQUxBTkNFX1dJVEhEUkFXX0dTTF9DSEFSR0UQ",
          "ERIdChlCQUxBTkNFX1dJVEhEUkFXX1JPTExPVkVSEBISKQolQkFMQU5DRV9E",
          "RVBPU0lUX05PTldJVEhEUkFXQUJMRV9CT05VUxATEioKJkJBTEFOQ0VfV0lU",
          "SERSQVdfTk9OV0lUSERSQVdBQkxFX0JPTlVTEBQSGAoUQkFMQU5DRV9ERVBP",
          "U0lUX1NXQVAQFRIZChVCQUxBTkNFX1dJVEhEUkFXX1NXQVAQFhIrCidCQUxB",
          "TkNFX1dJVEhEUkFXX0lOVkVTVE1FTlRfVE9fU1RSQVRFR1kQFxIhCh1CQUxB",
          "TkNFX0RFUE9TSVRfRlJPTV9JTlZFU1RPUhAYEicKI0JBTEFOQ0VfREVQT1NJ",
          "VF9SRVRVUk5FRF9JTlZFU1RNRU5UEBkSIAocQkFMQU5DRV9XSVRIRFJBV19C",
          "WV9JTlZFU1RPUhAaEiIKHkJBTEFOQ0VfREVQT1NJVF9NQU5BR0VNRU5UX0ZF",
          "RRAbEiMKH0JBTEFOQ0VfV0lUSERSQVdfTUFOQUdFTUVOVF9GRUUQHBIjCh9C",
          "QUxBTkNFX0RFUE9TSVRfUEVSRk9STUFOQ0VfRkVFEB0SIwofQkFMQU5DRV9X",
          "SVRIRFJBV19GT1JfU1VCQUNDT1VOVBAeEiEKHUJBTEFOQ0VfREVQT1NJVF9U",
          "T19TVUJBQ0NPVU5UEB8SJAogQkFMQU5DRV9XSVRIRFJBV19GUk9NX1NVQkFD",
          "Q09VTlQQIBIjCh9CQUxBTkNFX0RFUE9TSVRfRlJPTV9TVUJBQ0NPVU5UECES",
          "HQoZQkFMQU5DRV9XSVRIRFJBV19DT1BZX0ZFRRAiEiMKH0JBTEFOQ0VfV0lU",
          "SERSQVdfSU5BQ1RJVklUWV9GRUUQIxIcChhCQUxBTkNFX0RFUE9TSVRfVFJB",
          "TlNGRVIQJBIdChlCQUxBTkNFX1dJVEhEUkFXX1RSQU5TRkVSECUSIwofQkFM",
          "QU5DRV9ERVBPU0lUX0NPTlZFUlRFRF9CT05VUxAmEi8KK0JBTEFOQ0VfREVQ",
          "T1NJVF9ORUdBVElWRV9CQUxBTkNFX1BST1RFQ1RJT04QJxIWChJCQUxBTkNF",
          "X1JFU0VSVkVEXzEQKBIWChJCQUxBTkNFX1JFU0VSVkVEXzIQKRIWChJCQUxB",
          "TkNFX1JFU0VSVkVEXzMQKio9ChRQcm90b0NoYW5nZUJvbnVzVHlwZRIRCg1C",
          "T05VU19ERVBPU0lUEAASEgoOQk9OVVNfV0lUSERSQVcQASqDAQoTUHJvdG9Q",
          "b3NpdGlvblN0YXR1cxIYChRQT1NJVElPTl9TVEFUVVNfT1BFThABEhoKFlBP",
          "U0lUSU9OX1NUQVRVU19DTE9TRUQQAhIbChdQT1NJVElPTl9TVEFUVVNfQ1JF",
          "QVRFRBADEhkKFVBPU0lUSU9OX1NUQVRVU19FUlJPUhAEKiMKDlByb3RvVHJh",
          "ZGVTaWRlEgcKA0JVWRABEggKBFNFTEwQAipuCg5Qcm90b09yZGVyVHlwZRIK",
          "CgZNQVJLRVQQARIJCgVMSU1JVBACEggKBFNUT1AQAxIZChVTVE9QX0xPU1Nf",
          "VEFLRV9QUk9GSVQQBBIQCgxNQVJLRVRfUkFOR0UQBRIOCgpTVE9QX0xJTUlU",
          "EAYqewoQUHJvdG9UaW1lSW5Gb3JjZRISCg5HT09EX1RJTExfREFURRABEhQK",
          "EEdPT0RfVElMTF9DQU5DRUwQAhIXChNJTU1FRElBVEVfT1JfQ0FOQ0VMEAMS",
          "EAoMRklMTF9PUl9LSUxMEAQSEgoOTUFSS0VUX09OX09QRU4QBSqyAQoQUHJv",
          "dG9PcmRlclN0YXR1cxIZChVPUkRFUl9TVEFUVVNfQUNDRVBURUQQARIXChNP",
          "UkRFUl9TVEFUVVNfRklMTEVEEAISGQoVT1JERVJfU1RBVFVTX1JFSkVDVEVE",
          "EAMSGAoUT1JERVJfU1RBVFVTX0VYUElSRUQQBBIaChZPUkRFUl9TVEFUVVNf",
          "Q0FOQ0VMTEVEEAUSGQoVT1JERVJfU1RBVFVTX1JFU0VSVkVEEAYqWQoXUHJv",
          "dG9PcmRlclRyaWdnZXJNZXRob2QSCQoFVFJBREUQARIMCghPUFBPU0lURRAC",
          "EhAKDERPVUJMRV9UUkFERRADEhMKD0RPVUJMRV9PUFBPU0lURRAEKj4KEFBy",
          "b3RvQWNjb3VudFR5cGUSCgoGSEVER0VEEAASCgoGTkVUVEVEEAESEgoOU1BS",
          "RUFEX0JFVFRJTkcQAio8Ch9Qcm90b1RvdGFsTWFyZ2luQ2FsY3VsYXRpb25U",
          "eXBlEgcKA01BWBAAEgcKA1NVTRABEgcKA05FVBACKlIKEVByb3RvQWNjZXNz",
          "UmlnaHRzEg8KC0ZVTExfQUNDRVNTEAASDgoKQ0xPU0VfT05MWRABEg4KCk5P",
          "X1RSQURJTkcQAhIMCghOT19MT0dJThADKoYBChdQcm90b0dTTEV4ZWN1dGlv",
          "blBvbGljeRIMCghESVNBQkxFRBAAEh0KGUVOQUJMRURfREVDTElORV9JRl9B",
          "X0JPT0sQARIYChRFTkFCTEVEX0ZPUkNFX0JfQk9PSxACEiQKIEVOQUJMRURf",
          "RVhFQ1VURV9JTlRPX1NZTUJPTF9CT09LEAMqTwoTUHJvdG9TeW1ib2xCb29r",
          "VHlwZRIbChdTWU1CT0xfQk9PS19UWVBFX0JPT0tfQRABEhsKF1NZTUJPTF9C",
          "T09LX1RZUEVfQk9PS19CEAIqbwoTUHJvdG9Db21taXNzaW9uVHlwZRIXChNV",
          "U0RfUEVSX01JTExJT05fVVNEEAESDwoLVVNEX1BFUl9MT1QQAhIXChNQRVJD",
          "RU5UQUdFX09GX1ZBTFVFEAMSFQoRUVVPVEVfQ0NZX1BFUl9MT1QQBCqDAQoQ",
          "UHJvdG9UcmFkaW5nTW9kZRILCgdFTkFCTEVEEAASJwojRElTQUJMRURfV0lU",
          "SE9VVF9QRU5ESU5HU19FWEVDVVRJT04QARIkCiBESVNBQkxFRF9XSVRIX1BF",
          "TkRJTkdTX0VYRUNVVElPThACEhMKD0NMT1NFX09OTFlfTU9ERRADKjQKGFBy",
          "b3RvU3dhcENhbGN1bGF0aW9uVHlwZRIICgRQSVBTEAASDgoKUEVSQ0VOVEFH",
          "RRABKnYKDlByb3RvRGF5T2ZXZWVrEggKBE5PTkUQABIKCgZNT05EQVkQARIL",
          "CgdUVUVTREFZEAISDQoJV0VETkVTREFZEAMSDAoIVEhVUlNEQVkQBBIKCgZG",
          "UklEQVkQBRIMCghTQVRVUkRBWRAGEgoKBlNVTkRBWRAHKjoKFlByb3RvTWlu",
          "Q29tbWlzc2lvblR5cGUSDAoIQ1VSUkVOQ1kQARISCg5RVU9URV9DVVJSRU5D",
          "WRACKicKDVByb3RvQm9va1R5cGUSCgoGQk9PS19BEAESCgoGQk9PS19CEAIq",
          "VQoUUHJvdG9Cb29rUmVxdWVzdFR5cGUSFQoRQUxMX0JPT0tTX1JFUVVFU1QQ",
          "ARISCg5CT09LX0FfUkVRVUVTVBACEhIKDkJPT0tfQl9SRVFVRVNUEAMqWwoX",
          "UHJvdG9TeW1ib2xEaXN0YW5jZVR5cGUSHQoZU1lNQk9MX0RJU1RBTkNFX0lO",
          "X1BPSU5UUxABEiEKHVNZTUJPTF9ESVNUQU5DRV9JTl9QRVJDRU5UQUdFEAIq",
          "YQoSUHJvdG9DcnVkT3BlcmF0aW9uEhAKDFBST1RPX0NSRUFURRABEhAKDFBS",
          "T1RPX1VQREFURRADEhAKDFBST1RPX0RFTEVURRAEEhUKEVBST1RPX1VQREFU",
          "RV9ESUZGEAUqxgQKFlByb3RvU2VydmVyU2V0dGluZ1R5cGUSEwoPRU5EX09G",
          "X0RBWV9USU1FEAISIQodQk9PS19CX09SREVSX0ZJTExJTkdfU1RSQVRFR1kQ",
          "BRIbChdQUklDRV9GSUxURVJJTkdfRU5BQkxFRBAHEh0KGURFUFRIX1RIUk9U",
          "VExJTkdfSU5URVJWQUwQCBIcChhERVBUSF9USFJPVFRMSU5HX0VOQUJMRUQQ",
          "CRIMCghMSUZFVElNRRAMEiIKHk1FVEhPRF9PRl9MSUZFVElNRV9DQUxDVUxB",
          "VElPThANEhIKDkVWRVJZT05FX0lTX0lCEA4SGQoVQUxXQVlTX01BTlVBTF9F",
          "TkFCTEVEEA8SFQoRTUlOX0dBUF9UT0xFUkFOQ0UQEBIVChFNQVhfR0FQX1RP",
          "TEVSQU5DRRAREhcKE01BTlVBTF9ERUFMX1RJTUVPVVQQEhITCg9FT0RfUkVQ",
          "T1JUX1RJTUUQExIdChlNQVJHSU5fUkVDQUxDVUxBVElPTl9UWVBFEBUSIwof",
          "QURESVRJT05BTF9CX0JPT0tfREVMQVlfQ0hBTk5FTBAWEh8KG0FERElUSU9O",
          "QUxfQl9CT09LX01JTl9ERUxBWRAXEh8KG0FERElUSU9OQUxfQl9CT09LX01B",
          "WF9ERUxBWRAYEhsKF0lCX1JFUVVFU1RfQVVUT19BUFBST1ZFEBkSGgoWQVZB",
          "SUxBQkxFX1RSQURJTkdfQk9PSxAaEh4KGk1BTlVBTF9ERUFMX1RJTUVPVVRf",
          "QUNUSU9OEBsquBAKFlByb3RvTWFuYWdlclBlcm1pc3Npb24SFAoQUk9MRV9U",
          "UkFERVJfUkVBRBABEhYKElJPTEVfVFJBREVSX0NSRUFURRACEhQKEFJPTEVf",
          "VFJBREVSX0VESVQQAxIWChJST0xFX1RSQURFUl9ERUxFVEUQBBIXChNST0xF",
          "X1RSQURFUl9DQVNISUVSEAUSHwobUk9MRV9UUkFERVJfQ0hBTkdFX1BBU1NX",
          "T1JEEAYSFwoTUk9MRV9UUkFERVJfVklFV0FMTBAHEh0KGVJPTEVfVFJBREVS",
          "X1BIT05FX1RSQURJTkcQCBIdChlST0xFX1RSQURFUl9CT05VU19DQVNISUVS",
          "EAkSFQoRUk9MRV9NQU5BR0VSX1JFQUQQChIXChNST0xFX01BTkFHRVJfQ1JF",
          "QVRFEAsSFQoRUk9MRV9NQU5BR0VSX0VESVQQDBIXChNST0xFX01BTkFHRVJf",
          "REVMRVRFEA0SIAocUk9MRV9NQU5BR0VSX0NIQU5HRV9QQVNTV09SRBAOEhYK",
          "ElJPTEVfRk9SQ0VfVFJBRElORxAPEhMKD1JPTEVfR1JPVVBfUkVBRBAUEhUK",
          "EVJPTEVfR1JPVVBfQ1JFQVRFEBUSEwoPUk9MRV9HUk9VUF9FRElUEBYSFQoR",
          "Uk9MRV9HUk9VUF9ERUxFVEUQFxIaChZST0xFX0dST1VQU19TVVBFUlZJU09S",
          "EBgSHAoYUk9MRV9NQU5BR0VSU19TVVBFUlZJU09SEBkSGgoWUk9MRV9QUklD",
          "RV9TVFJFQU1fRURJVBAgEhQKEFJPTEVfU1lNQk9MX0VESVQQKRIWChJST0xF",
          "X1NFVFRJTkdTX1JFQUQQMhIWChJST0xFX1NFVFRJTkdTX0VESVQQMxIdChlS",
          "T0xFX0hJU1RPUklDQUxfREFUQV9SRUFEEGQSHwobUk9MRV9ISVNUT1JJQ0FM",
          "X0RBVEFfSU1QT1JUEGUSHwobUk9MRV9ISVNUT1JJQ0FMX0RBVEFfRVhQT1JU",
          "EGYSIAocUk9MRV9ISVNUT1JJQ0FMX0RBVEFfQUREX0JBUhBnEiEKHVJPTEVf",
          "SElTVE9SSUNBTF9EQVRBX0VESVRfQkFSEGgSIwofUk9MRV9ISVNUT1JJQ0FM",
          "X0RBVEFfREVMRVRFX0JBUhBpEhQKEFJPTEVfUkVQT1JUX1JFQUQQbhIWChJS",
          "T0xFX1JFUE9SVF9FWFBPUlQQbxIVChFST0xFX0pPVVJOQUxfUkVBRBB4EhcK",
          "E1JPTEVfSk9VUk5BTF9FWFBPUlQQeRIUCg9ST0xFX09SREVSX1JFQUQQggES",
          "FgoRUk9MRV9PUkRFUl9FWFBPUlQQgwESFwoSUk9MRV9QT1NJVElPTl9SRUFE",
          "EIwBEhkKFFJPTEVfUE9TSVRJT05fRVhQT1JUEI0BEh4KGVJPTEVfVFJBRElO",
          "R19ISVNUT1JZX1JFQUQQlgESIAobUk9MRV9UUkFESU5HX0hJU1RPUllfRVhQ",
          "T1JUEJcBEhgKE1JPTEVfTElRVUlESVRZX1JFQUQQoAESGAoTUk9MRV9MSVFV",
          "SURJVFlfRURJVBChARIXChJST0xFX0VYUE9TVVJFX1JFQUQQqgESGgoVUk9M",
          "RV9JTlRFR1JBVElPTl9SRUFEELQBEhoKFVJPTEVfQVNTRVRfQ0xBU1NfRURJ",
          "VBC1ARIZChRST0xFX1BCX1NFVFRJTkdfUkVBRBC+ARIaChVST0xFX1BCX1NF",
          "VFRJTkdfV1JJVEUQvwESGwoWUk9MRV9QUklDRV9GSUxURVJfRURJVBDCARIj",
          "Ch5ST0xFX1RSQURFUl9JTlRST0RVQ0lOR19CUk9LRVIQwwESHQoYUk9MRV9H",
          "SVZFX1VQX1JFUE9SVF9SRUFEEMQBEhsKFlJPTEVfR1VJX1NFVFRJTkdTX0VE",
          "SVQQxQESEAoLUk9MRV9SRVBPUlQQxgESEQoMUk9MRV9ERUFMSU5HEMcBEhoK",
          "FVJPTEVfRU5USVRZX0JPT0tfUkVBRBDJARIVChBST0xFX0ZVTk5FTF9SRUFE",
          "EMoBEhUKEFJPTEVfRlVOTkVMX0VESVQQywESEwoOUk9MRV9IT09LX1JFQUQQ",
          "zAESEwoOUk9MRV9IT09LX0VESVQQzQESIQocUk9MRV9XSVRIRFJBV0FMX1JF",
          "UVVFU1RfUkVBRBDOARIhChxST0xFX1dJVEhEUkFXQUxfUkVRVUVTVF9FRElU",
          "EM8BEhIKDVJPTEVfS1lDX1JFQUQQ0AESEgoNUk9MRV9LWUNfRURJVBDRARIe",
          "ChlST0xFX01BUktFVElOR19MSU5LU19SRUFEENIBEh4KGVJPTEVfTUFSS0VU",
          "SU5HX0xJTktTX0VESVQQ0wESFQoQUk9MRV9VU0VSX0VYUE9SVBDUARIVChBS",
          "T0xFX1VTRVJfREVMRVRFENUBEhcKElJPTEVfUkVHSU9OU19BRE1JThDWARIU",
          "Cg9ST0xFX0NPUFlfQURNSU4Q1wESEgoNUk9MRV9MSVZFQ0hBVBDYARIcChdS",
          "T0xFX0NUSURfTk9USUZJQ0FUSU9OUxDZARIXChJST0xFX1BST0ZJTEVTX0VE",
          "SVQQ2gESHQoYUk9MRV9NQVJLRVRJTkdfU0VORF9QVVNIENsBEigKI1JPTEVf",
          "TUFSS0VUSU5HX1NFTkRfQkxPVFRFUl9NRVNTQUdFENwBEiUKIFJPTEVfTUFO",
          "QUdFUl9DSEFOR0VfT1dOX1BBU1NXT1JEEN0BEiEKHFJPTEVfV0hJVEVfTEFC",
          "RUxTX1NVUEVSVklTT1IQ3gESGgoVUk9MRV9SRVBPUlRfRlVMTF9FRElUEN8B",
          "KvkBChJQcm90b0V4ZWN1dGlvblR5cGUSEgoOT1JERVJfQUNDRVBURUQQAhIQ",
          "CgxPUkRFUl9GSUxMRUQQAxISCg5PUkRFUl9SRVBMQUNFRBAEEhMKD09SREVS",
          "X0NBTkNFTExFRBAFEhEKDU9SREVSX0VYUElSRUQQBhISCg5PUkRFUl9SRUpF",
          "Q1RFRBAHEhkKFU9SREVSX0NBTkNFTF9SRUpFQ1RFRBAIEggKBFNXQVAQCRIU",
          "ChBERVBPU0lUX1dJVEhEUkFXEAoSFgoST1JERVJfUEFSVElBTF9GSUxMEAsS",
          "GgoWQk9OVVNfREVQT1NJVF9XSVRIRFJBVxAMKo8BCg5Qcm90b0Fzc2V0VHlw",
          "ZRIPCgtQUk9UT19GT1JFWBABEhAKDFBST1RPX01FVEFMUxACEhEKDVBST1RP",
          "X0lORElDRVMQAxITCg9QUk9UT19DT01NT0RJVFkQBBIPCgtQUk9UT19TVE9D",
          "SxAFEhAKDFBST1RPX0NSWVBUTxAGEg8KC1BST1RPX09USEVSEAcqcQoPUHJv",
          "dG9EZWFsU3RhdHVzEgoKBkZJTExFRBACEhQKEFBBUlRJQUxMWV9GSUxMRUQQ",
          "AxIMCghSRUpFQ1RFRBAEEhcKE0lOVEVSTkFMTFlfUkVKRUNURUQQBRIJCgVF",
          "UlJPUhAGEgoKBk1JU1NFRBAHKjAKDVByb3RvRGVhbFR5cGUSDwoLTUFSS0VU",
          "X0RFQUwQARIOCgpMSU1JVF9ERUFMEAIqIgoOUHJvdG9RdW90ZVR5cGUSBwoD",
          "QklEEAESBwoDQVNLEAIqqAEKFVByb3RvTWFudWFsRGVhbFJlYXNvbhIkCiBN",
          "QU5VQUxfREVBTF9SRUFTT05fQUxXQVlTX01BTlVBTBABEh0KGU1BTlVBTF9E",
          "RUFMX1JFQVNPTl9WT0xVTUUQAhIoCiRNQU5VQUxfREVBTF9SRUFTT05fTUFY",
          "X0dBUF9UT0xFUkFOQ0UQAxIgChxNQU5VQUxfREVBTF9SRUFTT05fRU1QVFlf",
          "RE9NEAQqSAoSUHJvdG9SZXF1ZXN0U3RhdHVzEgcKA05FVxAAEgwKCEFQUFJP",
          "VkVEEAESDAoIREVDTElORUQQAhINCglDQU5DRUxMRUQQAyp/CilQcm90b0xp",
          "bWl0ZWRSaXNrTWFyZ2luQ2FsY3VsYXRpb25TdHJhdGVneRIZChVBQ0NPUkRJ",
          "TkdfVE9fTEVWRVJBR0UQABIUChBBQ0NPUkRJTkdfVE9fR1NMEAESIQodQUND",
          "T1JESU5HX1RPX0dTTF9BTkRfTEVWRVJBR0UQAio9ChxQcm90b01hbnVhbERl",
          "YWxUaW1lb3V0QWN0aW9uEhAKDFJFSkVDVF9SRVNFVBAAEgsKB0VYRUNVVEUQ",
          "ASomCg9Qcm90b0JvbnVzT3duZXISCwoHTUFOQUdFUhAAEgYKAklCEAEqRgoU",
          "UHJvdG9FeGVjdXRpb25Qb2xpY3kSCQoFQk9PS0EQARIJCgVCT09LQhACEhgK",
          "FEJPT0tBX1dJVEhfQ09ORElUSU9OEAMqigEKE1Byb3RvVHJlbmRiYXJQZXJp",
          "b2QSBgoCTTEQARIGCgJNMhACEgYKAk0zEAMSBgoCTTQQBBIGCgJNNRAFEgcK",
          "A00xMBAGEgcKA00xNRAHEgcKA00zMBAIEgYKAkgxEAkSBgoCSDQQChIHCgNI",
          "MTIQCxIGCgJEMRAMEgYKAlcxEA0SBwoDTU4xEA4qgQIKDlByb3RvVGltZWZy",
          "YW1lEgcKA01fMRABEgcKA01fMhACEgcKA01fMxADEgcKA01fNBAEEgcKA01f",
          "NRAFEgcKA01fNhAGEgcKA01fNxAHEgcKA01fOBAIEgcKA01fORAJEggKBE1f",
          "MTAQChIICgRNXzE1EAsSCAoETV8yMBAMEggKBE1fMzAQDRIICgRNXzQ1EA4S",
          "BwoDSF8xEA8SBwoDSF8yEBASBwoDSF8zEBESBwoDSF80EBISBwoDSF82EBMS",
          "BwoDSF84EBQSCAoESF8xMhAVEgcKA0RfMRAWEgcKA0RfMhAXEgcKA0RfMxAY",
          "EgcKA1dfMRAZEggKBE1OXzEQGio2ChFQcm90b1RyZW5kYmFyVHlwZRIQCgxS",
          "RUdVTEFSX09ITEMQABIPCgtIRUlLSU5fQVNISRABQj0KHGNvbS54dHJhZGVy",
          "Lm1hbmFnZXJhcGkubW9kZWxCGENTQ29udGFpbmVyTW9kZWxNZXNzYWdlc1AB",
          "oAEB"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommonModelMessagesExternalReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProtoCSPayloadType), typeof(global::ProtoCSErrorCode), typeof(global::ProtoResultCode), typeof(global::ProtoActionType), typeof(global::ProtoActionStatus), typeof(global::ProtoChangeBalanceType), typeof(global::ProtoChangeBonusType), typeof(global::ProtoPositionStatus), typeof(global::ProtoTradeSide), typeof(global::ProtoOrderType), typeof(global::ProtoTimeInForce), typeof(global::ProtoOrderStatus), typeof(global::ProtoOrderTriggerMethod), typeof(global::ProtoAccountType), typeof(global::ProtoTotalMarginCalculationType), typeof(global::ProtoAccessRights), typeof(global::ProtoGSLExecutionPolicy), typeof(global::ProtoSymbolBookType), typeof(global::ProtoCommissionType), typeof(global::ProtoTradingMode), typeof(global::ProtoSwapCalculationType), typeof(global::ProtoDayOfWeek), typeof(global::ProtoMinCommissionType), typeof(global::ProtoBookType), typeof(global::ProtoBookRequestType), typeof(global::ProtoSymbolDistanceType), typeof(global::ProtoCrudOperation), typeof(global::ProtoServerSettingType), typeof(global::ProtoManagerPermission), typeof(global::ProtoExecutionType), typeof(global::ProtoAssetType), typeof(global::ProtoDealStatus), typeof(global::ProtoDealType), typeof(global::ProtoQuoteType), typeof(global::ProtoManualDealReason), typeof(global::ProtoRequestStatus), typeof(global::ProtoLimitedRiskMarginCalculationStrategy), typeof(global::ProtoManualDealTimeoutAction), typeof(global::ProtoBonusOwner), typeof(global::ProtoExecutionPolicy), typeof(global::ProtoTrendbarPeriod), typeof(global::ProtoTimeframe), typeof(global::ProtoTrendbarType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTrendbar), global::ProtoTrendbar.Parser, new[]{ "Volume", "Period", "Low", "DeltaOpen", "DeltaClose", "DeltaHigh", "UtcTimestampInMinutes", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTradeData), global::ProtoTradeData.Parser, new[]{ "SymbolId", "Volume", "TradeSide", "TraderId", "OpenTimestamp", "CloseTimestamp", "Label", "Comment", "Channel", "MeasurementUnits", "LotSize", "SpreadBetting", "Stake", "DesiredVWAP", "GuaranteedStopLoss" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoPosition), global::ProtoPosition.Parser, new[]{ "PositionId", "TradeData", "PositionStatus", "Swap", "Price", "StopLoss", "TakeProfit", "UtcLastUpdateTimestamp", "BookType", "Commission", "MarginRate", "IntroducingBrokerCommission", "PocketCommission", "PocketMarkup", "MirroringCommission", "GuaranteedStopLoss", "UsedMargin", "TrailingStopLoss", "StopLossTriggerMethod", "MoneyDigits", "PnlConversionFeeRate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOrder), global::ProtoOrder.Parser, new[]{ "OrderId", "TradeData", "OrderType", "OrderStatus", "ExpirationTimestamp", "ExecutionPrice", "ExecutedVolume", "StopLoss", "TakeProfit", "UtcLastUpdateTimestamp", "BookType", "Method", "BaseSlippagePrice", "ClosingOrder", "LimitPrice", "StopPrice", "ClientOrderId", "Commission", "TimeInForce", "PositionId", "RelativeStopLoss", "RelativeTakeProfit", "IntroducingBrokerCommission", "PocketCommission", "PocketMarkup", "MirroringCommission", "OriginalClientOrderId", "CheckTolerance", "Login", "Name", "LastName", "IsStopOut", "TrailingStopLoss", "CloseWithPID", "StopTriggerMethod", "StopLossTriggerMethod", "SlippageInPoints", "DesiredOpenTimestamp", "OcoOrderId", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoClosePositionDetail), global::ProtoClosePositionDetail.Parser, new[]{ "EntryPrice", "Profit", "Swap", "Commission", "Balance", "Comment", "StopLoss", "TakeProfit", "QuoteToDepositConversionRate", "ClosedVolume", "BalanceVersion", "IntroducingBrokerCommission", "PocketCommission", "PocketMarkup", "Equity", "NetProfit", "MirroringCommission", "DepositToIbDepositRate", "MinEquity", "MaxEquity", "Rebate", "BalanceHistoryId", "Markup", "EquityBasedRoi", "ClosedStake", "IbCommissionsPaid", "NonWithdrawableBonus", "StopLossTriggerMethod", "OffsetDealTimestamp", "MoneyDigits", "PnlConversionFee" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOrderAction), global::ProtoOrderAction.Parser, new[]{ "ActionId", "ActionType", "ActionStatus", "ExpirationTimestamp", "Volume", "Price", "StopLoss", "TakeProfit", "SessionId", "ClientRequestId", "Label", "Comment", "Channel", "ExecuteTimestamp", "RelativeStopLoss", "RelativeTakeProfit", "StopTriggerMethod", "StopLossTriggerMethod", "DesiredOpenTimestamp", "OcoOrderId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoDepositWithdraw), global::ProtoDepositWithdraw.Parser, new[]{ "OperationType", "BalanceHistoryId", "TraderId", "Balance", "Delta", "ChangeBalanceTimestamp", "Comment", "ExternalNote", "BalanceVersion", "Equity", "MinEquity", "MaxEquity", "NonWithdrawableBonus", "Source", "ExternalId", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoBonusDepositWithdraw), global::ProtoBonusDepositWithdraw.Parser, new[]{ "OperationType", "BonusHistoryId", "TraderId", "ManagerBonus", "ManagerDelta", "IbBonus", "IbDelta", "ChangeBonusTimestamp", "Comment", "ExternalNote", "IntroducingBrokerId", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTrader), global::ProtoTrader.Parser, new[]{ "TraderId", "Login", "GroupId", "Balance", "AccountType", "Name", "PasswordHash", "Description", "Status", "CountryId", "State", "City", "Address", "ZipCode", "Phone", "PhonePassword", "Email", "DocumentId", "RegistrationTimestamp", "LastConnectTimestamp", "Online", "UtcLastUpdateTimestamp", "Deleted", "BalanceVersion", "IntroducingBroker", "ParentIntroducingBrokerIdIsNull", "ParentIntroducingBrokerId", "IntroducingBrokerCommissionRate", "PocketCommissionRate", "PocketMarkupRate", "DefaultIntroducingBrokerCommissionRate", "DefaultPocketCommissionRate", "DefaultPocketMarkupRate", "DefaultRebateRate", "DefaultIbCommissionsType", "IbCommissionsType", "ManagerBonus", "IbBonus", "ShowPersonalData", "SplitRevenue", "RankIdIsNull", "RankId", "HasRank", "Rank", "LastName", "DefaultSplitRevenue", "AccessRights", "SendOwnStatement", "DepositAssetId", "SwapFree", "NonWithdrawableBonus", "LeverageInCents", "MoveToIBGroup", "TotalMarginCalculationType", "BrokerName", "MaxLeverage", "FreeTrades", "Version", "SubAccountOf", "MaxNOP", "DisablePasswordLogin", "IsLimitedRisk", "LimitedRiskMarginCalculationStrategy", "MoneyDigits", "ManagementFee", "SendStatementToBroker", "DefaultIbCommissionSymbolCategory", "IbCommissionSymbolCategory", "FairStopOut" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTraderRank), global::ProtoTraderRank.Parser, new[]{ "Id", "Name", "Volume", "ParentIbPercentage", "BrokerPercentage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMinimumSpreadConstraint), global::ProtoMinimumSpreadConstraint.Parser, new[]{ "Enabled", "ThresholdDigits", "Bias" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoManagerSymbol), global::ProtoManagerSymbol.Parser, new[]{ "SymbolId", "Name", "Digits", "PipPosition", "LpEnabled", "Enabled", "BidMarkUp", "AskMarkUp", "Description", "UtcLastUpdateTimestamp", "SortingNumber", "MeasurementUnits", "QuoteExpirationTimeout", "MinimumSpreadConstraint", "LotSize", "EnableShortSelling", "SymbolCategoryId", "Favorite", "Tags", "BaseAssetId", "QuoteAssetId", "TradingMode", "DefaultSwapRollover3Days", "DefaultSwapLong", "DefaultSwapShort", "DefaultLeverageId", "PriceLiquidityFeedId", "TradeLiquidityFeedId", "DefaultDividendTime", "Translation", "ScheduleProfileId", "DefaultCommissionProfileId", "DefaultVolumeProfileId", "DefaultExecutionProfileId", "AutochartistAlias", "TradingCentralAlias", "DefaultProtectionProfileId", "DefaultSwapFreeProfileId", "DefaultGSLScheduleId", "HolidayProfileId", "BbspAlias", "FuturesSettings", "DefaultTradeNotificationProfileId", "DefaultSwapTime", "DefaultSwapPeriod" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoArchivedSymbol), global::ProtoArchivedSymbol.Parser, new[]{ "SymbolId", "Name", "UtcLastUpdateTimestamp", "Description", "Digits", "PipPosition", "LotSize", "MeasurementUnits", "BaseAssetId", "UnifiedSymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLocalization), global::ProtoLocalization.Parser, new[]{ "Locale", "Title" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGroup), global::ProtoGroup.Parser, new[]{ "GroupId", "Name", "Enabled", "SwapEnabled", "SwapAndDividendProfileId", "MarginStopout", "Description", "UtcLastUpdateTimestamp", "PriceStreamId", "Deleted", "HasAccess", "Symbol", "DynamicCommission", "BonusConversionRate", "BonusConvertLots", "BonusConversionRateLots", "IsDealingDesk", "MaxAutoExecutionSizeProfileId", "BlockedChannels", "FairStopOut", "RegionId", "CopyDisabled", "StopoutDisabled", "InactivityGracePeriod", "InactivityChargePeriod", "InactivityFeeAmount", "CopyProvidingDisabled", "LegalEntityId", "DisablePasswordLogin", "AllowWorseGSL", "IsFakeSpreadBetting", "NegativeBalanceProtection", "AllowTraderChangeSO" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGroupSymbol), global::ProtoGroupSymbol.Parser, new[]{ "SymbolId", "Enabled", "LeverageId", "GslScheduleId", "CommissionProfileId", "VolumeProfileId", "ExecutionProfileId", "ProtectionProfileId", "SwapFreeProfileId", "TradeNotificationProfileId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLightGroup), global::ProtoLightGroup.Parser, new[]{ "GroupId", "Name", "Enabled", "SwapEnabled", "MarginStopout", "Description", "PriceStreamId", "Deleted", "HasAccess", "IsDealingDesk", "MaxAutoExecutionSizeProfileId", "RegionId", "CopyDisabled", "CopyProvidingDisabled", "IsFakeSpreadBetting", "NegativeBalanceProtection" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoDynamicCommission), global::ProtoDynamicCommission.Parser, new[]{ "MonthlyVolume", "Discount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoServerSetting), global::ProtoServerSetting.Parser, new[]{ "Key", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoManager), global::ProtoManager.Parser, new[]{ "ManagerId", "Login", "Enabled", "Group", "Email", "Name", "PasswordHash", "UtcLastUpdateTimestamp", "Permission", "Deleted", "RegionId", "Manager", "SpecificGroupId", "GroupMask", "DisabledBrokerName", "Template" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoCountry), global::ProtoCountry.Parser, new[]{ "CountryId", "Name", "CountryA2Code" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoExposureSymbolRecord), global::ProtoExposureSymbolRecord.Parser, new[]{ "SymbolId", "BookType", "PositionCount", "BuyVolume", "SellVolume", "BuyVwap", "SellVwap" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoAsset), global::ProtoAsset.Parser, new[]{ "AssetId", "Name", "Description", "Type", "DepositAsset", "Depositable", "DisplayName", "Major", "Digits", "CalendarAlias" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoPriceStream), global::ProtoPriceStream.Parser, new[]{ "PriceStreamId", "Name", "Description", "Deleted", "UtcLastUpdateTimestamp", "PriceStreamSymbol" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoPriceStreamSymbol), global::ProtoPriceStreamSymbol.Parser, new[]{ "SymbolId", "BidMarkup", "AskMarkup", "MarkupIsRelative" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoInterval), global::ProtoInterval.Parser, new[]{ "StartSecond", "EndSecond", "IsGlobalSessionStart", "IsGlobalSessionEnd" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLiquidityFeedSymbol), global::ProtoLiquidityFeedSymbol.Parser, new[]{ "SymbolId", "PriceAlias", "TradeAlias", "LiquidityFeedSymbolId", "LiquidityFeedId", "SendInLots", "DealExpirationTimeout", "NoQuoteTimeout", "LpLotSize", "Product" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLiquidityFeedFIXSettings), global::ProtoLiquidityFeedFIXSettings.Parser, new[]{ "Login", "SocketHost", "SocketPort", "SenderCompId", "TargetCompId", "Timezone", "SessionStartDay", "SessionStartTime", "SessionEndDay", "SessionEndTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLiquidityFeed), global::ProtoLiquidityFeed.Parser, new[]{ "LiquidityFeedId", "Type", "Name", "ConfigurationSuffix", "Enabled", "PricingFIXSettings", "TradingFIXSettings" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoDeal), global::ProtoDeal.Parser, new[]{ "DealId", "OrderId", "PositionId", "TraderId", "Volume", "FilledVolume", "SymbolId", "CreateTimestamp", "ExecutionTimestamp", "UtcLastUpdateTimestamp", "ExecutionPrice", "LimitPrice", "TradeSide", "DealStatus", "DealType", "MarginRate", "Commission", "ClientRequestId", "BookType", "LpExecutionPrice", "LpOrderId", "Label", "Channel", "Comment", "PriceSnapshotId", "BaseToUsdConversionRate", "FeedId", "ClosePositionDetail", "ServerOrderId", "IntroducingBrokerCommission", "PocketCommission", "PocketMarkup", "IntroducedByBrokerId", "MirroringCommission", "MeasurementUnits", "LotSize", "Markup", "InnerMirroringFee", "TotalVolumeInUsd", "SpreadBetting", "Stake", "DesiredVWAP", "MarketVWAP", "Tolerance", "RejectReason", "Manual", "FilledEurVolume", "FilledGbpVolume", "Equity", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLightClosingDeal), global::ProtoLightClosingDeal.Parser, new[]{ "DealId", "OrderId", "PositionId", "Volume", "FilledVolume", "SymbolId", "CreateTimestamp", "ExecutionTimestamp", "ExecutionPrice", "TradeSide", "DealStatus", "DealType", "Commission", "Label", "Channel", "Comment", "PriceSnapshotId", "BaseToUsdConversionRate", "ClosePositionDetail", "IntroducingBrokerCommission", "MirroringCommission", "LotSize", "Stake", "OffsetDeals", "MoneyDigits", "MarginRate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLightClosePositionDetail), global::ProtoLightClosePositionDetail.Parser, new[]{ "EntryPrice", "Profit", "Swap", "Commission", "Balance", "QuoteToDepositConversionRate", "ClosedVolume", "BalanceVersion", "IntroducingBrokerCommission", "MirroringCommission", "MinEquity", "MaxEquity", "OffsetDealTimestamp", "ClosedStake", "MoneyDigits", "PnlConversionFee" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLightOffsetDeal), global::ProtoLightOffsetDeal.Parser, new[]{ "DealId", "FilledVolume", "ExecutionTimestamp", "ExecutionPrice", "Stake" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoAssetClass), global::ProtoAssetClass.Parser, new[]{ "Id", "Name", "SortingNumber", "DefaultLots" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoDealOffset), global::ProtoDealOffset.Parser, new[]{ "DealId", "Volume", "Stake", "ExecutionTimestamp", "ExecutionPrice" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoStopLossTakeProfitChangeRecord), global::ProtoStopLossTakeProfitChangeRecord.Parser, new[]{ "NewStopLoss", "NewTakeProfit", "CreateTimestamp", "OrderId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoSwapCalculationRecord), global::ProtoSwapCalculationRecord.Parser, new[]{ "ChargedSwap", "CurrentSwap", "CreateTimestamp", "DepositCurrency", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTraderSessionInfo), global::ProtoTraderSessionInfo.Parser, new[]{ "SessionId", "TraderId", "ProxyId", "GeoInfo", "ApplicationType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoSymbolCategory), global::ProtoSymbolCategory.Parser, new[]{ "Id", "AssetClassId", "Name", "Color", "SortingNumber", "Expanded", "IsDefault", "IsDomEnabled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMaxAutoExecutionSizeSymbol), global::ProtoMaxAutoExecutionSizeSymbol.Parser, new[]{ "SymbolId", "MaxAutoExecutionSize" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMaxAutoExecutionSizeProfile), global::ProtoMaxAutoExecutionSizeProfile.Parser, new[]{ "ProfileId", "Name", "Description", "Symbol" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoDealingSymbol), global::ProtoDealingSymbol.Parser, new[]{ "SymbolId", "AlwaysManual" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoManualDeal), global::ProtoManualDeal.Parser, new[]{ "TraderId", "TraderLogin", "TraderName", "PositionId", "SymbolId", "OrderId", "OrderType", "TradeSide", "BookType", "ClosingOrder", "GuaranteedStopLoss", "CheckTolerance", "LimitPrice", "DesiredVWAP", "DealId", "Volume", "Stake", "TriggerPrice", "GroupId", "Reason", "Timestamp", "ManagerId", "ManagerLogin", "Markup", "StopOut", "CloseWithPID", "DepositAssetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLightSymbol), global::ProtoLightSymbol.Parser, new[]{ "Id", "SymbolCategoryId", "SortingNumber", "Name", "Description", "Tags", "Favorite", "Enabled", "BaseAssetId", "QuoteAssetId", "Translation", "UnifiedSymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoSymbolDescription), global::ProtoSymbolDescription.Parser, new[]{ "SymbolId", "LongDescription", "SymbolLogo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoDynamicLeverage), global::ProtoDynamicLeverage.Parser, new[]{ "LeverageId", "Name", "Description", "Tiers", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoDynamicLeverageTier), global::ProtoDynamicLeverageTier.Parser, new[]{ "Volume", "Leverage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGSLSchedule), global::ProtoGSLSchedule.Parser, new[]{ "ScheduleId", "Name", "Tiers" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGSLScheduleTier), global::ProtoGSLScheduleTier.Parser, new[]{ "StartTime", "Multiplier" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOrderActionIP), global::ProtoOrderActionIP.Parser, new[]{ "ActionId", "ActionIPAddress" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWithdrawRequest), global::ProtoWithdrawRequest.Parser, new[]{ "Id", "TraderId", "CreateTimestamp", "UtcLastUpdateTimestamp", "Amount", "Comment", "RequestStatus", "AssignedTo", "BrokerComment", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoScheduleProfile), global::ProtoScheduleProfile.Parser, new[]{ "ScheduleProfileId", "Name", "Description", "ScheduleTimeZone", "Interval", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoCommissionProfile), global::ProtoCommissionProfile.Parser, new[]{ "CommissionProfileId", "Name", "Description", "CommissionType", "MinCommissionType", "MinCommissionAssetId", "PreciseTradingCommissionRate", "PreciseMinCommission", "AvoidMinCommissionOnStopOut", "UtcLastUpdateTimestamp", "PnlConversionFeeRate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoVolumeProfile), global::ProtoVolumeProfile.Parser, new[]{ "VolumeProfileId", "Name", "Description", "MinVolume", "StepVolume", "MaxVolume", "MinStake", "StepStake", "MaxStake", "MaxExposure", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoExecutionProfile), global::ProtoExecutionProfile.Parser, new[]{ "ExecutionProfileId", "Name", "Description", "MinBookBDelay", "MaxBookBDelay", "ExecutionPolicy", "GslExecutionPolicy", "UtcLastUpdateTimestamp", "ConditionVolumeUsd" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoProtectionProfile), global::ProtoProtectionProfile.Parser, new[]{ "ProtectionProfileId", "Name", "Description", "GslCharge", "SlDistance", "TpDistance", "GslDistance", "DistanceSetIn", "Tolerance" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoSwapFreeProfile), global::ProtoSwapFreeProfile.Parser, new[]{ "SwapFreeProfileId", "Name", "Description", "RolloverCommission", "SkipRolloverDays", "RolloverChargePeriod", "RolloverCommission3Days", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoHoliday), global::ProtoHoliday.Parser, new[]{ "HolidayId", "Name", "Description", "ScheduleTimeZone", "HolidayDate", "IsRecurring", "StartSecond", "EndSecond" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoHolidayProfile), global::ProtoHolidayProfile.Parser, new[]{ "HolidayProfileId", "Name", "Description", "HolidayId", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoSwapAndDividendSymbol), global::ProtoSwapAndDividendSymbol.Parser, new[]{ "SymbolId", "SwapRollover3Days", "SwapLong", "SwapShort", "SwapCalculationType", "DividendsLong", "DividendsShort", "DividendTime", "SwapTime", "SwapPeriod" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoSwapAndDividendProfile), global::ProtoSwapAndDividendProfile.Parser, new[]{ "SwapAndDividendProfileId", "Name", "Description", "UtcLastUpdateTimestamp", "Symbol" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoLightSwapAndDividendProfile), global::ProtoLightSwapAndDividendProfile.Parser, new[]{ "SwapAndDividendProfileId", "Name", "Description" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoFuturesSettings), global::ProtoFuturesSettings.Parser, new[]{ "DatesTimeZone", "LastTradeTimestampInMinutes", "ExpirationTimestampInMinutes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoIbCommissionSymbolCategory), global::ProtoIbCommissionSymbolCategory.Parser, new[]{ "SymbolCategoryId", "IntroducingBrokerCommissionRate", "PocketCommissionRate", "PocketMarkupRate", "IbCommissionsType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTradeNotificationProfile), global::ProtoTradeNotificationProfile.Parser, new[]{ "TradeNotificationProfileId", "Name", "Description", "BookType", "NotifyAtCbroker", "NotifyAtEmail", "UsdVolumeCbroker", "UsdVolumeEmail", "UtcLastUpdateTimestamp", "Emails" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoManagerLightTrader), global::ProtoManagerLightTrader.Parser, new[]{ "TraderId", "Login", "GroupId", "DepositAssetId", "Name", "LastName", "RegistrationTimestamp", "SubAccountOf", "BrokerName", "StrategyProviderName", "StrategyProviderId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoInsertTrendbar), global::ProtoInsertTrendbar.Parser, new[]{ "Timestamp", "Open", "High", "Low", "Close", "Volume", "TrendbarId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoInsertTrendbarError), global::ProtoInsertTrendbarError.Parser, new[]{ "TrendbarId", "ErrorDescription" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
/// Enum for message types
/// </summary>
public enum ProtoCSPayloadType {
  [pbr::OriginalName("PROTO_SPOT_EVENT")] ProtoSpotEvent = 3,
  [pbr::OriginalName("PROTO_TRENDBAR_LIST_REQ")] ProtoTrendbarListReq = 113,
  [pbr::OriginalName("PROTO_TRENDBAR_LIST_RES")] ProtoTrendbarListRes = 114,
  [pbr::OriginalName("PROTO_ORDER_ERROR_EVENT")] ProtoOrderErrorEvent = 138,
  [pbr::OriginalName("PROTO_VERSION_REQ")] ProtoVersionReq = 154,
  [pbr::OriginalName("PROTO_VERSION_RES")] ProtoVersionRes = 155,
  [pbr::OriginalName("PROTO_MANAGER_BY_ID_REQ")] ProtoManagerByIdReq = 226,
  [pbr::OriginalName("PROTO_MANAGER_BY_ID_RES")] ProtoManagerByIdRes = 227,
  [pbr::OriginalName("PROTO_MANAGER_LIGHT_TRADER_LIST_REQ")] ProtoManagerLightTraderListReq = 228,
  [pbr::OriginalName("PROTO_MANAGER_LIGHT_TRADER_LIST_RES")] ProtoManagerLightTraderListRes = 229,
  [pbr::OriginalName("PROTO_EXECUTION_EVENT")] ProtoExecutionEvent = 300,
  [pbr::OriginalName("PROTO_MANAGER_AUTH_REQ")] ProtoManagerAuthReq = 301,
  [pbr::OriginalName("PROTO_MANAGER_AUTH_RES")] ProtoManagerAuthRes = 302,
  [pbr::OriginalName("PROTO_CHANGE_TRADER_PASSWORD_REQ")] ProtoChangeTraderPasswordReq = 303,
  [pbr::OriginalName("PROTO_CHANGE_TRADER_PASSWORD_RES")] ProtoChangeTraderPasswordRes = 304,
  [pbr::OriginalName("PROTO_CHANGE_MANAGER_PASSWORD_REQ")] ProtoChangeManagerPasswordReq = 305,
  [pbr::OriginalName("PROTO_CHANGE_MANAGER_PASSWORD_RES")] ProtoChangeManagerPasswordRes = 306,
  [pbr::OriginalName("PROTO_CHECK_TRADER_PASSWORD_REQ")] ProtoCheckTraderPasswordReq = 307,
  [pbr::OriginalName("PROTO_CHECK_TRADER_PASSWORD_RES")] ProtoCheckTraderPasswordRes = 308,
  [pbr::OriginalName("PROTO_CHECK_MANAGER_PASSWORD_REQ")] ProtoCheckManagerPasswordReq = 309,
  [pbr::OriginalName("PROTO_CHECK_MANAGER_PASSWORD_RES")] ProtoCheckManagerPasswordRes = 310,
  [pbr::OriginalName("PROTO_SERVER_TIME_REQ")] ProtoServerTimeReq = 313,
  [pbr::OriginalName("PROTO_SERVER_TIME_RES")] ProtoServerTimeRes = 314,
  [pbr::OriginalName("PROTO_ORDER_DETAILS_REQ")] ProtoOrderDetailsReq = 321,
  [pbr::OriginalName("PROTO_ORDER_DETAILS_RES")] ProtoOrderDetailsRes = 322,
  [pbr::OriginalName("PROTO_POSITION_MARGIN_CHANGED_EVENT")] ProtoPositionMarginChangedEvent = 335,
  [pbr::OriginalName("PROTO_RECALCULATE_ACCOUNT_MARGIN_REQ")] ProtoRecalculateAccountMarginReq = 336,
  [pbr::OriginalName("PROTO_RECALCULATE_ACCOUNT_MARGIN_RES")] ProtoRecalculateAccountMarginRes = 337,
  [pbr::OriginalName("PROTO_RECALCULATE_SYMBOL_MARGIN_REQ")] ProtoRecalculateSymbolMarginReq = 338,
  [pbr::OriginalName("PROTO_RECALCULATE_SYMBOL_MARGIN_RES")] ProtoRecalculateSymbolMarginRes = 339,
  [pbr::OriginalName("PROTO_RECALCULATE_DYNAMIC_LEVERAGE_REQ")] ProtoRecalculateDynamicLeverageReq = 347,
  [pbr::OriginalName("PROTO_RECALCULATE_DYNAMIC_LEVERAGE_RES")] ProtoRecalculateDynamicLeverageRes = 348,
  [pbr::OriginalName("PROTO_MANAGER_BALANCE_TRANSFER_REQ")] ProtoManagerBalanceTransferReq = 355,
  [pbr::OriginalName("PROTO_MANAGER_BALANCE_TRANSFER_RES")] ProtoManagerBalanceTransferRes = 356,
  [pbr::OriginalName("PROTO_CRUD_SCHEDULE_PROFILE_REQ")] ProtoCrudScheduleProfileReq = 360,
  [pbr::OriginalName("PROTO_CRUD_SCHEDULE_PROFILE_RES")] ProtoCrudScheduleProfileRes = 361,
  [pbr::OriginalName("PROTO_SCHEDULE_PROFILE_CHANGED_EVENT")] ProtoScheduleProfileChangedEvent = 362,
  [pbr::OriginalName("PROTO_SCHEDULE_PROFILE_LIST_REQ")] ProtoScheduleProfileListReq = 363,
  [pbr::OriginalName("PROTO_SCHEDULE_PROFILE_LIST_RES")] ProtoScheduleProfileListRes = 364,
  [pbr::OriginalName("PROTO_CRUD_COMMISSION_PROFILE_REQ")] ProtoCrudCommissionProfileReq = 365,
  [pbr::OriginalName("PROTO_CRUD_COMMISSION_PROFILE_RES")] ProtoCrudCommissionProfileRes = 366,
  [pbr::OriginalName("PROTO_COMMISSION_PROFILE_CHANGED_EVENT")] ProtoCommissionProfileChangedEvent = 367,
  [pbr::OriginalName("PROTO_COMMISSION_PROFILE_LIST_REQ")] ProtoCommissionProfileListReq = 368,
  [pbr::OriginalName("PROTO_COMMISSION_PROFILE_LIST_RES")] ProtoCommissionProfileListRes = 369,
  [pbr::OriginalName("PROTO_CRUD_VOLUME_PROFILE_REQ")] ProtoCrudVolumeProfileReq = 375,
  [pbr::OriginalName("PROTO_CRUD_VOLUME_PROFILE_RES")] ProtoCrudVolumeProfileRes = 376,
  [pbr::OriginalName("PROTO_VOLUME_PROFILE_CHANGED_EVENT")] ProtoVolumeProfileChangedEvent = 377,
  [pbr::OriginalName("PROTO_VOLUME_PROFILE_LIST_REQ")] ProtoVolumeProfileListReq = 378,
  [pbr::OriginalName("PROTO_VOLUME_PROFILE_LIST_RES")] ProtoVolumeProfileListRes = 379,
  [pbr::OriginalName("PROTO_CRUD_EXECUTION_PROFILE_REQ")] ProtoCrudExecutionProfileReq = 380,
  [pbr::OriginalName("PROTO_CRUD_EXECUTION_PROFILE_RES")] ProtoCrudExecutionProfileRes = 381,
  [pbr::OriginalName("PROTO_EXECUTION_PROFILE_CHANGED_EVENT")] ProtoExecutionProfileChangedEvent = 382,
  [pbr::OriginalName("PROTO_EXECUTION_PROFILE_LIST_REQ")] ProtoExecutionProfileListReq = 383,
  [pbr::OriginalName("PROTO_EXECUTION_PROFILE_LIST_RES")] ProtoExecutionProfileListRes = 384,
  [pbr::OriginalName("PROTO_CRUD_PROTECTION_PROFILE_REQ")] ProtoCrudProtectionProfileReq = 385,
  [pbr::OriginalName("PROTO_CRUD_PROTECTION_PROFILE_RES")] ProtoCrudProtectionProfileRes = 386,
  [pbr::OriginalName("PROTO_PROTECTION_PROFILE_CHANGED_EVENT")] ProtoProtectionProfileChangedEvent = 387,
  [pbr::OriginalName("PROTO_PROTECTION_PROFILE_LIST_REQ")] ProtoProtectionProfileListReq = 388,
  [pbr::OriginalName("PROTO_PROTECTION_PROFILE_LIST_RES")] ProtoProtectionProfileListRes = 389,
  [pbr::OriginalName("PROTO_CRUD_SWAP_FREE_PROFILE_REQ")] ProtoCrudSwapFreeProfileReq = 390,
  [pbr::OriginalName("PROTO_CRUD_SWAP_FREE_PROFILE_RES")] ProtoCrudSwapFreeProfileRes = 391,
  [pbr::OriginalName("PROTO_SWAP_FREE_PROFILE_CHANGED_EVENT")] ProtoSwapFreeProfileChangedEvent = 392,
  [pbr::OriginalName("PROTO_SWAP_FREE_PROFILE_LIST_REQ")] ProtoSwapFreeProfileListReq = 393,
  [pbr::OriginalName("PROTO_SWAP_FREE_PROFILE_LIST_RES")] ProtoSwapFreeProfileListRes = 394,
  [pbr::OriginalName("PROTO_CRUD_HOLIDAY_REQ")] ProtoCrudHolidayReq = 395,
  [pbr::OriginalName("PROTO_CRUD_HOLIDAY_RES")] ProtoCrudHolidayRes = 396,
  [pbr::OriginalName("PROTO_HOLIDAY_CHANGED_EVENT")] ProtoHolidayChangedEvent = 397,
  [pbr::OriginalName("PROTO_HOLIDAY_LIST_REQ")] ProtoHolidayListReq = 398,
  [pbr::OriginalName("PROTO_HOLIDAY_LIST_RES")] ProtoHolidayListRes = 399,
  [pbr::OriginalName("PROTO_CRUD_HOLIDAY_PROFILE_REQ")] ProtoCrudHolidayProfileReq = 400,
  [pbr::OriginalName("PROTO_CRUD_HOLIDAY_PROFILE_RES")] ProtoCrudHolidayProfileRes = 401,
  [pbr::OriginalName("PROTO_HOLIDAY_PROFILE_CHANGED_EVENT")] ProtoHolidayProfileChangedEvent = 402,
  [pbr::OriginalName("PROTO_TRADER_LIST_REQ")] ProtoTraderListReq = 403,
  [pbr::OriginalName("PROTO_TRADER_LIST_RES")] ProtoTraderListRes = 404,
  [pbr::OriginalName("PROTO_POSITION_LIST_REQ")] ProtoPositionListReq = 407,
  [pbr::OriginalName("PROTO_POSITION_LIST_RES")] ProtoPositionListRes = 408,
  [pbr::OriginalName("PROTO_PENDING_ORDER_LIST_REQ")] ProtoPendingOrderListReq = 409,
  [pbr::OriginalName("PROTO_PENDING_ORDER_LIST_RES")] ProtoPendingOrderListRes = 410,
  [pbr::OriginalName("PROTO_MANAGER_LIST_REQ")] ProtoManagerListReq = 411,
  [pbr::OriginalName("PROTO_MANAGER_LIST_RES")] ProtoManagerListRes = 412,
  [pbr::OriginalName("PROTO_BALANCE_HISTORY_LIST_REQ")] ProtoBalanceHistoryListReq = 417,
  [pbr::OriginalName("PROTO_BALANCE_HISTORY_LIST_RES")] ProtoBalanceHistoryListRes = 418,
  [pbr::OriginalName("PROTO_EXPOSURE_SYMBOL_LIST_REQ")] ProtoExposureSymbolListReq = 419,
  [pbr::OriginalName("PROTO_EXPOSURE_SYMBOL_LIST_RES")] ProtoExposureSymbolListRes = 420,
  [pbr::OriginalName("PROTO_SERVER_SETTINGS_REQ")] ProtoServerSettingsReq = 423,
  [pbr::OriginalName("PROTO_SERVER_SETTINGS_RES")] ProtoServerSettingsRes = 424,
  [pbr::OriginalName("PROTO_PRICE_STREAM_LIST_REQ")] ProtoPriceStreamListReq = 427,
  [pbr::OriginalName("PROTO_PRICE_STREAM_LIST_RES")] ProtoPriceStreamListRes = 428,
  [pbr::OriginalName("PROTO_LIQUIDITY_FEED_LIST_REQ")] ProtoLiquidityFeedListReq = 429,
  [pbr::OriginalName("PROTO_LIQUIDITY_FEED_LIST_RES")] ProtoLiquidityFeedListRes = 430,
  [pbr::OriginalName("PROTO_MANAGER_DEAL_LIST_REQ")] ProtoManagerDealListReq = 431,
  [pbr::OriginalName("PROTO_MANAGER_DEAL_LIST_RES")] ProtoManagerDealListRes = 432,
  [pbr::OriginalName("PROTO_COUNTRY_LIST_REQ")] ProtoCountryListReq = 435,
  [pbr::OriginalName("PROTO_COUNTRY_LIST_RES")] ProtoCountryListRes = 436,
  [pbr::OriginalName("PROTO_ASSET_CLASS_LIST_REQ")] ProtoAssetClassListReq = 437,
  [pbr::OriginalName("PROTO_ASSET_CLASS_LIST_RES")] ProtoAssetClassListRes = 438,
  [pbr::OriginalName("PROTO_ORDER_MANAGER_LIST_REQ")] ProtoOrderManagerListReq = 443,
  [pbr::OriginalName("PROTO_ORDER_MANAGER_LIST_RES")] ProtoOrderManagerListRes = 444,
  [pbr::OriginalName("PROTO_HOLIDAY_PROFILE_LIST_REQ")] ProtoHolidayProfileListReq = 447,
  [pbr::OriginalName("PROTO_HOLIDAY_PROFILE_LIST_RES")] ProtoHolidayProfileListRes = 448,
  [pbr::OriginalName("PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_REQ")] ProtoManagerDealListByPositionIdReq = 459,
  [pbr::OriginalName("PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_RES")] ProtoManagerDealListByPositionIdRes = 460,
  [pbr::OriginalName("PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_REQ")] ProtoManagerOrderListByPositionIdReq = 461,
  [pbr::OriginalName("PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_RES")] ProtoManagerOrderListByPositionIdRes = 462,
  [pbr::OriginalName("PROTO_SYMBOL_CATEGORY_LIST_REQ")] ProtoSymbolCategoryListReq = 463,
  [pbr::OriginalName("PROTO_SYMBOL_CATEGORY_LIST_RES")] ProtoSymbolCategoryListRes = 464,
  [pbr::OriginalName("PROTO_ASSET_LIST_REQ")] ProtoAssetListReq = 465,
  [pbr::OriginalName("PROTO_ASSET_LIST_RES")] ProtoAssetListRes = 466,
  [pbr::OriginalName("PROTO_MANAGER_SYMBOL_LIST_REQ")] ProtoManagerSymbolListReq = 467,
  [pbr::OriginalName("PROTO_MANAGER_SYMBOL_LIST_RES")] ProtoManagerSymbolListRes = 468,
  [pbr::OriginalName("PROTO_DYNAMIC_LEVERAGE_LIST_REQ")] ProtoDynamicLeverageListReq = 469,
  [pbr::OriginalName("PROTO_DYNAMIC_LEVERAGE_LIST_RES")] ProtoDynamicLeverageListRes = 470,
  [pbr::OriginalName("PROTO_GSL_SCHEDULE_LIST_REQ")] ProtoGslScheduleListReq = 471,
  [pbr::OriginalName("PROTO_GSL_SCHEDULE_LIST_RES")] ProtoGslScheduleListRes = 472,
  [pbr::OriginalName("PROTO_LIGHT_GROUP_LIST_REQ")] ProtoLightGroupListReq = 473,
  [pbr::OriginalName("PROTO_LIGHT_GROUP_LIST_RES")] ProtoLightGroupListRes = 474,
  [pbr::OriginalName("PROTO_GROUP_BY_ID_REQ")] ProtoGroupByIdReq = 475,
  [pbr::OriginalName("PROTO_GROUP_BY_ID_RES")] ProtoGroupByIdRes = 476,
  [pbr::OriginalName("PROTO_LIQUIDITY_FEED_SYMBOL_LIST_REQ")] ProtoLiquidityFeedSymbolListReq = 489,
  [pbr::OriginalName("PROTO_LIQUIDITY_FEED_SYMBOL_LIST_RES")] ProtoLiquidityFeedSymbolListRes = 490,
  [pbr::OriginalName("PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_REQ")] ProtoLightSwapAndDividendProfileListReq = 493,
  [pbr::OriginalName("PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_RES")] ProtoLightSwapAndDividendProfileListRes = 494,
  [pbr::OriginalName("PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_REQ")] ProtoSwapAndDividendProfileByIdReq = 495,
  [pbr::OriginalName("PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_RES")] ProtoSwapAndDividendProfileByIdRes = 496,
  [pbr::OriginalName("PROTO_CRUD_TRADER_REQ")] ProtoCrudTraderReq = 501,
  [pbr::OriginalName("PROTO_CRUD_TRADER_RES")] ProtoCrudTraderRes = 502,
  [pbr::OriginalName("PROTO_TRADER_CHANGED_EVENT")] ProtoTraderChangedEvent = 503,
  [pbr::OriginalName("PROTO_CRUD_GROUP_REQ")] ProtoCrudGroupReq = 504,
  [pbr::OriginalName("PROTO_CRUD_GROUP_RES")] ProtoCrudGroupRes = 505,
  [pbr::OriginalName("PROTO_GROUP_CHANGED_EVENT")] ProtoGroupChangedEvent = 506,
  [pbr::OriginalName("PROTO_CRUD_SYMBOL_REQ")] ProtoCrudSymbolReq = 507,
  [pbr::OriginalName("PROTO_CRUD_SYMBOL_RES")] ProtoCrudSymbolRes = 508,
  [pbr::OriginalName("PROTO_CRUD_MANAGER_REQ")] ProtoCrudManagerReq = 510,
  [pbr::OriginalName("PROTO_CRUD_MANAGER_RES")] ProtoCrudManagerRes = 511,
  [pbr::OriginalName("PROTO_MANAGER_CHANGED_EVENT")] ProtoManagerChangedEvent = 512,
  [pbr::OriginalName("PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_REQ")] ProtoCrudSwapAndDividendProfileReq = 513,
  [pbr::OriginalName("PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_RES")] ProtoCrudSwapAndDividendProfileRes = 514,
  [pbr::OriginalName("PROTO_SWAP_AND_DIVIDEND_PROFILE_CHANGED_EVENT")] ProtoSwapAndDividendProfileChangedEvent = 515,
  [pbr::OriginalName("PROTO_UPDATE_SERVER_SETTINGS_REQ")] ProtoUpdateServerSettingsReq = 516,
  [pbr::OriginalName("PROTO_UPDATE_SERVER_SETTINGS_RES")] ProtoUpdateServerSettingsRes = 517,
  [pbr::OriginalName("PROTO_SERVER_SETTINGS_CHANGED_EVENT")] ProtoServerSettingsChangedEvent = 518,
  [pbr::OriginalName("PROTO_CHANGE_BALANCE_REQ")] ProtoChangeBalanceReq = 519,
  [pbr::OriginalName("PROTO_CHANGE_BALANCE_RES")] ProtoChangeBalanceRes = 520,
  [pbr::OriginalName("PROTO_PRICE_STREAM_CREATE_REQ")] ProtoPriceStreamCreateReq = 527,
  [pbr::OriginalName("PROTO_PRICE_STREAM_CREATE_RES")] ProtoPriceStreamCreateRes = 528,
  [pbr::OriginalName("PROTO_PRICE_STREAM_DELETE_REQ")] ProtoPriceStreamDeleteReq = 529,
  [pbr::OriginalName("PROTO_PRICE_STREAM_DELETE_RES")] ProtoPriceStreamDeleteRes = 530,
  [pbr::OriginalName("PROTO_PRICE_STREAM_UPDATE_REQ")] ProtoPriceStreamUpdateReq = 531,
  [pbr::OriginalName("PROTO_PRICE_STREAM_UPDATE_RES")] ProtoPriceStreamUpdateRes = 532,
  [pbr::OriginalName("PROTO_PRICE_STREAM_CHANGED_EVENT")] ProtoPriceStreamChangedEvent = 533,
  [pbr::OriginalName("PROTO_CRUD_ASSET_REQ")] ProtoCrudAssetReq = 538,
  [pbr::OriginalName("PROTO_CRUD_ASSET_RES")] ProtoCrudAssetRes = 539,
  [pbr::OriginalName("PROTO_ASSET_CHANGED_EVENT")] ProtoAssetChangedEvent = 540,
  [pbr::OriginalName("PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_REQ")] ProtoCrudLiquidityFeedSymbolReq = 545,
  [pbr::OriginalName("PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_RES")] ProtoCrudLiquidityFeedSymbolRes = 546,
  [pbr::OriginalName("PROTO_LIQUIDITY_FEED_SYMBOL_CHANGED_EVENT")] ProtoLiquidityFeedSymbolChangedEvent = 547,
  [pbr::OriginalName("PROTO_INSERT_TRENDBAR_REQ")] ProtoInsertTrendbarReq = 551,
  [pbr::OriginalName("PROTO_INSERT_TRENDBAR_RES")] ProtoInsertTrendbarRes = 552,
  [pbr::OriginalName("PROTO_MANAGER_SYMBOL_CHANGED_EVENT")] ProtoManagerSymbolChangedEvent = 558,
  [pbr::OriginalName("PROTO_CRUD_DYNAMIC_LEVERAGE_REQ")] ProtoCrudDynamicLeverageReq = 559,
  [pbr::OriginalName("PROTO_CRUD_DYNAMIC_LEVERAGE_RES")] ProtoCrudDynamicLeverageRes = 560,
  [pbr::OriginalName("PROTO_DYNAMIC_LEVERAGE_CHANGED_EVENT")] ProtoDynamicLeverageChangedEvent = 561,
  [pbr::OriginalName("PROTO_TRADER_PERMISSION_LOSE_EVENT")] ProtoTraderPermissionLoseEvent = 562,
  [pbr::OriginalName("PROTO_CRUD_GSL_SCHEDULE_REQ")] ProtoCrudGslScheduleReq = 563,
  [pbr::OriginalName("PROTO_CRUD_GSL_SCHEDULE_RES")] ProtoCrudGslScheduleRes = 564,
  [pbr::OriginalName("PROTO_GSL_SCHEDULE_CHANGED_EVENT")] ProtoGslScheduleChangedEvent = 565,
  [pbr::OriginalName("PROTO_CREATE_SYMBOL_REQ")] ProtoCreateSymbolReq = 571,
  [pbr::OriginalName("PROTO_CREATE_SYMBOL_RES")] ProtoCreateSymbolRes = 572,
  [pbr::OriginalName("PROTO_SYMBOL_ARCHIVED_EVENT")] ProtoSymbolArchivedEvent = 575,
  [pbr::OriginalName("PROTO_SYMBOL_RESTORED_EVENT")] ProtoSymbolRestoredEvent = 580,
  [pbr::OriginalName("PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_REQ")] ProtoCrudTradeNotificationProfileReq = 581,
  [pbr::OriginalName("PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_RES")] ProtoCrudTradeNotificationProfileRes = 582,
  [pbr::OriginalName("PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_CHANGED_EVENT")] ProtoCrudTradeNotificationProfileChangedEvent = 583,
  [pbr::OriginalName("PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_REQ")] ProtoCrudTradeNotificationProfileListReq = 584,
  [pbr::OriginalName("PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_RES")] ProtoCrudTradeNotificationProfileListRes = 585,
  [pbr::OriginalName("PROTO_DELETE_TRENDBAR_REQ")] ProtoDeleteTrendbarReq = 586,
  [pbr::OriginalName("PROTO_DELETE_TRENDBAR_RES")] ProtoDeleteTrendbarRes = 587,
  [pbr::OriginalName("PROTO_SUBSCRIBE_SPOT_QUOTES_REQ")] ProtoSubscribeSpotQuotesReq = 601,
  [pbr::OriginalName("PROTO_SUBSCRIBE_SPOT_QUOTES_RES")] ProtoSubscribeSpotQuotesRes = 602,
  [pbr::OriginalName("PROTO_UNSUBSCRIBE_SPOT_QUOTES_REQ")] ProtoUnsubscribeSpotQuotesReq = 608,
  [pbr::OriginalName("PROTO_UNSUBSCRIBE_SPOT_QUOTES_RES")] ProtoUnsubscribeSpotQuotesRes = 609,
  [pbr::OriginalName("PROTO_TRADER_BY_ID_REQ")] ProtoTraderByIdReq = 703,
  [pbr::OriginalName("PROTO_TRADER_BY_ID_RES")] ProtoTraderByIdRes = 704,
  [pbr::OriginalName("PROTO_MANAGER_GET_DEAL_REQ")] ProtoManagerGetDealReq = 709,
  [pbr::OriginalName("PROTO_MANAGER_GET_DEAL_RES")] ProtoManagerGetDealRes = 711,
  [pbr::OriginalName("PROTO_MANAGER_CLOSED_POSITION_LIST_REQ")] ProtoManagerClosedPositionListReq = 720,
  [pbr::OriginalName("PROTO_MANAGER_CLOSED_POSITION_LIST_RES")] ProtoManagerClosedPositionListRes = 721,
  [pbr::OriginalName("PROTO_TRADER_LOGON_EVENT")] ProtoTraderLogonEvent = 730,
  [pbr::OriginalName("PROTO_TRADER_LOGOUT_EVENT")] ProtoTraderLogoutEvent = 731,
  [pbr::OriginalName("PROTO_MANAGER_NEW_ORDER_REQ")] ProtoManagerNewOrderReq = 738,
  [pbr::OriginalName("PROTO_MANAGER_AMEND_ORDER_REQ")] ProtoManagerAmendOrderReq = 739,
  [pbr::OriginalName("PROTO_MANAGER_CANCEL_ORDER_REQ")] ProtoManagerCancelOrderReq = 740,
  [pbr::OriginalName("PROTO_MANAGER_AMEND_POSITION_REQ")] ProtoManagerAmendPositionReq = 741,
  [pbr::OriginalName("PROTO_MANAGER_CLOSE_POSITION_REQ")] ProtoManagerClosePositionReq = 742,
  [pbr::OriginalName("PROTO_REBUILD_TRENDBARS_REQ")] ProtoRebuildTrendbarsReq = 752,
  [pbr::OriginalName("PROTO_REBUILD_TRENDBARS_RES")] ProtoRebuildTrendbarsRes = 753,
  [pbr::OriginalName("PROTO_POSITION_DETAILS_LITE_REQ")] ProtoPositionDetailsLiteReq = 754,
  [pbr::OriginalName("PROTO_POSITION_DETAILS_LITE_RES")] ProtoPositionDetailsLiteRes = 755,
  [pbr::OriginalName("PROTO_MANAGER_CHANGE_BONUS_REQ")] ProtoManagerChangeBonusReq = 780,
  [pbr::OriginalName("PROTO_MANAGER_CHANGE_BONUS_RES")] ProtoManagerChangeBonusRes = 781,
  [pbr::OriginalName("PROTO_BONUS_HISTORY_LIST_REQ")] ProtoBonusHistoryListReq = 786,
  [pbr::OriginalName("PROTO_BONUS_HISTORY_LIST_RES")] ProtoBonusHistoryListRes = 787,
  [pbr::OriginalName("PROTO_LIQUIDITY_FEED_STATUS_REQ")] ProtoLiquidityFeedStatusReq = 804,
  [pbr::OriginalName("PROTO_LIQUIDITY_FEED_STATUS_RES")] ProtoLiquidityFeedStatusRes = 805,
  [pbr::OriginalName("PROTO_DEALING_SETTINGS_REQ")] ProtoDealingSettingsReq = 816,
  [pbr::OriginalName("PROTO_DEALING_SETTINGS_RES")] ProtoDealingSettingsRes = 817,
  [pbr::OriginalName("PROTO_UPDATE_DEALING_SETTINGS_REQ")] ProtoUpdateDealingSettingsReq = 818,
  [pbr::OriginalName("PROTO_UPDATE_DEALING_SETTINGS_RES")] ProtoUpdateDealingSettingsRes = 819,
  [pbr::OriginalName("PROTO_NEW_MANUAL_DEAL_EVENT")] ProtoNewManualDealEvent = 820,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_LIST_REQ")] ProtoManualDealListReq = 821,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_LIST_RES")] ProtoManualDealListRes = 822,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_CLAIM_REQ")] ProtoManualDealClaimReq = 823,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_CLAIM_RES")] ProtoManualDealClaimRes = 824,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_CLAIMED_EVENT")] ProtoManualDealClaimedEvent = 825,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_UNCLAIM_REQ")] ProtoManualDealUnclaimReq = 826,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_UNCLAIM_RES")] ProtoManualDealUnclaimRes = 827,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_UNCLAIMED_EVENT")] ProtoManualDealUnclaimedEvent = 828,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_RESET_REQ")] ProtoManualDealResetReq = 829,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_RESET_RES")] ProtoManualDealResetRes = 830,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_REJECT_REQ")] ProtoManualDealRejectReq = 831,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_REJECT_RES")] ProtoManualDealRejectRes = 832,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_EXECUTE_REQ")] ProtoManualDealExecuteReq = 833,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_EXECUTE_RES")] ProtoManualDealExecuteRes = 834,
  [pbr::OriginalName("PROTO_MANUAL_DEAL_PROCESSED_EVENT")] ProtoManualDealProcessedEvent = 835,
  [pbr::OriginalName("PROTO_DEALER_NEW_ORDER_REQ")] ProtoDealerNewOrderReq = 836,
  [pbr::OriginalName("PROTO_DEALER_AMEND_ORDER_REQ")] ProtoDealerAmendOrderReq = 837,
  [pbr::OriginalName("PROTO_DEALER_CANCEL_ORDER_REQ")] ProtoDealerCancelOrderReq = 838,
  [pbr::OriginalName("PROTO_DEALER_AMEND_POSITION_REQ")] ProtoDealerAmendPositionReq = 839,
  [pbr::OriginalName("PROTO_DEALER_CLOSE_POSITION_REQ")] ProtoDealerClosePositionReq = 840,
  [pbr::OriginalName("PROTO_DEALING_SETTINGS_UPDATED_EVENT")] ProtoDealingSettingsUpdatedEvent = 843,
  [pbr::OriginalName("PROTO_ASSET_CLASS_CHANGED_EVENT")] ProtoAssetClassChangedEvent = 846,
  [pbr::OriginalName("PROTO_ASSET_CLASS_DELETED_EVENT")] ProtoAssetClassDeletedEvent = 847,
  [pbr::OriginalName("PROTO_SYMBOL_CATEGORY_CHANGED_EVENT")] ProtoSymbolCategoryChangedEvent = 848,
  [pbr::OriginalName("PROTO_SYMBOL_CATEGORY_DELETED_EVENT")] ProtoSymbolCategoryDeletedEvent = 849,
  [pbr::OriginalName("PROTO_MANAGER_GET_AUTH_TOKEN_REQ")] ProtoManagerGetAuthTokenReq = 850,
  [pbr::OriginalName("PROTO_MANAGER_GET_AUTH_TOKEN_RES")] ProtoManagerGetAuthTokenRes = 851,
  [pbr::OriginalName("PROTO_SYMBOLS_FOR_CONVERSION_REQ")] ProtoSymbolsForConversionReq = 864,
  [pbr::OriginalName("PROTO_SYMBOLS_FOR_CONVERSION_RES")] ProtoSymbolsForConversionRes = 865,
  [pbr::OriginalName("PROTO_FORCE_CLOSE_POSITION_REQ")] ProtoForceClosePositionReq = 870,
  [pbr::OriginalName("PROTO_FORCE_OPEN_POSITION_REQ")] ProtoForceOpenPositionReq = 871,
  [pbr::OriginalName("PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_REQ")] ProtoCrudMaxAutoExecutionSizeProfileReq = 883,
  [pbr::OriginalName("PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_RES")] ProtoCrudMaxAutoExecutionSizeProfileRes = 884,
  [pbr::OriginalName("PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_CHANGED_EVENT")] ProtoCrudMaxAutoExecutionSizeProfileChangedEvent = 885,
  [pbr::OriginalName("PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_REQ")] ProtoCrudMaxAutoExecutionSizeProfileListReq = 886,
  [pbr::OriginalName("PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_RES")] ProtoCrudMaxAutoExecutionSizeProfileListRes = 887,
  [pbr::OriginalName("PROTO_HELLO_EVENT")] ProtoHelloEvent = 990,
}

/// <summary>
/// Enum for error codes for server. Note that there are also some error codes in common messages
/// </summary>
public enum ProtoCSErrorCode {
  [pbr::OriginalName("NOT_ENOUGH_MONEY")] NotEnoughMoney = 1,
  [pbr::OriginalName("NOT_ENOUGH_RIGHTS")] NotEnoughRights = 2,
  [pbr::OriginalName("AUTHENTICATION_FAILED")] AuthenticationFailed = 3,
  [pbr::OriginalName("POSITION_NOT_FOUND")] PositionNotFound = 4,
  [pbr::OriginalName("POSITION_LOCKED")] PositionLocked = 5,
  [pbr::OriginalName("CHANGE_BALANCE_BAD_AMOUNT")] ChangeBalanceBadAmount = 6,
  [pbr::OriginalName("NO_QUOTES")] NoQuotes = 7,
  [pbr::OriginalName("TRADING_DISABLED")] TradingDisabled = 8,
  [pbr::OriginalName("TRADING_NOT_ALLOWED")] TradingNotAllowed = 9,
  [pbr::OriginalName("TRADING_BAD_VOLUME")] TradingBadVolume = 10,
  [pbr::OriginalName("TRADER_NOT_FOUND")] TraderNotFound = 11,
  [pbr::OriginalName("TRADER_GROUP_NOT_FOUND")] TraderGroupNotFound = 12,
  [pbr::OriginalName("RECONCILIATION_IN_PROGRESS")] ReconciliationInProgress = 13,
  [pbr::OriginalName("ALREADY_LOGGED_IN")] AlreadyLoggedIn = 14,
  [pbr::OriginalName("TOO_MANY_POSITIONS")] TooManyPositions = 16,
  [pbr::OriginalName("ORDER_NOT_FOUND")] OrderNotFound = 17,
  [pbr::OriginalName("TRADING_BAD_STOPS")] TradingBadStops = 18,
  [pbr::OriginalName("ALREADY_DELETED")] AlreadyDeleted = 19,
  [pbr::OriginalName("WRONG_LEVERAGE")] WrongLeverage = 20,
  [pbr::OriginalName("TRADING_BAD_EXPIRATION_DATE")] TradingBadExpirationDate = 21,
  [pbr::OriginalName("ALREADY_SUBSCRIBED")] AlreadySubscribed = 22,
  [pbr::OriginalName("REQUEST_FREQUENCY_EXCEEDED")] RequestFrequencyExceeded = 23,
  [pbr::OriginalName("POSITION_NOT_OPEN")] PositionNotOpen = 24,
  [pbr::OriginalName("WRONG_TIME_SEQUENCE")] WrongTimeSequence = 25,
  [pbr::OriginalName("FORBID_WITH_TRADING_ENABLED")] ForbidWithTradingEnabled = 26,
  [pbr::OriginalName("INCORRECT_POSITION_ID")] IncorrectPositionId = 27,
  [pbr::OriginalName("TRADER_HAS_POSITIONS")] TraderHasPositions = 28,
  [pbr::OriginalName("UNKNOWN_LIQIDITY_FEED")] UnknownLiqidityFeed = 29,
  [pbr::OriginalName("ASSET_CLASS_ALREADY_EXIST")] AssetClassAlreadyExist = 30,
  [pbr::OriginalName("ASSET_CLASS_IS_NOT_EMPTY")] AssetClassIsNotEmpty = 31,
  [pbr::OriginalName("TRADING_BAD_PRICES")] TradingBadPrices = 32,
  [pbr::OriginalName("UNABLE_TO_FORWARD_COMMAND")] UnableToForwardCommand = 33,
  [pbr::OriginalName("UNKNOWN_SYMBOL")] UnknownSymbol = 34,
  [pbr::OriginalName("INCORRECT_BOUNDARIES")] IncorrectBoundaries = 35,
  [pbr::OriginalName("SYMBOL_NOT_FOUND")] SymbolNotFound = 36,
  [pbr::OriginalName("DEAL_NOT_FOUND")] DealNotFound = 37,
  [pbr::OriginalName("POSITION_CONCURRENT_CHANGE")] PositionConcurrentChange = 38,
  [pbr::OriginalName("NOT_INTRODUCING_BROKER")] NotIntroducingBroker = 39,
  [pbr::OriginalName("INTRODUCING_BROKER_CYCLE")] IntroducingBrokerCycle = 40,
  [pbr::OriginalName("UNABLE_TO_CANCEL_ORDER")] UnableToCancelOrder = 41,
  [pbr::OriginalName("UNABLE_TO_AMEND_ORDER")] UnableToAmendOrder = 42,
  [pbr::OriginalName("UNKNOWN_DEPOSIT_CURRENCY")] UnknownDepositCurrency = 43,
  [pbr::OriginalName("DEPOSIT_CURRENCY_NOT_ALLOWED")] DepositCurrencyNotAllowed = 44,
  [pbr::OriginalName("SHORT_SELLING_NOT_ALLOWED")] ShortSellingNotAllowed = 45,
  [pbr::OriginalName("CHANGE_BONUS_BAD_AMOUNT")] ChangeBonusBadAmount = 46,
  [pbr::OriginalName("SERVER_IS_UNDER_MAINTENANCE")] ServerIsUnderMaintenance = 47,
  [pbr::OriginalName("TRADING_BAD_STAKE")] TradingBadStake = 48,
  [pbr::OriginalName("GUI_SETTINGS_NOT_FOUND")] GuiSettingsNotFound = 49,
  [pbr::OriginalName("PROTECTION_IS_TOO_CLOSE_TO_MARKET")] ProtectionIsTooCloseToMarket = 50,
  [pbr::OriginalName("ORDER_TYPE_NOT_ALLOWED")] OrderTypeNotAllowed = 51,
  [pbr::OriginalName("INVALID_DATA")] InvalidData = 52,
  [pbr::OriginalName("NO_SUCH_LOGIN")] NoSuchLogin = 53,
  [pbr::OriginalName("MAX_EXPOSURE_REACHED")] MaxExposureReached = 54,
  [pbr::OriginalName("PENDING_EXECUTION")] PendingExecution = 55,
  [pbr::OriginalName("FORBID_WITH_SUBSCRIPTION_ENABLED")] ForbidWithSubscriptionEnabled = 56,
  [pbr::OriginalName("NOT_SUBSCRIBED_TO_SPOTS")] NotSubscribedToSpots = 57,
  [pbr::OriginalName("DAILY_EQUITY_NOT_FOUND")] DailyEquityNotFound = 58,
  [pbr::OriginalName("STRATEGY_NOT_FOUND")] StrategyNotFound = 59,
  [pbr::OriginalName("SYMBOL_NAME_ALREADY_EXIST")] SymbolNameAlreadyExist = 60,
  [pbr::OriginalName("HIDDEN_HISTORY")] HiddenHistory = 61,
  [pbr::OriginalName("OPERATION_NOT_ALLOWED")] OperationNotAllowed = 62,
  [pbr::OriginalName("CHANNEL_IS_BLOCKED")] ChannelIsBlocked = 63,
  [pbr::OriginalName("NOT_SUBSCRIBED_TO_DEPTHS")] NotSubscribedToDepths = 64,
  [pbr::OriginalName("SQA_NOT_ACTIVATED")] SqaNotActivated = 65,
  [pbr::OriginalName("SQA_ALREADY_ACTIVATED")] SqaAlreadyActivated = 66,
  [pbr::OriginalName("CONNECTIONS_LIMIT_EXCEEDED")] ConnectionsLimitExceeded = 67,
  [pbr::OriginalName("WORSE_GSL_NOT_ALLOWED")] WorseGslNotAllowed = 68,
  [pbr::OriginalName("SYMBOL_HAS_HOLIDAY")] SymbolHasHoliday = 69,
  [pbr::OriginalName("RESERVED_3")] Reserved3 = 70,
  [pbr::OriginalName("RESERVED_4")] Reserved4 = 71,
  [pbr::OriginalName("RESERVED_5")] Reserved5 = 72,
}

/// <summary>
/// Enum type for request result
/// </summary>
public enum ProtoResultCode {
  [pbr::OriginalName("RET_OK")] RetOk = 0,
  [pbr::OriginalName("RET_OK_NONE")] RetOkNone = 1,
  [pbr::OriginalName("RET_ERROR")] RetError = 2,
  [pbr::OriginalName("RET_INVALID_DATA")] RetInvalidData = 3,
  [pbr::OriginalName("RET_TECH_PROBLEM")] RetTechProblem = 4,
  [pbr::OriginalName("RET_OLD_VERSION")] RetOldVersion = 5,
  [pbr::OriginalName("RET_NO_CONNECT")] RetNoConnect = 6,
  [pbr::OriginalName("RET_NOT_ENOUGH_RIGHTS")] RetNotEnoughRights = 7,
  [pbr::OriginalName("RET_TOO_FREQUENT")] RetTooFrequent = 8,
  [pbr::OriginalName("RET_MALFUNCTION")] RetMalfunction = 9,
  [pbr::OriginalName("RET_GENERATE_KEY")] RetGenerateKey = 10,
  [pbr::OriginalName("RET_SECURITY_SESSION")] RetSecuritySession = 11,
  [pbr::OriginalName("RET_NO_SUCH_LOGIN")] RetNoSuchLogin = 12,
  [pbr::OriginalName("RET_ACCOUNT_DISABLED")] RetAccountDisabled = 64,
  [pbr::OriginalName("RET_BAD_ACCOUNT_INFO")] RetBadAccountInfo = 65,
  [pbr::OriginalName("RET_PUBLIC_KEY_MISSING")] RetPublicKeyMissing = 66,
  [pbr::OriginalName("RET_TRADE_TIMEOUT")] RetTradeTimeout = 128,
  [pbr::OriginalName("RET_TRADE_BAD_PRICES")] RetTradeBadPrices = 129,
  [pbr::OriginalName("RET_TRADE_BAD_STOPS")] RetTradeBadStops = 130,
  [pbr::OriginalName("RET_TRADE_BAD_VOLUME")] RetTradeBadVolume = 131,
  [pbr::OriginalName("RET_TRADE_MARKET_CLOSED")] RetTradeMarketClosed = 132,
  [pbr::OriginalName("RET_TRADE_DISABLE")] RetTradeDisable = 133,
  [pbr::OriginalName("RET_TRADE_NO_MONEY")] RetTradeNoMoney = 134,
  [pbr::OriginalName("RET_TRADE_PRICE_CHANGED")] RetTradePriceChanged = 135,
  [pbr::OriginalName("RET_TRADE_BROKER_BUSY")] RetTradeBrokerBusy = 136,
  [pbr::OriginalName("RET_TRADE_REQUOTE")] RetTradeRequote = 137,
  [pbr::OriginalName("RET_TRADE_ORDER_LOCKED")] RetTradeOrderLocked = 138,
  [pbr::OriginalName("RET_TRADE_LONG_ONLY")] RetTradeLongOnly = 139,
  [pbr::OriginalName("RET_TRADE_TOO_MANY_REQ")] RetTradeTooManyReq = 140,
  [pbr::OriginalName("RET_TRADE_ACCEPTED")] RetTradeAccepted = 141,
  [pbr::OriginalName("RET_TRADE_PROCESS")] RetTradeProcess = 142,
  [pbr::OriginalName("RET_TRADE_USER_CANCEL")] RetTradeUserCancel = 143,
  [pbr::OriginalName("RET_TRADE_MODIFY_DENIED")] RetTradeModifyDenied = 144,
  [pbr::OriginalName("RET_TRADE_CONTEXT_BUSY")] RetTradeContextBusy = 145,
  [pbr::OriginalName("RET_TRADE_EXPIRATION_DENIED")] RetTradeExpirationDenied = 146,
  [pbr::OriginalName("RET_TRADE_TOO_MANY_ORDERS")] RetTradeTooManyOrders = 147,
  [pbr::OriginalName("RET_TRADE_HEDGE_PROHIBITED")] RetTradeHedgeProhibited = 148,
  [pbr::OriginalName("RET_TRADE_MAX_EXPOSURE_REACHED")] RetTradeMaxExposureReached = 149,
  [pbr::OriginalName("RET_PENDING_EXECUTION")] RetPendingExecution = 150,
  [pbr::OriginalName("RET_FORBID_WITH_SUBSCRIPTION_ENABLED")] RetForbidWithSubscriptionEnabled = 151,
  [pbr::OriginalName("RET_NOT_SUBSCRIBED_TO_SPOTS")] RetNotSubscribedToSpots = 152,
  [pbr::OriginalName("RET_DAILY_EQUITY_NOT_FOUND")] RetDailyEquityNotFound = 153,
  [pbr::OriginalName("RET_STRATEGY_NOT_FOUND")] RetStrategyNotFound = 154,
  [pbr::OriginalName("RET_NOT_SUBSCRIBED_TO_DEPTHS")] RetNotSubscribedToDepths = 155,
  [pbr::OriginalName("RET_RESERVED_1")] RetReserved1 = 156,
  [pbr::OriginalName("RET_RESERVED_2")] RetReserved2 = 157,
  [pbr::OriginalName("RET_RESERVED_3")] RetReserved3 = 158,
}

/// <summary>
/// Type of Order related action
/// </summary>
public enum ProtoActionType {
  [pbr::OriginalName("ACTION_CREATE_STOP_LOSS_TAKE_PROFIT")] ActionCreateStopLossTakeProfit = 1,
  [pbr::OriginalName("ACTION_AMEND_STOP_LOSS_TAKE_PROFIT")] ActionAmendStopLossTakeProfit = 2,
  [pbr::OriginalName("ACTION_CANCEL_STOP_LOSS_TAKE_PROFIT")] ActionCancelStopLossTakeProfit = 3,
  [pbr::OriginalName("ACTION_CREATE_CLOSING_ORDER")] ActionCreateClosingOrder = 4,
  [pbr::OriginalName("ACTION_CREATE_ORDER")] ActionCreateOrder = 5,
  [pbr::OriginalName("ACTION_CANCEL_PENDING_ORDER")] ActionCancelPendingOrder = 6,
  [pbr::OriginalName("ACTION_AMEND_OPEN_PENDING_ORDER")] ActionAmendOpenPendingOrder = 7,
  [pbr::OriginalName("ACTION_CREATE_OCO_LINK")] ActionCreateOcoLink = 8,
  [pbr::OriginalName("ACTION_CANCEL_OCO_LINK")] ActionCancelOcoLink = 9,
}

/// <summary>
/// Status of Order related action
/// </summary>
public enum ProtoActionStatus {
  [pbr::OriginalName("ACTION_PENDING")] ActionPending = 1,
  [pbr::OriginalName("ACTION_STARTED")] ActionStarted = 2,
  [pbr::OriginalName("ACTION_PASSED")] ActionPassed = 3,
  [pbr::OriginalName("ACTION_FAILED")] ActionFailed = 4,
  [pbr::OriginalName("ACTION_ERROR")] ActionError = 5,
}

/// <summary>
/// Balance operation entity type ENUM
/// </summary>
public enum ProtoChangeBalanceType {
  [pbr::OriginalName("BALANCE_DEPOSIT")] BalanceDeposit = 0,
  [pbr::OriginalName("BALANCE_WITHDRAW")] BalanceWithdraw = 1,
  [pbr::OriginalName("BALANCE_CLOSE_POSITION")] BalanceClosePosition = 2,
  [pbr::OriginalName("BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER")] BalanceDepositStrategyCommissionInner = 3,
  [pbr::OriginalName("BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER")] BalanceWithdrawStrategyCommissionInner = 4,
  [pbr::OriginalName("BALANCE_DEPOSIT_IB_COMMISSIONS")] BalanceDepositIbCommissions = 5,
  [pbr::OriginalName("BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE")] BalanceWithdrawIbSharedPercentage = 6,
  [pbr::OriginalName("BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB")] BalanceDepositIbSharedPercentageFromSubIb = 7,
  [pbr::OriginalName("BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER")] BalanceDepositIbSharedPercentageFromBroker = 8,
  [pbr::OriginalName("BALANCE_DEPOSIT_REBATE")] BalanceDepositRebate = 9,
  [pbr::OriginalName("BALANCE_WITHDRAW_REBATE")] BalanceWithdrawRebate = 10,
  [pbr::OriginalName("BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER")] BalanceDepositStrategyCommissionOuter = 11,
  [pbr::OriginalName("BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER")] BalanceWithdrawStrategyCommissionOuter = 12,
  [pbr::OriginalName("BALANCE_WITHDRAW_BONUS_COMPENSATION")] BalanceWithdrawBonusCompensation = 13,
  [pbr::OriginalName("BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER")] BalanceWithdrawIbSharedPercentageToBroker = 14,
  [pbr::OriginalName("BALANCE_DEPOSIT_DIVIDENDS")] BalanceDepositDividends = 15,
  [pbr::OriginalName("BALANCE_WITHDRAW_DIVIDENDS")] BalanceWithdrawDividends = 16,
  [pbr::OriginalName("BALANCE_WITHDRAW_GSL_CHARGE")] BalanceWithdrawGslCharge = 17,
  [pbr::OriginalName("BALANCE_WITHDRAW_ROLLOVER")] BalanceWithdrawRollover = 18,
  [pbr::OriginalName("BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS")] BalanceDepositNonwithdrawableBonus = 19,
  [pbr::OriginalName("BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS")] BalanceWithdrawNonwithdrawableBonus = 20,
  [pbr::OriginalName("BALANCE_DEPOSIT_SWAP")] BalanceDepositSwap = 21,
  [pbr::OriginalName("BALANCE_WITHDRAW_SWAP")] BalanceWithdrawSwap = 22,
  [pbr::OriginalName("BALANCE_WITHDRAW_INVESTMENT_TO_STRATEGY")] BalanceWithdrawInvestmentToStrategy = 23,
  [pbr::OriginalName("BALANCE_DEPOSIT_FROM_INVESTOR")] BalanceDepositFromInvestor = 24,
  [pbr::OriginalName("BALANCE_DEPOSIT_RETURNED_INVESTMENT")] BalanceDepositReturnedInvestment = 25,
  [pbr::OriginalName("BALANCE_WITHDRAW_BY_INVESTOR")] BalanceWithdrawByInvestor = 26,
  [pbr::OriginalName("BALANCE_DEPOSIT_MANAGEMENT_FEE")] BalanceDepositManagementFee = 27,
  [pbr::OriginalName("BALANCE_WITHDRAW_MANAGEMENT_FEE")] BalanceWithdrawManagementFee = 28,
  [pbr::OriginalName("BALANCE_DEPOSIT_PERFORMANCE_FEE")] BalanceDepositPerformanceFee = 29,
  [pbr::OriginalName("BALANCE_WITHDRAW_FOR_SUBACCOUNT")] BalanceWithdrawForSubaccount = 30,
  [pbr::OriginalName("BALANCE_DEPOSIT_TO_SUBACCOUNT")] BalanceDepositToSubaccount = 31,
  [pbr::OriginalName("BALANCE_WITHDRAW_FROM_SUBACCOUNT")] BalanceWithdrawFromSubaccount = 32,
  [pbr::OriginalName("BALANCE_DEPOSIT_FROM_SUBACCOUNT")] BalanceDepositFromSubaccount = 33,
  [pbr::OriginalName("BALANCE_WITHDRAW_COPY_FEE")] BalanceWithdrawCopyFee = 34,
  [pbr::OriginalName("BALANCE_WITHDRAW_INACTIVITY_FEE")] BalanceWithdrawInactivityFee = 35,
  [pbr::OriginalName("BALANCE_DEPOSIT_TRANSFER")] BalanceDepositTransfer = 36,
  [pbr::OriginalName("BALANCE_WITHDRAW_TRANSFER")] BalanceWithdrawTransfer = 37,
  [pbr::OriginalName("BALANCE_DEPOSIT_CONVERTED_BONUS")] BalanceDepositConvertedBonus = 38,
  [pbr::OriginalName("BALANCE_DEPOSIT_NEGATIVE_BALANCE_PROTECTION")] BalanceDepositNegativeBalanceProtection = 39,
  [pbr::OriginalName("BALANCE_RESERVED_1")] BalanceReserved1 = 40,
  [pbr::OriginalName("BALANCE_RESERVED_2")] BalanceReserved2 = 41,
  [pbr::OriginalName("BALANCE_RESERVED_3")] BalanceReserved3 = 42,
}

/// <summary>
/// Bonus operation type ENUM
/// </summary>
public enum ProtoChangeBonusType {
  [pbr::OriginalName("BONUS_DEPOSIT")] BonusDeposit = 0,
  [pbr::OriginalName("BONUS_WITHDRAW")] BonusWithdraw = 1,
}

/// <summary>
/// Position's status type ENUM
/// </summary>
public enum ProtoPositionStatus {
  [pbr::OriginalName("POSITION_STATUS_OPEN")] PositionStatusOpen = 1,
  [pbr::OriginalName("POSITION_STATUS_CLOSED")] PositionStatusClosed = 2,
  [pbr::OriginalName("POSITION_STATUS_CREATED")] PositionStatusCreated = 3,
  [pbr::OriginalName("POSITION_STATUS_ERROR")] PositionStatusError = 4,
}

/// <summary>
/// Trade side type ENUM
/// </summary>
public enum ProtoTradeSide {
  [pbr::OriginalName("BUY")] Buy = 1,
  [pbr::OriginalName("SELL")] Sell = 2,
}

/// <summary>
/// Order type ENUM
/// </summary>
public enum ProtoOrderType {
  [pbr::OriginalName("MARKET")] Market = 1,
  [pbr::OriginalName("LIMIT")] Limit = 2,
  [pbr::OriginalName("STOP")] Stop = 3,
  [pbr::OriginalName("STOP_LOSS_TAKE_PROFIT")] StopLossTakeProfit = 4,
  [pbr::OriginalName("MARKET_RANGE")] MarketRange = 5,
  [pbr::OriginalName("STOP_LIMIT")] StopLimit = 6,
}

/// <summary>
/// Order's Time In Force type ENUM
/// </summary>
public enum ProtoTimeInForce {
  [pbr::OriginalName("GOOD_TILL_DATE")] GoodTillDate = 1,
  [pbr::OriginalName("GOOD_TILL_CANCEL")] GoodTillCancel = 2,
  [pbr::OriginalName("IMMEDIATE_OR_CANCEL")] ImmediateOrCancel = 3,
  [pbr::OriginalName("FILL_OR_KILL")] FillOrKill = 4,
  [pbr::OriginalName("MARKET_ON_OPEN")] MarketOnOpen = 5,
}

/// <summary>
/// Order's status type ENUM
/// </summary>
public enum ProtoOrderStatus {
  [pbr::OriginalName("ORDER_STATUS_ACCEPTED")] OrderStatusAccepted = 1,
  [pbr::OriginalName("ORDER_STATUS_FILLED")] OrderStatusFilled = 2,
  [pbr::OriginalName("ORDER_STATUS_REJECTED")] OrderStatusRejected = 3,
  [pbr::OriginalName("ORDER_STATUS_EXPIRED")] OrderStatusExpired = 4,
  [pbr::OriginalName("ORDER_STATUS_CANCELLED")] OrderStatusCancelled = 5,
  [pbr::OriginalName("ORDER_STATUS_RESERVED")] OrderStatusReserved = 6,
}

/// <summary>
/// Order trigger method type ENUM
/// </summary>
public enum ProtoOrderTriggerMethod {
  [pbr::OriginalName("TRADE")] Trade = 1,
  [pbr::OriginalName("OPPOSITE")] Opposite = 2,
  [pbr::OriginalName("DOUBLE_TRADE")] DoubleTrade = 3,
  [pbr::OriginalName("DOUBLE_OPPOSITE")] DoubleOpposite = 4,
}

/// <summary>
/// Type of an Account (Trader) ENUM
/// </summary>
public enum ProtoAccountType {
  [pbr::OriginalName("HEDGED")] Hedged = 0,
  [pbr::OriginalName("NETTED")] Netted = 1,
  [pbr::OriginalName("SPREAD_BETTING")] SpreadBetting = 2,
}

/// <summary>
/// Margin calculation type for an Trader ENUM
/// </summary>
public enum ProtoTotalMarginCalculationType {
  [pbr::OriginalName("MAX")] Max = 0,
  [pbr::OriginalName("SUM")] Sum = 1,
  [pbr::OriginalName("NET")] Net = 2,
}

/// <summary>
/// Trading access rights ENUM
/// </summary>
public enum ProtoAccessRights {
  [pbr::OriginalName("FULL_ACCESS")] FullAccess = 0,
  [pbr::OriginalName("CLOSE_ONLY")] CloseOnly = 1,
  [pbr::OriginalName("NO_TRADING")] NoTrading = 2,
  [pbr::OriginalName("NO_LOGIN")] NoLogin = 3,
}

/// <summary>
/// Guaranteed Stop Loss execution policy ENUM
/// </summary>
public enum ProtoGSLExecutionPolicy {
  [pbr::OriginalName("DISABLED")] Disabled = 0,
  [pbr::OriginalName("ENABLED_DECLINE_IF_A_BOOK")] EnabledDeclineIfABook = 1,
  [pbr::OriginalName("ENABLED_FORCE_B_BOOK")] EnabledForceBBook = 2,
  [pbr::OriginalName("ENABLED_EXECUTE_INTO_SYMBOL_BOOK")] EnabledExecuteIntoSymbolBook = 3,
}

/// <summary>
/// Book type ENUM
/// </summary>
public enum ProtoSymbolBookType {
  [pbr::OriginalName("SYMBOL_BOOK_TYPE_BOOK_A")] SymbolBookTypeBookA = 1,
  [pbr::OriginalName("SYMBOL_BOOK_TYPE_BOOK_B")] SymbolBookTypeBookB = 2,
}

/// <summary>
/// Commission type ENUM
/// </summary>
public enum ProtoCommissionType {
  /// <summary>
  /// USD per million USD volume - usually used for FX. Example: 5 USD for 1 mil USD of trading volume. In 10^8: value of 500000000 is 500000000 / 10^8 = 5 USD per million
  /// </summary>
  [pbr::OriginalName("USD_PER_MILLION_USD")] UsdPerMillionUsd = 1,
  /// <summary>
  /// USD per 1 lot - usually used for CFDs and futures for commodities, and indices. Example: 15 USD for 1 contract. In 10^8: value of 1500000000 is 1500000000 / 10^8 = 15 USD per lot
  /// </summary>
  [pbr::OriginalName("USD_PER_LOT")] UsdPerLot = 2,
  /// <summary>
  /// Percentage of trading volume - usually used for Equities. Example: 0.005% of notional trading volume. Multiplied by 10^5: value of 500 is 500 / 10^5 = 0.005%
  /// </summary>
  [pbr::OriginalName("PERCENTAGE_OF_VALUE")] PercentageOfValue = 3,
  /// <summary>
  /// Quote Asset of Symbol per 1 lot - will be used for CFDs and futures for commodities, and indices. Example: 15 EUR for 1 contract of DAX. In 10^8: value of 1500000000 is 1500000000 / 10^8 = 15 EUR per contract
  /// </summary>
  [pbr::OriginalName("QUOTE_CCY_PER_LOT")] QuoteCcyPerLot = 4,
}

/// <summary>
/// Trading mode type of a symbol ENUM
/// </summary>
public enum ProtoTradingMode {
  /// <summary>
  /// Symbol is enabled for trading
  /// </summary>
  [pbr::OriginalName("ENABLED")] Enabled = 0,
  /// <summary>
  /// Symbol is disabled, and pending Orders are not executed
  /// </summary>
  [pbr::OriginalName("DISABLED_WITHOUT_PENDINGS_EXECUTION")] DisabledWithoutPendingsExecution = 1,
  /// <summary>
  /// Symbol is disabled, but pending Orders are executed
  /// </summary>
  [pbr::OriginalName("DISABLED_WITH_PENDINGS_EXECUTION")] DisabledWithPendingsExecution = 2,
  /// <summary>
  /// Symbol is disabled, and pending Orders are not executed, but only close Orders are executed
  /// </summary>
  [pbr::OriginalName("CLOSE_ONLY_MODE")] CloseOnlyMode = 3,
}

/// <summary>
/// Swap calculation type ENUM
/// </summary>
public enum ProtoSwapCalculationType {
  [pbr::OriginalName("PIPS")] Pips = 0,
  [pbr::OriginalName("PERCENTAGE")] Percentage = 1,
}

/// <summary>
/// Day of week ENUM
/// </summary>
public enum ProtoDayOfWeek {
  [pbr::OriginalName("NONE")] None = 0,
  [pbr::OriginalName("MONDAY")] Monday = 1,
  [pbr::OriginalName("TUESDAY")] Tuesday = 2,
  [pbr::OriginalName("WEDNESDAY")] Wednesday = 3,
  [pbr::OriginalName("THURSDAY")] Thursday = 4,
  [pbr::OriginalName("FRIDAY")] Friday = 5,
  [pbr::OriginalName("SATURDAY")] Saturday = 6,
  [pbr::OriginalName("SUNDAY")] Sunday = 7,
}

/// <summary>
/// Minimal Commission type ENUM
/// </summary>
public enum ProtoMinCommissionType {
  [pbr::OriginalName("CURRENCY")] Currency = 1,
  [pbr::OriginalName("QUOTE_CURRENCY")] QuoteCurrency = 2,
}

/// <summary>
/// Book type ENUM
/// </summary>
public enum ProtoBookType {
  [pbr::OriginalName("BOOK_A")] BookA = 1,
  [pbr::OriginalName("BOOK_B")] BookB = 2,
}

/// <summary>
/// Book request type ENUM
/// </summary>
public enum ProtoBookRequestType {
  [pbr::OriginalName("ALL_BOOKS_REQUEST")] AllBooksRequest = 1,
  [pbr::OriginalName("BOOK_A_REQUEST")] BookARequest = 2,
  [pbr::OriginalName("BOOK_B_REQUEST")] BookBRequest = 3,
}

/// <summary>
/// Symbol distance for Protection Profiles ENUM
/// </summary>
public enum ProtoSymbolDistanceType {
  /// <summary>
  /// 15 means 15 points
  /// </summary>
  [pbr::OriginalName("SYMBOL_DISTANCE_IN_POINTS")] SymbolDistanceInPoints = 1,
  /// <summary>
  /// 15 means 0.15%
  /// </summary>
  [pbr::OriginalName("SYMBOL_DISTANCE_IN_PERCENTAGE")] SymbolDistanceInPercentage = 2,
}

/// <summary>
/// Crud operation type ENUM
/// </summary>
public enum ProtoCrudOperation {
  /// <summary>
  /// Create entity. Entity ID must be sent as 0
  /// </summary>
  [pbr::OriginalName("PROTO_CREATE")] ProtoCreate = 1,
  /// <summary>
  /// Update, unspecified fields are set to null/default values
  /// </summary>
  [pbr::OriginalName("PROTO_UPDATE")] ProtoUpdate = 3,
  /// <summary>
  /// Delete entity
  /// </summary>
  [pbr::OriginalName("PROTO_DELETE")] ProtoDelete = 4,
  /// <summary>
  /// Only specified fields(entities) are updated, unspecified fields are not changed
  /// </summary>
  [pbr::OriginalName("PROTO_UPDATE_DIFF")] ProtoUpdateDiff = 5,
}

/// <summary>
/// Server Settings type ENUM
/// </summary>
public enum ProtoServerSettingType {
  /// <summary>
  /// Time in minutes for applying Administrative (Rollover) Fee under Swap Free Profiles and for IB commissions
  /// </summary>
  [pbr::OriginalName("END_OF_DAY_TIME")] EndOfDayTime = 2,
  /// <summary>
  /// 'VWAP', 'SPOT', 'PARTIAL'
  /// </summary>
  [pbr::OriginalName("BOOK_B_ORDER_FILLING_STRATEGY")] BookBOrderFillingStrategy = 5,
  /// <summary>
  /// 1 - ON, 0 - OFF
  /// </summary>
  [pbr::OriginalName("PRICE_FILTERING_ENABLED")] PriceFilteringEnabled = 7,
  /// <summary>
  /// Interval for quotes throttling, in milliseconds
  /// </summary>
  [pbr::OriginalName("DEPTH_THROTTLING_INTERVAL")] DepthThrottlingInterval = 8,
  /// <summary>
  /// 1 - ON, 0 - OFF
  /// </summary>
  [pbr::OriginalName("DEPTH_THROTTLING_ENABLED")] DepthThrottlingEnabled = 9,
  /// <summary>
  /// Lifetime of demo accounts, in days
  /// </summary>
  [pbr::OriginalName("LIFETIME")] Lifetime = 12,
  /// <summary>
  /// Trader lifetime calculating method used for calculation days for deactivation of inactive Accounts. 0 - Inactivity, 1 - Creation of account
  /// </summary>
  [pbr::OriginalName("METHOD_OF_LIFETIME_CALCULATION")] MethodOfLifetimeCalculation = 13,
  /// <summary>
  /// If = 1 and Trader is created via manager protocol then introducingBroker = TRUE if not specified
  /// </summary>
  [pbr::OriginalName("EVERYONE_IS_IB")] EveryoneIsIb = 14,
  /// <summary>
  /// 1 - ON, 0 - OFF. If enabled automatic execution of Deals is forbidden
  /// </summary>
  [pbr::OriginalName("ALWAYS_MANUAL_ENABLED")] AlwaysManualEnabled = 15,
  /// <summary>
  /// Min gap tolerance for automatic execution on Dealing Desk. Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% &lt;= minGapTolerance then Order will be executed at the Order price
  /// </summary>
  [pbr::OriginalName("MIN_GAP_TOLERANCE")] MinGapTolerance = 16,
  /// <summary>
  /// Max gap tolerance. Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% >= maxGapTolerance then Order will be passed to the Dealer
  /// </summary>
  [pbr::OriginalName("MAX_GAP_TOLERANCE")] MaxGapTolerance = 17,
  /// <summary>
  /// Timeout of Manual Deal, in milliseconds
  /// </summary>
  [pbr::OriginalName("MANUAL_DEAL_TIMEOUT")] ManualDealTimeout = 18,
  /// <summary>
  /// Time of the day in UTC when Report should be generated. HH:MM:SS
  /// </summary>
  [pbr::OriginalName("EOD_REPORT_TIME")] EodReportTime = 19,
  /// <summary>
  /// 0 - autorecalculation, default; 1 - manual recalculation
  /// </summary>
  [pbr::OriginalName("MARGIN_RECALCULATION_TYPE")] MarginRecalculationType = 21,
  /// <summary>
  /// List of Order channels which are executed with additional specified delay
  /// </summary>
  [pbr::OriginalName("ADDITIONAL_B_BOOK_DELAY_CHANNEL")] AdditionalBBookDelayChannel = 22,
  /// <summary>
  /// Additional minimum delay in Book B added to the delay specified in Group Symbol settings, in milliseconds
  /// </summary>
  [pbr::OriginalName("ADDITIONAL_B_BOOK_MIN_DELAY")] AdditionalBBookMinDelay = 23,
  /// <summary>
  /// Additional maximum delay in Book B added to the delay specified in Group Symbol settings, in milliseconds
  /// </summary>
  [pbr::OriginalName("ADDITIONAL_B_BOOK_MAX_DELAY")] AdditionalBBookMaxDelay = 24,
  /// <summary>
  /// Configuration parameter that will allow to automatically accept IB requests. 0 - OFF, 1 - ON
  /// </summary>
  [pbr::OriginalName("IB_REQUEST_AUTO_APPROVE")] IbRequestAutoApprove = 25,
  /// <summary>
  /// Available trading books: 0 - NONE, 1 - Book A only, 2 - Book B only, 3 - Both books
  /// </summary>
  [pbr::OriginalName("AVAILABLE_TRADING_BOOK")] AvailableTradingBook = 26,
  /// <summary>
  /// Action after timeout of manual Deal. 0 - REJECT/RESET, 1 - EXECUTE
  /// </summary>
  [pbr::OriginalName("MANUAL_DEAL_TIMEOUT_ACTION")] ManualDealTimeoutAction = 27,
}

/// <summary>
/// Enum type for Manager permissions
/// </summary>
public enum ProtoManagerPermission {
  [pbr::OriginalName("ROLE_TRADER_READ")] RoleTraderRead = 1,
  [pbr::OriginalName("ROLE_TRADER_CREATE")] RoleTraderCreate = 2,
  [pbr::OriginalName("ROLE_TRADER_EDIT")] RoleTraderEdit = 3,
  [pbr::OriginalName("ROLE_TRADER_DELETE")] RoleTraderDelete = 4,
  [pbr::OriginalName("ROLE_TRADER_CASHIER")] RoleTraderCashier = 5,
  [pbr::OriginalName("ROLE_TRADER_CHANGE_PASSWORD")] RoleTraderChangePassword = 6,
  [pbr::OriginalName("ROLE_TRADER_VIEWALL")] RoleTraderViewall = 7,
  [pbr::OriginalName("ROLE_TRADER_PHONE_TRADING")] RoleTraderPhoneTrading = 8,
  [pbr::OriginalName("ROLE_TRADER_BONUS_CASHIER")] RoleTraderBonusCashier = 9,
  [pbr::OriginalName("ROLE_MANAGER_READ")] RoleManagerRead = 10,
  [pbr::OriginalName("ROLE_MANAGER_CREATE")] RoleManagerCreate = 11,
  [pbr::OriginalName("ROLE_MANAGER_EDIT")] RoleManagerEdit = 12,
  [pbr::OriginalName("ROLE_MANAGER_DELETE")] RoleManagerDelete = 13,
  [pbr::OriginalName("ROLE_MANAGER_CHANGE_PASSWORD")] RoleManagerChangePassword = 14,
  [pbr::OriginalName("ROLE_FORCE_TRADING")] RoleForceTrading = 15,
  [pbr::OriginalName("ROLE_GROUP_READ")] RoleGroupRead = 20,
  [pbr::OriginalName("ROLE_GROUP_CREATE")] RoleGroupCreate = 21,
  [pbr::OriginalName("ROLE_GROUP_EDIT")] RoleGroupEdit = 22,
  [pbr::OriginalName("ROLE_GROUP_DELETE")] RoleGroupDelete = 23,
  [pbr::OriginalName("ROLE_GROUPS_SUPERVISOR")] RoleGroupsSupervisor = 24,
  [pbr::OriginalName("ROLE_MANAGERS_SUPERVISOR")] RoleManagersSupervisor = 25,
  [pbr::OriginalName("ROLE_PRICE_STREAM_EDIT")] RolePriceStreamEdit = 32,
  [pbr::OriginalName("ROLE_SYMBOL_EDIT")] RoleSymbolEdit = 41,
  [pbr::OriginalName("ROLE_SETTINGS_READ")] RoleSettingsRead = 50,
  [pbr::OriginalName("ROLE_SETTINGS_EDIT")] RoleSettingsEdit = 51,
  [pbr::OriginalName("ROLE_HISTORICAL_DATA_READ")] RoleHistoricalDataRead = 100,
  [pbr::OriginalName("ROLE_HISTORICAL_DATA_IMPORT")] RoleHistoricalDataImport = 101,
  [pbr::OriginalName("ROLE_HISTORICAL_DATA_EXPORT")] RoleHistoricalDataExport = 102,
  [pbr::OriginalName("ROLE_HISTORICAL_DATA_ADD_BAR")] RoleHistoricalDataAddBar = 103,
  [pbr::OriginalName("ROLE_HISTORICAL_DATA_EDIT_BAR")] RoleHistoricalDataEditBar = 104,
  [pbr::OriginalName("ROLE_HISTORICAL_DATA_DELETE_BAR")] RoleHistoricalDataDeleteBar = 105,
  [pbr::OriginalName("ROLE_REPORT_READ")] RoleReportRead = 110,
  [pbr::OriginalName("ROLE_REPORT_EXPORT")] RoleReportExport = 111,
  [pbr::OriginalName("ROLE_JOURNAL_READ")] RoleJournalRead = 120,
  [pbr::OriginalName("ROLE_JOURNAL_EXPORT")] RoleJournalExport = 121,
  [pbr::OriginalName("ROLE_ORDER_READ")] RoleOrderRead = 130,
  [pbr::OriginalName("ROLE_ORDER_EXPORT")] RoleOrderExport = 131,
  [pbr::OriginalName("ROLE_POSITION_READ")] RolePositionRead = 140,
  [pbr::OriginalName("ROLE_POSITION_EXPORT")] RolePositionExport = 141,
  [pbr::OriginalName("ROLE_TRADING_HISTORY_READ")] RoleTradingHistoryRead = 150,
  [pbr::OriginalName("ROLE_TRADING_HISTORY_EXPORT")] RoleTradingHistoryExport = 151,
  [pbr::OriginalName("ROLE_LIQUIDITY_READ")] RoleLiquidityRead = 160,
  [pbr::OriginalName("ROLE_LIQUIDITY_EDIT")] RoleLiquidityEdit = 161,
  [pbr::OriginalName("ROLE_EXPOSURE_READ")] RoleExposureRead = 170,
  [pbr::OriginalName("ROLE_INTEGRATION_READ")] RoleIntegrationRead = 180,
  [pbr::OriginalName("ROLE_ASSET_CLASS_EDIT")] RoleAssetClassEdit = 181,
  [pbr::OriginalName("ROLE_PB_SETTING_READ")] RolePbSettingRead = 190,
  [pbr::OriginalName("ROLE_PB_SETTING_WRITE")] RolePbSettingWrite = 191,
  [pbr::OriginalName("ROLE_PRICE_FILTER_EDIT")] RolePriceFilterEdit = 194,
  [pbr::OriginalName("ROLE_TRADER_INTRODUCING_BROKER")] RoleTraderIntroducingBroker = 195,
  [pbr::OriginalName("ROLE_GIVE_UP_REPORT_READ")] RoleGiveUpReportRead = 196,
  [pbr::OriginalName("ROLE_GUI_SETTINGS_EDIT")] RoleGuiSettingsEdit = 197,
  [pbr::OriginalName("ROLE_REPORT")] RoleReport = 198,
  [pbr::OriginalName("ROLE_DEALING")] RoleDealing = 199,
  [pbr::OriginalName("ROLE_ENTITY_BOOK_READ")] RoleEntityBookRead = 201,
  [pbr::OriginalName("ROLE_FUNNEL_READ")] RoleFunnelRead = 202,
  [pbr::OriginalName("ROLE_FUNNEL_EDIT")] RoleFunnelEdit = 203,
  [pbr::OriginalName("ROLE_HOOK_READ")] RoleHookRead = 204,
  [pbr::OriginalName("ROLE_HOOK_EDIT")] RoleHookEdit = 205,
  [pbr::OriginalName("ROLE_WITHDRAWAL_REQUEST_READ")] RoleWithdrawalRequestRead = 206,
  [pbr::OriginalName("ROLE_WITHDRAWAL_REQUEST_EDIT")] RoleWithdrawalRequestEdit = 207,
  [pbr::OriginalName("ROLE_KYC_READ")] RoleKycRead = 208,
  [pbr::OriginalName("ROLE_KYC_EDIT")] RoleKycEdit = 209,
  [pbr::OriginalName("ROLE_MARKETING_LINKS_READ")] RoleMarketingLinksRead = 210,
  [pbr::OriginalName("ROLE_MARKETING_LINKS_EDIT")] RoleMarketingLinksEdit = 211,
  [pbr::OriginalName("ROLE_USER_EXPORT")] RoleUserExport = 212,
  [pbr::OriginalName("ROLE_USER_DELETE")] RoleUserDelete = 213,
  [pbr::OriginalName("ROLE_REGIONS_ADMIN")] RoleRegionsAdmin = 214,
  [pbr::OriginalName("ROLE_COPY_ADMIN")] RoleCopyAdmin = 215,
  [pbr::OriginalName("ROLE_LIVECHAT")] RoleLivechat = 216,
  [pbr::OriginalName("ROLE_CTID_NOTIFICATIONS")] RoleCtidNotifications = 217,
  [pbr::OriginalName("ROLE_PROFILES_EDIT")] RoleProfilesEdit = 218,
  [pbr::OriginalName("ROLE_MARKETING_SEND_PUSH")] RoleMarketingSendPush = 219,
  [pbr::OriginalName("ROLE_MARKETING_SEND_BLOTTER_MESSAGE")] RoleMarketingSendBlotterMessage = 220,
  [pbr::OriginalName("ROLE_MANAGER_CHANGE_OWN_PASSWORD")] RoleManagerChangeOwnPassword = 221,
  /// <summary>
  /// Managers without this permission will not have access to the newly created White Label  as it will be added to their disabledBrokerName
  /// </summary>
  [pbr::OriginalName("ROLE_WHITE_LABELS_SUPERVISOR")] RoleWhiteLabelsSupervisor = 222,
  [pbr::OriginalName("ROLE_REPORT_FULL_EDIT")] RoleReportFullEdit = 223,
}

/// <summary>
/// Execution type ENUM
/// </summary>
public enum ProtoExecutionType {
  [pbr::OriginalName("ORDER_ACCEPTED")] OrderAccepted = 2,
  [pbr::OriginalName("ORDER_FILLED")] OrderFilled = 3,
  [pbr::OriginalName("ORDER_REPLACED")] OrderReplaced = 4,
  [pbr::OriginalName("ORDER_CANCELLED")] OrderCancelled = 5,
  [pbr::OriginalName("ORDER_EXPIRED")] OrderExpired = 6,
  [pbr::OriginalName("ORDER_REJECTED")] OrderRejected = 7,
  [pbr::OriginalName("ORDER_CANCEL_REJECTED")] OrderCancelRejected = 8,
  [pbr::OriginalName("SWAP")] Swap = 9,
  [pbr::OriginalName("DEPOSIT_WITHDRAW")] DepositWithdraw = 10,
  [pbr::OriginalName("ORDER_PARTIAL_FILL")] OrderPartialFill = 11,
  [pbr::OriginalName("BONUS_DEPOSIT_WITHDRAW")] BonusDepositWithdraw = 12,
}

/// <summary>
/// Asset type ENUM
/// </summary>
public enum ProtoAssetType {
  [pbr::OriginalName("PROTO_FOREX")] ProtoForex = 1,
  [pbr::OriginalName("PROTO_METALS")] ProtoMetals = 2,
  [pbr::OriginalName("PROTO_INDICES")] ProtoIndices = 3,
  [pbr::OriginalName("PROTO_COMMODITY")] ProtoCommodity = 4,
  [pbr::OriginalName("PROTO_STOCK")] ProtoStock = 5,
  [pbr::OriginalName("PROTO_CRYPTO")] ProtoCrypto = 6,
  [pbr::OriginalName("PROTO_OTHER")] ProtoOther = 7,
}

/// <summary>
/// Deal status type ENUM
/// </summary>
public enum ProtoDealStatus {
  [pbr::OriginalName("FILLED")] Filled = 2,
  [pbr::OriginalName("PARTIALLY_FILLED")] PartiallyFilled = 3,
  [pbr::OriginalName("REJECTED")] Rejected = 4,
  [pbr::OriginalName("INTERNALLY_REJECTED")] InternallyRejected = 5,
  [pbr::OriginalName("ERROR")] Error = 6,
  [pbr::OriginalName("MISSED")] Missed = 7,
}

/// <summary>
/// Deal type ENUM
/// </summary>
public enum ProtoDealType {
  [pbr::OriginalName("MARKET_DEAL")] MarketDeal = 1,
  [pbr::OriginalName("LIMIT_DEAL")] LimitDeal = 2,
}

/// <summary>
/// Quote type ENUM
/// </summary>
public enum ProtoQuoteType {
  [pbr::OriginalName("BID")] Bid = 1,
  [pbr::OriginalName("ASK")] Ask = 2,
}

/// <summary>
/// Manual execution reason (why Order was sent for manual execution) ENUM
/// </summary>
public enum ProtoManualDealReason {
  [pbr::OriginalName("MANUAL_DEAL_REASON_ALWAYS_MANUAL")] ManualDealReasonAlwaysManual = 1,
  [pbr::OriginalName("MANUAL_DEAL_REASON_VOLUME")] ManualDealReasonVolume = 2,
  [pbr::OriginalName("MANUAL_DEAL_REASON_MAX_GAP_TOLERANCE")] ManualDealReasonMaxGapTolerance = 3,
  [pbr::OriginalName("MANUAL_DEAL_REASON_EMPTY_DOM")] ManualDealReasonEmptyDom = 4,
}

/// <summary>
/// Withdrawal Request type ENUM
/// </summary>
public enum ProtoRequestStatus {
  [pbr::OriginalName("NEW")] New = 0,
  [pbr::OriginalName("APPROVED")] Approved = 1,
  [pbr::OriginalName("DECLINED")] Declined = 2,
  [pbr::OriginalName("CANCELLED")] Cancelled = 3,
}

/// <summary>
/// Limited Risk types ENUM
/// </summary>
public enum ProtoLimitedRiskMarginCalculationStrategy {
  [pbr::OriginalName("ACCORDING_TO_LEVERAGE")] AccordingToLeverage = 0,
  [pbr::OriginalName("ACCORDING_TO_GSL")] AccordingToGsl = 1,
  [pbr::OriginalName("ACCORDING_TO_GSL_AND_LEVERAGE")] AccordingToGslAndLeverage = 2,
}

/// <summary>
/// Action on Manual Deal timeout ENUM
/// </summary>
public enum ProtoManualDealTimeoutAction {
  [pbr::OriginalName("REJECT_RESET")] RejectReset = 0,
  [pbr::OriginalName("EXECUTE")] Execute = 1,
}

/// <summary>
/// Bonus Provider type ENUM
/// </summary>
public enum ProtoBonusOwner {
  [pbr::OriginalName("MANAGER")] Manager = 0,
  [pbr::OriginalName("IB")] Ib = 1,
}

/// <summary>
/// Execution Policy ENUM
/// </summary>
public enum ProtoExecutionPolicy {
  [pbr::OriginalName("BOOKA")] Booka = 1,
  [pbr::OriginalName("BOOKB")] Bookb = 2,
  [pbr::OriginalName("BOOKA_WITH_CONDITION")] BookaWithCondition = 3,
}

/// <summary>
/// Trend bars period ENUM
/// </summary>
public enum ProtoTrendbarPeriod {
  [pbr::OriginalName("M1")] M1 = 1,
  [pbr::OriginalName("M2")] M2 = 2,
  [pbr::OriginalName("M3")] M3 = 3,
  [pbr::OriginalName("M4")] M4 = 4,
  [pbr::OriginalName("M5")] M5 = 5,
  [pbr::OriginalName("M10")] M10 = 6,
  [pbr::OriginalName("M15")] M15 = 7,
  [pbr::OriginalName("M30")] M30 = 8,
  [pbr::OriginalName("H1")] H1 = 9,
  [pbr::OriginalName("H4")] H4 = 10,
  [pbr::OriginalName("H12")] H12 = 11,
  [pbr::OriginalName("D1")] D1 = 12,
  [pbr::OriginalName("W1")] W1 = 13,
  [pbr::OriginalName("MN1")] Mn1 = 14,
}

/// <summary>
/// Enum for trend bar timeframe
/// </summary>
public enum ProtoTimeframe {
  /// <summary>
  /// 1 minute
  /// </summary>
  [pbr::OriginalName("M_1")] M1 = 1,
  /// <summary>
  /// 2 minutes
  /// </summary>
  [pbr::OriginalName("M_2")] M2 = 2,
  /// <summary>
  /// 3 minutes
  /// </summary>
  [pbr::OriginalName("M_3")] M3 = 3,
  /// <summary>
  /// 4 minutes
  /// </summary>
  [pbr::OriginalName("M_4")] M4 = 4,
  /// <summary>
  /// 5 minutes
  /// </summary>
  [pbr::OriginalName("M_5")] M5 = 5,
  /// <summary>
  /// 6 minutes
  /// </summary>
  [pbr::OriginalName("M_6")] M6 = 6,
  /// <summary>
  /// 7 minutes
  /// </summary>
  [pbr::OriginalName("M_7")] M7 = 7,
  /// <summary>
  /// 8 minutes
  /// </summary>
  [pbr::OriginalName("M_8")] M8 = 8,
  /// <summary>
  /// 9 minutes
  /// </summary>
  [pbr::OriginalName("M_9")] M9 = 9,
  /// <summary>
  /// 10 minutes
  /// </summary>
  [pbr::OriginalName("M_10")] M10 = 10,
  /// <summary>
  /// 15 minutes
  /// </summary>
  [pbr::OriginalName("M_15")] M15 = 11,
  /// <summary>
  /// 20 minutes
  /// </summary>
  [pbr::OriginalName("M_20")] M20 = 12,
  /// <summary>
  /// 30 minutes
  /// </summary>
  [pbr::OriginalName("M_30")] M30 = 13,
  /// <summary>
  /// 45 minutes
  /// </summary>
  [pbr::OriginalName("M_45")] M45 = 14,
  /// <summary>
  /// 1 hour
  /// </summary>
  [pbr::OriginalName("H_1")] H1 = 15,
  /// <summary>
  /// 2  hours
  /// </summary>
  [pbr::OriginalName("H_2")] H2 = 16,
  /// <summary>
  /// 3 hours
  /// </summary>
  [pbr::OriginalName("H_3")] H3 = 17,
  /// <summary>
  /// 4 hours
  /// </summary>
  [pbr::OriginalName("H_4")] H4 = 18,
  /// <summary>
  /// 6 hours
  /// </summary>
  [pbr::OriginalName("H_6")] H6 = 19,
  /// <summary>
  /// 8 hours
  /// </summary>
  [pbr::OriginalName("H_8")] H8 = 20,
  /// <summary>
  /// 12 hours
  /// </summary>
  [pbr::OriginalName("H_12")] H12 = 21,
  /// <summary>
  /// 1 day
  /// </summary>
  [pbr::OriginalName("D_1")] D1 = 22,
  /// <summary>
  /// 2 days
  /// </summary>
  [pbr::OriginalName("D_2")] D2 = 23,
  /// <summary>
  /// 3 days
  /// </summary>
  [pbr::OriginalName("D_3")] D3 = 24,
  /// <summary>
  /// 1 week
  /// </summary>
  [pbr::OriginalName("W_1")] W1 = 25,
  /// <summary>
  /// 1 month
  /// </summary>
  [pbr::OriginalName("MN_1")] Mn1 = 26,
}

/// <summary>
/// Enum for trend bar type
/// </summary>
public enum ProtoTrendbarType {
  /// <summary>
  /// Regular trend bar
  /// </summary>
  [pbr::OriginalName("REGULAR_OHLC")] RegularOhlc = 0,
  /// <summary>
  /// Heikin-Ashi trend bar
  /// </summary>
  [pbr::OriginalName("HEIKIN_ASHI")] HeikinAshi = 1,
}

#endregion

#region Messages
/// <summary>
/// Trendbar entity
/// </summary>
public sealed partial class ProtoTrendbar : pb::IMessage<ProtoTrendbar>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoTrendbar> _parser = new pb::MessageParser<ProtoTrendbar>(() => new ProtoTrendbar());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoTrendbar> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTrendbar() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTrendbar(ProtoTrendbar other) : this() {
    _hasBits0 = other._hasBits0;
    volume_ = other.volume_;
    period_ = other.period_;
    low_ = other.low_;
    deltaOpen_ = other.deltaOpen_;
    deltaClose_ = other.deltaClose_;
    deltaHigh_ = other.deltaHigh_;
    utcTimestampInMinutes_ = other.utcTimestampInMinutes_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTrendbar Clone() {
    return new ProtoTrendbar(this);
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 3;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Bar volume in ticks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "period" field.</summary>
  public const int PeriodFieldNumber = 4;
  private readonly static global::ProtoTrendbarPeriod PeriodDefaultValue = global::ProtoTrendbarPeriod.M1;

  private global::ProtoTrendbarPeriod period_;
  /// <summary>
  /// Bar period
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTrendbarPeriod Period {
    get { if ((_hasBits0 & 2) != 0) { return period_; } else { return PeriodDefaultValue; } }
    set {
      _hasBits0 |= 2;
      period_ = value;
    }
  }
  /// <summary>Gets whether the "period" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPeriod {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "period" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPeriod() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "low" field.</summary>
  public const int LowFieldNumber = 5;
  private readonly static long LowDefaultValue = 0L;

  private long low_;
  /// <summary>
  /// Lowest price for the period
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Low {
    get { if ((_hasBits0 & 4) != 0) { return low_; } else { return LowDefaultValue; } }
    set {
      _hasBits0 |= 4;
      low_ = value;
    }
  }
  /// <summary>Gets whether the "low" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLow {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "low" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLow() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "deltaOpen" field.</summary>
  public const int DeltaOpenFieldNumber = 6;
  private readonly static ulong DeltaOpenDefaultValue = 0UL;

  private ulong deltaOpen_;
  /// <summary>
  /// Delta between open and low price. Open = low + deltaOpen
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong DeltaOpen {
    get { if ((_hasBits0 & 8) != 0) { return deltaOpen_; } else { return DeltaOpenDefaultValue; } }
    set {
      _hasBits0 |= 8;
      deltaOpen_ = value;
    }
  }
  /// <summary>Gets whether the "deltaOpen" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaOpen {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "deltaOpen" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaOpen() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "deltaClose" field.</summary>
  public const int DeltaCloseFieldNumber = 7;
  private readonly static ulong DeltaCloseDefaultValue = 0UL;

  private ulong deltaClose_;
  /// <summary>
  /// Delta between close and low price. Close = low + deltaClose
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong DeltaClose {
    get { if ((_hasBits0 & 16) != 0) { return deltaClose_; } else { return DeltaCloseDefaultValue; } }
    set {
      _hasBits0 |= 16;
      deltaClose_ = value;
    }
  }
  /// <summary>Gets whether the "deltaClose" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaClose {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "deltaClose" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaClose() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "deltaHigh" field.</summary>
  public const int DeltaHighFieldNumber = 8;
  private readonly static ulong DeltaHighDefaultValue = 0UL;

  private ulong deltaHigh_;
  /// <summary>
  /// Delta between high and low price. High = low + deltaHigh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong DeltaHigh {
    get { if ((_hasBits0 & 32) != 0) { return deltaHigh_; } else { return DeltaHighDefaultValue; } }
    set {
      _hasBits0 |= 32;
      deltaHigh_ = value;
    }
  }
  /// <summary>Gets whether the "deltaHigh" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaHigh {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "deltaHigh" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaHigh() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "utcTimestampInMinutes" field.</summary>
  public const int UtcTimestampInMinutesFieldNumber = 9;
  private readonly static uint UtcTimestampInMinutesDefaultValue = 0;

  private uint utcTimestampInMinutes_;
  /// <summary>
  /// UNIX timestamp of the bar, in minutes. Equal to the timestamp of the open tick
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint UtcTimestampInMinutes {
    get { if ((_hasBits0 & 64) != 0) { return utcTimestampInMinutes_; } else { return UtcTimestampInMinutesDefaultValue; } }
    set {
      _hasBits0 |= 64;
      utcTimestampInMinutes_ = value;
    }
  }
  /// <summary>Gets whether the "utcTimestampInMinutes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcTimestampInMinutes {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "utcTimestampInMinutes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcTimestampInMinutes() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 10;
  private readonly static ulong UtcLastUpdateTimestampDefaultValue = 0UL;

  private ulong utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp of the last update time in milliseconds
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 128) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 128;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoTrendbar);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoTrendbar other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Volume != other.Volume) return false;
    if (Period != other.Period) return false;
    if (Low != other.Low) return false;
    if (DeltaOpen != other.DeltaOpen) return false;
    if (DeltaClose != other.DeltaClose) return false;
    if (DeltaHigh != other.DeltaHigh) return false;
    if (UtcTimestampInMinutes != other.UtcTimestampInMinutes) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasPeriod) hash ^= Period.GetHashCode();
    if (HasLow) hash ^= Low.GetHashCode();
    if (HasDeltaOpen) hash ^= DeltaOpen.GetHashCode();
    if (HasDeltaClose) hash ^= DeltaClose.GetHashCode();
    if (HasDeltaHigh) hash ^= DeltaHigh.GetHashCode();
    if (HasUtcTimestampInMinutes) hash ^= UtcTimestampInMinutes.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasVolume) {
      output.WriteRawTag(24);
      output.WriteInt64(Volume);
    }
    if (HasPeriod) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Period);
    }
    if (HasLow) {
      output.WriteRawTag(40);
      output.WriteInt64(Low);
    }
    if (HasDeltaOpen) {
      output.WriteRawTag(48);
      output.WriteUInt64(DeltaOpen);
    }
    if (HasDeltaClose) {
      output.WriteRawTag(56);
      output.WriteUInt64(DeltaClose);
    }
    if (HasDeltaHigh) {
      output.WriteRawTag(64);
      output.WriteUInt64(DeltaHigh);
    }
    if (HasUtcTimestampInMinutes) {
      output.WriteRawTag(72);
      output.WriteUInt32(UtcTimestampInMinutes);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(80);
      output.WriteUInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasVolume) {
      output.WriteRawTag(24);
      output.WriteInt64(Volume);
    }
    if (HasPeriod) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Period);
    }
    if (HasLow) {
      output.WriteRawTag(40);
      output.WriteInt64(Low);
    }
    if (HasDeltaOpen) {
      output.WriteRawTag(48);
      output.WriteUInt64(DeltaOpen);
    }
    if (HasDeltaClose) {
      output.WriteRawTag(56);
      output.WriteUInt64(DeltaClose);
    }
    if (HasDeltaHigh) {
      output.WriteRawTag(64);
      output.WriteUInt64(DeltaHigh);
    }
    if (HasUtcTimestampInMinutes) {
      output.WriteRawTag(72);
      output.WriteUInt32(UtcTimestampInMinutes);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(80);
      output.WriteUInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasPeriod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
    }
    if (HasLow) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Low);
    }
    if (HasDeltaOpen) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeltaOpen);
    }
    if (HasDeltaClose) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeltaClose);
    }
    if (HasDeltaHigh) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeltaHigh);
    }
    if (HasUtcTimestampInMinutes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UtcTimestampInMinutes);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoTrendbar other) {
    if (other == null) {
      return;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasPeriod) {
      Period = other.Period;
    }
    if (other.HasLow) {
      Low = other.Low;
    }
    if (other.HasDeltaOpen) {
      DeltaOpen = other.DeltaOpen;
    }
    if (other.HasDeltaClose) {
      DeltaClose = other.DeltaClose;
    }
    if (other.HasDeltaHigh) {
      DeltaHigh = other.DeltaHigh;
    }
    if (other.HasUtcTimestampInMinutes) {
      UtcTimestampInMinutes = other.UtcTimestampInMinutes;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 24: {
          Volume = input.ReadInt64();
          break;
        }
        case 32: {
          Period = (global::ProtoTrendbarPeriod) input.ReadEnum();
          break;
        }
        case 40: {
          Low = input.ReadInt64();
          break;
        }
        case 48: {
          DeltaOpen = input.ReadUInt64();
          break;
        }
        case 56: {
          DeltaClose = input.ReadUInt64();
          break;
        }
        case 64: {
          DeltaHigh = input.ReadUInt64();
          break;
        }
        case 72: {
          UtcTimestampInMinutes = input.ReadUInt32();
          break;
        }
        case 80: {
          UtcLastUpdateTimestamp = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 24: {
          Volume = input.ReadInt64();
          break;
        }
        case 32: {
          Period = (global::ProtoTrendbarPeriod) input.ReadEnum();
          break;
        }
        case 40: {
          Low = input.ReadInt64();
          break;
        }
        case 48: {
          DeltaOpen = input.ReadUInt64();
          break;
        }
        case 56: {
          DeltaClose = input.ReadUInt64();
          break;
        }
        case 64: {
          DeltaHigh = input.ReadUInt64();
          break;
        }
        case 72: {
          UtcTimestampInMinutes = input.ReadUInt32();
          break;
        }
        case 80: {
          UtcLastUpdateTimestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Position/Order trading details entity
/// </summary>
public sealed partial class ProtoTradeData : pb::IMessage<ProtoTradeData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoTradeData> _parser = new pb::MessageParser<ProtoTradeData>(() => new ProtoTradeData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoTradeData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTradeData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTradeData(ProtoTradeData other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    volume_ = other.volume_;
    tradeSide_ = other.tradeSide_;
    traderId_ = other.traderId_;
    openTimestamp_ = other.openTimestamp_;
    closeTimestamp_ = other.closeTimestamp_;
    label_ = other.label_;
    comment_ = other.comment_;
    channel_ = other.channel_;
    measurementUnits_ = other.measurementUnits_;
    lotSize_ = other.lotSize_;
    spreadBetting_ = other.spreadBetting_;
    stake_ = other.stake_;
    desiredVWAP_ = other.desiredVWAP_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTradeData Clone() {
    return new ProtoTradeData(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// The unique identifier of the Symbol in specific server environment within cTrader platform
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 2;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 2) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "tradeSide" field.</summary>
  public const int TradeSideFieldNumber = 3;
  private readonly static global::ProtoTradeSide TradeSideDefaultValue = global::ProtoTradeSide.Buy;

  private global::ProtoTradeSide tradeSide_;
  /// <summary>
  /// Buy, Sell
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTradeSide TradeSide {
    get { if ((_hasBits0 & 4) != 0) { return tradeSide_; } else { return TradeSideDefaultValue; } }
    set {
      _hasBits0 |= 4;
      tradeSide_ = value;
    }
  }
  /// <summary>Gets whether the "tradeSide" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeSide {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "tradeSide" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeSide() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 4;
  private readonly static long TraderIdDefaultValue = 0L;

  private long traderId_;
  /// <summary>
  /// ID of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderId {
    get { if ((_hasBits0 & 8) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "openTimestamp" field.</summary>
  public const int OpenTimestampFieldNumber = 7;
  private readonly static long OpenTimestampDefaultValue = 0L;

  private long openTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when Position was opened or Order was created
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OpenTimestamp {
    get { if ((_hasBits0 & 16) != 0) { return openTimestamp_; } else { return OpenTimestampDefaultValue; } }
    set {
      _hasBits0 |= 16;
      openTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "openTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOpenTimestamp {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "openTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOpenTimestamp() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "closeTimestamp" field.</summary>
  public const int CloseTimestampFieldNumber = 8;
  private readonly static long CloseTimestampDefaultValue = 0L;

  private long closeTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when Position was closed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CloseTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return closeTimestamp_; } else { return CloseTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      closeTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "closeTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCloseTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "closeTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCloseTimestamp() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 12;
  private readonly static string LabelDefaultValue = "";

  private string label_;
  /// <summary>
  /// Text label specified during Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Label {
    get { return label_ ?? LabelDefaultValue; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "label" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLabel {
    get { return label_ != null; }
  }
  /// <summary>Clears the value of the "label" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLabel() {
    label_ = null;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 13;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment specified during Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 14;
  private readonly static string ChannelDefaultValue = "";

  private string channel_;
  /// <summary>
  /// Channel specified during Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Channel {
    get { return channel_ ?? ChannelDefaultValue; }
    set {
      channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "channel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChannel {
    get { return channel_ != null; }
  }
  /// <summary>Clears the value of the "channel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChannel() {
    channel_ = null;
  }

  /// <summary>Field number for the "measurementUnits" field.</summary>
  public const int MeasurementUnitsFieldNumber = 15;
  private readonly static string MeasurementUnitsDefaultValue = "";

  private string measurementUnits_;
  /// <summary>
  /// Measurement units for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MeasurementUnits {
    get { return measurementUnits_ ?? MeasurementUnitsDefaultValue; }
    set {
      measurementUnits_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "measurementUnits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMeasurementUnits {
    get { return measurementUnits_ != null; }
  }
  /// <summary>Clears the value of the "measurementUnits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMeasurementUnits() {
    measurementUnits_ = null;
  }

  /// <summary>Field number for the "lotSize" field.</summary>
  public const int LotSizeFieldNumber = 16;
  private readonly static long LotSizeDefaultValue = 0L;

  private long lotSize_;
  /// <summary>
  /// Lot size of the Symbol (in cents)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LotSize {
    get { if ((_hasBits0 & 64) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      lotSize_ = value;
    }
  }
  /// <summary>Gets whether the "lotSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLotSize {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "lotSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLotSize() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "spreadBetting" field.</summary>
  public const int SpreadBettingFieldNumber = 17;
  private readonly static bool SpreadBettingDefaultValue = false;

  private bool spreadBetting_;
  /// <summary>
  /// TRUE for Spread Setting entities
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SpreadBetting {
    get { if ((_hasBits0 & 128) != 0) { return spreadBetting_; } else { return SpreadBettingDefaultValue; } }
    set {
      _hasBits0 |= 128;
      spreadBetting_ = value;
    }
  }
  /// <summary>Gets whether the "spreadBetting" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSpreadBetting {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "spreadBetting" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSpreadBetting() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "stake" field.</summary>
  public const int StakeFieldNumber = 18;
  private readonly static long StakeDefaultValue = 0L;

  private long stake_;
  /// <summary>
  /// Stake for Spread Betting
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Stake {
    get { if ((_hasBits0 & 256) != 0) { return stake_; } else { return StakeDefaultValue; } }
    set {
      _hasBits0 |= 256;
      stake_ = value;
    }
  }
  /// <summary>Gets whether the "stake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStake {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "stake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStake() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "desiredVWAP" field.</summary>
  public const int DesiredVWAPFieldNumber = 19;
  private readonly static double DesiredVWAPDefaultValue = 0D;

  private double desiredVWAP_;
  /// <summary>
  /// Price desired by the client as an execution price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double DesiredVWAP {
    get { if ((_hasBits0 & 512) != 0) { return desiredVWAP_; } else { return DesiredVWAPDefaultValue; } }
    set {
      _hasBits0 |= 512;
      desiredVWAP_ = value;
    }
  }
  /// <summary>Gets whether the "desiredVWAP" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDesiredVWAP {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "desiredVWAP" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDesiredVWAP() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 20;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then Position/Order Stop Loss is Guaranteed Stop Loss (GSL)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 1024) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~1024;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoTradeData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoTradeData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (Volume != other.Volume) return false;
    if (TradeSide != other.TradeSide) return false;
    if (TraderId != other.TraderId) return false;
    if (OpenTimestamp != other.OpenTimestamp) return false;
    if (CloseTimestamp != other.CloseTimestamp) return false;
    if (Label != other.Label) return false;
    if (Comment != other.Comment) return false;
    if (Channel != other.Channel) return false;
    if (MeasurementUnits != other.MeasurementUnits) return false;
    if (LotSize != other.LotSize) return false;
    if (SpreadBetting != other.SpreadBetting) return false;
    if (Stake != other.Stake) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DesiredVWAP, other.DesiredVWAP)) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasTradeSide) hash ^= TradeSide.GetHashCode();
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasOpenTimestamp) hash ^= OpenTimestamp.GetHashCode();
    if (HasCloseTimestamp) hash ^= CloseTimestamp.GetHashCode();
    if (HasLabel) hash ^= Label.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasChannel) hash ^= Channel.GetHashCode();
    if (HasMeasurementUnits) hash ^= MeasurementUnits.GetHashCode();
    if (HasLotSize) hash ^= LotSize.GetHashCode();
    if (HasSpreadBetting) hash ^= SpreadBetting.GetHashCode();
    if (HasStake) hash ^= Stake.GetHashCode();
    if (HasDesiredVWAP) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DesiredVWAP);
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(Volume);
    }
    if (HasTradeSide) {
      output.WriteRawTag(24);
      output.WriteEnum((int) TradeSide);
    }
    if (HasTraderId) {
      output.WriteRawTag(32);
      output.WriteInt64(TraderId);
    }
    if (HasOpenTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(OpenTimestamp);
    }
    if (HasCloseTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(CloseTimestamp);
    }
    if (HasLabel) {
      output.WriteRawTag(98);
      output.WriteString(Label);
    }
    if (HasComment) {
      output.WriteRawTag(106);
      output.WriteString(Comment);
    }
    if (HasChannel) {
      output.WriteRawTag(114);
      output.WriteString(Channel);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(122);
      output.WriteString(MeasurementUnits);
    }
    if (HasLotSize) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(LotSize);
    }
    if (HasSpreadBetting) {
      output.WriteRawTag(136, 1);
      output.WriteBool(SpreadBetting);
    }
    if (HasStake) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Stake);
    }
    if (HasDesiredVWAP) {
      output.WriteRawTag(153, 1);
      output.WriteDouble(DesiredVWAP);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(160, 1);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(Volume);
    }
    if (HasTradeSide) {
      output.WriteRawTag(24);
      output.WriteEnum((int) TradeSide);
    }
    if (HasTraderId) {
      output.WriteRawTag(32);
      output.WriteInt64(TraderId);
    }
    if (HasOpenTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(OpenTimestamp);
    }
    if (HasCloseTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(CloseTimestamp);
    }
    if (HasLabel) {
      output.WriteRawTag(98);
      output.WriteString(Label);
    }
    if (HasComment) {
      output.WriteRawTag(106);
      output.WriteString(Comment);
    }
    if (HasChannel) {
      output.WriteRawTag(114);
      output.WriteString(Channel);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(122);
      output.WriteString(MeasurementUnits);
    }
    if (HasLotSize) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(LotSize);
    }
    if (HasSpreadBetting) {
      output.WriteRawTag(136, 1);
      output.WriteBool(SpreadBetting);
    }
    if (HasStake) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Stake);
    }
    if (HasDesiredVWAP) {
      output.WriteRawTag(153, 1);
      output.WriteDouble(DesiredVWAP);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(160, 1);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasTradeSide) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeSide);
    }
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderId);
    }
    if (HasOpenTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTimestamp);
    }
    if (HasCloseTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseTimestamp);
    }
    if (HasLabel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasChannel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
    }
    if (HasMeasurementUnits) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementUnits);
    }
    if (HasLotSize) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LotSize);
    }
    if (HasSpreadBetting) {
      size += 2 + 1;
    }
    if (HasStake) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Stake);
    }
    if (HasDesiredVWAP) {
      size += 2 + 8;
    }
    if (HasGuaranteedStopLoss) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoTradeData other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasTradeSide) {
      TradeSide = other.TradeSide;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasOpenTimestamp) {
      OpenTimestamp = other.OpenTimestamp;
    }
    if (other.HasCloseTimestamp) {
      CloseTimestamp = other.CloseTimestamp;
    }
    if (other.HasLabel) {
      Label = other.Label;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasChannel) {
      Channel = other.Channel;
    }
    if (other.HasMeasurementUnits) {
      MeasurementUnits = other.MeasurementUnits;
    }
    if (other.HasLotSize) {
      LotSize = other.LotSize;
    }
    if (other.HasSpreadBetting) {
      SpreadBetting = other.SpreadBetting;
    }
    if (other.HasStake) {
      Stake = other.Stake;
    }
    if (other.HasDesiredVWAP) {
      DesiredVWAP = other.DesiredVWAP;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Volume = input.ReadInt64();
          break;
        }
        case 24: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 32: {
          TraderId = input.ReadInt64();
          break;
        }
        case 56: {
          OpenTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          CloseTimestamp = input.ReadInt64();
          break;
        }
        case 98: {
          Label = input.ReadString();
          break;
        }
        case 106: {
          Comment = input.ReadString();
          break;
        }
        case 114: {
          Channel = input.ReadString();
          break;
        }
        case 122: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 128: {
          LotSize = input.ReadInt64();
          break;
        }
        case 136: {
          SpreadBetting = input.ReadBool();
          break;
        }
        case 144: {
          Stake = input.ReadInt64();
          break;
        }
        case 153: {
          DesiredVWAP = input.ReadDouble();
          break;
        }
        case 160: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Volume = input.ReadInt64();
          break;
        }
        case 24: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 32: {
          TraderId = input.ReadInt64();
          break;
        }
        case 56: {
          OpenTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          CloseTimestamp = input.ReadInt64();
          break;
        }
        case 98: {
          Label = input.ReadString();
          break;
        }
        case 106: {
          Comment = input.ReadString();
          break;
        }
        case 114: {
          Channel = input.ReadString();
          break;
        }
        case 122: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 128: {
          LotSize = input.ReadInt64();
          break;
        }
        case 136: {
          SpreadBetting = input.ReadBool();
          break;
        }
        case 144: {
          Stake = input.ReadInt64();
          break;
        }
        case 153: {
          DesiredVWAP = input.ReadDouble();
          break;
        }
        case 160: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Position entity
/// </summary>
public sealed partial class ProtoPosition : pb::IMessage<ProtoPosition>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoPosition> _parser = new pb::MessageParser<ProtoPosition>(() => new ProtoPosition());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoPosition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPosition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPosition(ProtoPosition other) : this() {
    _hasBits0 = other._hasBits0;
    positionId_ = other.positionId_;
    tradeData_ = other.tradeData_ != null ? other.tradeData_.Clone() : null;
    positionStatus_ = other.positionStatus_;
    swap_ = other.swap_;
    price_ = other.price_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    bookType_ = other.bookType_;
    commission_ = other.commission_;
    marginRate_ = other.marginRate_;
    introducingBrokerCommission_ = other.introducingBrokerCommission_;
    pocketCommission_ = other.pocketCommission_;
    pocketMarkup_ = other.pocketMarkup_;
    mirroringCommission_ = other.mirroringCommission_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    usedMargin_ = other.usedMargin_;
    trailingStopLoss_ = other.trailingStopLoss_;
    stopLossTriggerMethod_ = other.stopLossTriggerMethod_;
    moneyDigits_ = other.moneyDigits_;
    pnlConversionFeeRate_ = other.pnlConversionFeeRate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPosition Clone() {
    return new ProtoPosition(this);
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 1;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// ID of Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 1) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "tradeData" field.</summary>
  public const int TradeDataFieldNumber = 3;
  private global::ProtoTradeData tradeData_;
  /// <summary>
  /// Position/Order trading details entity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTradeData TradeData {
    get { return tradeData_; }
    set {
      tradeData_ = value;
    }
  }

  /// <summary>Field number for the "positionStatus" field.</summary>
  public const int PositionStatusFieldNumber = 4;
  private readonly static global::ProtoPositionStatus PositionStatusDefaultValue = global::ProtoPositionStatus.PositionStatusOpen;

  private global::ProtoPositionStatus positionStatus_;
  /// <summary>
  /// Current status of the Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoPositionStatus PositionStatus {
    get { if ((_hasBits0 & 2) != 0) { return positionStatus_; } else { return PositionStatusDefaultValue; } }
    set {
      _hasBits0 |= 2;
      positionStatus_ = value;
    }
  }
  /// <summary>Gets whether the "positionStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionStatus {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "positionStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionStatus() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "swap" field.</summary>
  public const int SwapFieldNumber = 5;
  private readonly static long SwapDefaultValue = 0L;

  private long swap_;
  /// <summary>
  /// Total amount of charged Swap on open Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Swap {
    get { if ((_hasBits0 & 4) != 0) { return swap_; } else { return SwapDefaultValue; } }
    set {
      _hasBits0 |= 4;
      swap_ = value;
    }
  }
  /// <summary>Gets whether the "swap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwap {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "swap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwap() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 6;
  private readonly static double PriceDefaultValue = 0D;

  private double price_;
  /// <summary>
  /// VWAP price of the Position based on all executions (Deals) linked to the Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double Price {
    get { if ((_hasBits0 & 8) != 0) { return price_; } else { return PriceDefaultValue; } }
    set {
      _hasBits0 |= 8;
      price_ = value;
    }
  }
  /// <summary>Gets whether the "price" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPrice {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "price" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPrice() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 7;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// Current Stop Loss price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double StopLoss {
    get { if ((_hasBits0 & 16) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 16;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLoss {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLoss() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 8;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// Current Take Profit price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double TakeProfit {
    get { if ((_hasBits0 & 32) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 32;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTakeProfit() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 10;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the last change of the Position, including amend SL/TP of the Position, execution of the related Order, cancel of the related Order, etc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "bookType" field.</summary>
  public const int BookTypeFieldNumber = 11;
  private readonly static global::ProtoBookType BookTypeDefaultValue = global::ProtoBookType.BookA;

  private global::ProtoBookType bookType_;
  /// <summary>
  /// Book type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoBookType BookType {
    get { if ((_hasBits0 & 128) != 0) { return bookType_; } else { return BookTypeDefaultValue; } }
    set {
      _hasBits0 |= 128;
      bookType_ = value;
    }
  }
  /// <summary>Gets whether the "bookType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBookType {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "bookType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBookType() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 13;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Current unrealized commission related to the Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 256) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 256;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "marginRate" field.</summary>
  public const int MarginRateFieldNumber = 14;
  private readonly static double MarginRateDefaultValue = 0D;

  private double marginRate_;
  /// <summary>
  /// Rate for used margin computation. Represented as Base/Deposit
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginRate {
    get { if ((_hasBits0 & 512) != 0) { return marginRate_; } else { return MarginRateDefaultValue; } }
    set {
      _hasBits0 |= 512;
      marginRate_ = value;
    }
  }
  /// <summary>Gets whether the "marginRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginRate {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "marginRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginRate() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "introducingBrokerCommission" field.</summary>
  public const int IntroducingBrokerCommissionFieldNumber = 16;
  private readonly static long IntroducingBrokerCommissionDefaultValue = 0L;

  private long introducingBrokerCommission_;
  /// <summary>
  /// Commission of Introducing Broker (IB)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerCommission {
    get { if ((_hasBits0 & 1024) != 0) { return introducingBrokerCommission_; } else { return IntroducingBrokerCommissionDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      introducingBrokerCommission_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommission {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommission() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "pocketCommission" field.</summary>
  public const int PocketCommissionFieldNumber = 17;
  private readonly static long PocketCommissionDefaultValue = 0L;

  private long pocketCommission_;
  /// <summary>
  /// Amount of commission, which Broker should pay to IB for introduced clients
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketCommission {
    get { if ((_hasBits0 & 2048) != 0) { return pocketCommission_; } else { return PocketCommissionDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      pocketCommission_ = value;
    }
  }
  /// <summary>Gets whether the "pocketCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketCommission {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "pocketCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketCommission() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "pocketMarkup" field.</summary>
  public const int PocketMarkupFieldNumber = 18;
  private readonly static long PocketMarkupDefaultValue = 0L;

  private long pocketMarkup_;
  /// <summary>
  /// Amount of markup (in points), which Broker should pay to IB for introduced clients
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketMarkup {
    get { if ((_hasBits0 & 4096) != 0) { return pocketMarkup_; } else { return PocketMarkupDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      pocketMarkup_ = value;
    }
  }
  /// <summary>Gets whether the "pocketMarkup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketMarkup {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "pocketMarkup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketMarkup() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "mirroringCommission" field.</summary>
  public const int MirroringCommissionFieldNumber = 20;
  private readonly static long MirroringCommissionDefaultValue = 0L;

  private long mirroringCommission_;
  /// <summary>
  /// Amount of unrealized commission related to following of Strategy Provider
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MirroringCommission {
    get { if ((_hasBits0 & 8192) != 0) { return mirroringCommission_; } else { return MirroringCommissionDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      mirroringCommission_ = value;
    }
  }
  /// <summary>Gets whether the "mirroringCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMirroringCommission {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "mirroringCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMirroringCommission() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 21;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then Position's Stop Loss is Guaranteed Stop Loss (GSL)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 16384) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "usedMargin" field.</summary>
  public const int UsedMarginFieldNumber = 23;
  private readonly static ulong UsedMarginDefaultValue = 0UL;

  private ulong usedMargin_;
  /// <summary>
  /// Amount of margin used for the Position in deposit currency
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong UsedMargin {
    get { if ((_hasBits0 & 32768) != 0) { return usedMargin_; } else { return UsedMarginDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      usedMargin_ = value;
    }
  }
  /// <summary>Gets whether the "usedMargin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUsedMargin {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "usedMargin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUsedMargin() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "trailingStopLoss" field.</summary>
  public const int TrailingStopLossFieldNumber = 24;
  private readonly static bool TrailingStopLossDefaultValue = false;

  private bool trailingStopLoss_;
  /// <summary>
  /// If TRUE then the Trailing Stop Loss is applied
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool TrailingStopLoss {
    get { if ((_hasBits0 & 65536) != 0) { return trailingStopLoss_; } else { return TrailingStopLossDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      trailingStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "trailingStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTrailingStopLoss {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "trailingStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTrailingStopLoss() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "stopLossTriggerMethod" field.</summary>
  public const int StopLossTriggerMethodFieldNumber = 25;
  private readonly static global::ProtoOrderTriggerMethod StopLossTriggerMethodDefaultValue = global::ProtoOrderTriggerMethod.Trade;

  private global::ProtoOrderTriggerMethod stopLossTriggerMethod_;
  /// <summary>
  /// Stop Trigger Method for SL/TP Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderTriggerMethod StopLossTriggerMethod {
    get { if ((_hasBits0 & 131072) != 0) { return stopLossTriggerMethod_; } else { return StopLossTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      stopLossTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopLossTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLossTriggerMethod {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "stopLossTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLossTriggerMethod() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 30;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects swap, commission, mirroringCommission, usedMargin
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 262144) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "pnlConversionFeeRate" field.</summary>
  public const int PnlConversionFeeRateFieldNumber = 31;
  private readonly static int PnlConversionFeeRateDefaultValue = 0;

  private int pnlConversionFeeRate_;
  /// <summary>
  /// Conversion Fee rate applied to the Deal in Trader's deposit Asset when Trader Symbol's quote Asset ID &lt;> Trader's deposit Asset ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PnlConversionFeeRate {
    get { if ((_hasBits0 & 524288) != 0) { return pnlConversionFeeRate_; } else { return PnlConversionFeeRateDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      pnlConversionFeeRate_ = value;
    }
  }
  /// <summary>Gets whether the "pnlConversionFeeRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPnlConversionFeeRate {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "pnlConversionFeeRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPnlConversionFeeRate() {
    _hasBits0 &= ~524288;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoPosition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoPosition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PositionId != other.PositionId) return false;
    if (!object.Equals(TradeData, other.TradeData)) return false;
    if (PositionStatus != other.PositionStatus) return false;
    if (Swap != other.Swap) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (BookType != other.BookType) return false;
    if (Commission != other.Commission) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRate, other.MarginRate)) return false;
    if (IntroducingBrokerCommission != other.IntroducingBrokerCommission) return false;
    if (PocketCommission != other.PocketCommission) return false;
    if (PocketMarkup != other.PocketMarkup) return false;
    if (MirroringCommission != other.MirroringCommission) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (UsedMargin != other.UsedMargin) return false;
    if (TrailingStopLoss != other.TrailingStopLoss) return false;
    if (StopLossTriggerMethod != other.StopLossTriggerMethod) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    if (PnlConversionFeeRate != other.PnlConversionFeeRate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (tradeData_ != null) hash ^= TradeData.GetHashCode();
    if (HasPositionStatus) hash ^= PositionStatus.GetHashCode();
    if (HasSwap) hash ^= Swap.GetHashCode();
    if (HasPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasBookType) hash ^= BookType.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasMarginRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRate);
    if (HasIntroducingBrokerCommission) hash ^= IntroducingBrokerCommission.GetHashCode();
    if (HasPocketCommission) hash ^= PocketCommission.GetHashCode();
    if (HasPocketMarkup) hash ^= PocketMarkup.GetHashCode();
    if (HasMirroringCommission) hash ^= MirroringCommission.GetHashCode();
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasUsedMargin) hash ^= UsedMargin.GetHashCode();
    if (HasTrailingStopLoss) hash ^= TrailingStopLoss.GetHashCode();
    if (HasStopLossTriggerMethod) hash ^= StopLossTriggerMethod.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (HasPnlConversionFeeRate) hash ^= PnlConversionFeeRate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPositionId) {
      output.WriteRawTag(8);
      output.WriteInt64(PositionId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TradeData);
    }
    if (HasPositionStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PositionStatus);
    }
    if (HasSwap) {
      output.WriteRawTag(40);
      output.WriteInt64(Swap);
    }
    if (HasPrice) {
      output.WriteRawTag(49);
      output.WriteDouble(Price);
    }
    if (HasStopLoss) {
      output.WriteRawTag(57);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(65);
      output.WriteDouble(TakeProfit);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(80);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasBookType) {
      output.WriteRawTag(88);
      output.WriteEnum((int) BookType);
    }
    if (HasCommission) {
      output.WriteRawTag(104);
      output.WriteInt64(Commission);
    }
    if (HasMarginRate) {
      output.WriteRawTag(113);
      output.WriteDouble(MarginRate);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(PocketMarkup);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(MirroringCommission);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(168, 1);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasUsedMargin) {
      output.WriteRawTag(184, 1);
      output.WriteUInt64(UsedMargin);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(192, 1);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(200, 1);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(240, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFeeRate) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPositionId) {
      output.WriteRawTag(8);
      output.WriteInt64(PositionId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TradeData);
    }
    if (HasPositionStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PositionStatus);
    }
    if (HasSwap) {
      output.WriteRawTag(40);
      output.WriteInt64(Swap);
    }
    if (HasPrice) {
      output.WriteRawTag(49);
      output.WriteDouble(Price);
    }
    if (HasStopLoss) {
      output.WriteRawTag(57);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(65);
      output.WriteDouble(TakeProfit);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(80);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasBookType) {
      output.WriteRawTag(88);
      output.WriteEnum((int) BookType);
    }
    if (HasCommission) {
      output.WriteRawTag(104);
      output.WriteInt64(Commission);
    }
    if (HasMarginRate) {
      output.WriteRawTag(113);
      output.WriteDouble(MarginRate);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(PocketMarkup);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(MirroringCommission);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(168, 1);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasUsedMargin) {
      output.WriteRawTag(184, 1);
      output.WriteUInt64(UsedMargin);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(192, 1);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(200, 1);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(240, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFeeRate) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (tradeData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeData);
    }
    if (HasPositionStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositionStatus);
    }
    if (HasSwap) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Swap);
    }
    if (HasPrice) {
      size += 1 + 8;
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 1 + 8;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasBookType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BookType);
    }
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasMarginRate) {
      size += 1 + 8;
    }
    if (HasIntroducingBrokerCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketCommission);
    }
    if (HasPocketMarkup) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketMarkup);
    }
    if (HasMirroringCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MirroringCommission);
    }
    if (HasGuaranteedStopLoss) {
      size += 2 + 1;
    }
    if (HasUsedMargin) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(UsedMargin);
    }
    if (HasTrailingStopLoss) {
      size += 2 + 1;
    }
    if (HasStopLossTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopLossTriggerMethod);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (HasPnlConversionFeeRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoPosition other) {
    if (other == null) {
      return;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.tradeData_ != null) {
      if (tradeData_ == null) {
        TradeData = new global::ProtoTradeData();
      }
      TradeData.MergeFrom(other.TradeData);
    }
    if (other.HasPositionStatus) {
      PositionStatus = other.PositionStatus;
    }
    if (other.HasSwap) {
      Swap = other.Swap;
    }
    if (other.HasPrice) {
      Price = other.Price;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasBookType) {
      BookType = other.BookType;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasMarginRate) {
      MarginRate = other.MarginRate;
    }
    if (other.HasIntroducingBrokerCommission) {
      IntroducingBrokerCommission = other.IntroducingBrokerCommission;
    }
    if (other.HasPocketCommission) {
      PocketCommission = other.PocketCommission;
    }
    if (other.HasPocketMarkup) {
      PocketMarkup = other.PocketMarkup;
    }
    if (other.HasMirroringCommission) {
      MirroringCommission = other.MirroringCommission;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasUsedMargin) {
      UsedMargin = other.UsedMargin;
    }
    if (other.HasTrailingStopLoss) {
      TrailingStopLoss = other.TrailingStopLoss;
    }
    if (other.HasStopLossTriggerMethod) {
      StopLossTriggerMethod = other.StopLossTriggerMethod;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    if (other.HasPnlConversionFeeRate) {
      PnlConversionFeeRate = other.PnlConversionFeeRate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PositionId = input.ReadInt64();
          break;
        }
        case 26: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoTradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 32: {
          PositionStatus = (global::ProtoPositionStatus) input.ReadEnum();
          break;
        }
        case 40: {
          Swap = input.ReadInt64();
          break;
        }
        case 49: {
          Price = input.ReadDouble();
          break;
        }
        case 57: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 65: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 80: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 88: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 104: {
          Commission = input.ReadInt64();
          break;
        }
        case 113: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 128: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 136: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 144: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 160: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 168: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 184: {
          UsedMargin = input.ReadUInt64();
          break;
        }
        case 192: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 200: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 240: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 248: {
          PnlConversionFeeRate = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          PositionId = input.ReadInt64();
          break;
        }
        case 26: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoTradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 32: {
          PositionStatus = (global::ProtoPositionStatus) input.ReadEnum();
          break;
        }
        case 40: {
          Swap = input.ReadInt64();
          break;
        }
        case 49: {
          Price = input.ReadDouble();
          break;
        }
        case 57: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 65: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 80: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 88: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 104: {
          Commission = input.ReadInt64();
          break;
        }
        case 113: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 128: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 136: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 144: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 160: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 168: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 184: {
          UsedMargin = input.ReadUInt64();
          break;
        }
        case 192: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 200: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 240: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 248: {
          PnlConversionFeeRate = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Order entity
/// </summary>
public sealed partial class ProtoOrder : pb::IMessage<ProtoOrder>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOrder> _parser = new pb::MessageParser<ProtoOrder>(() => new ProtoOrder());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  private int _hasBits1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOrder> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrder() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrder(ProtoOrder other) : this() {
    _hasBits0 = other._hasBits0;
    _hasBits1 = other._hasBits1;
    orderId_ = other.orderId_;
    tradeData_ = other.tradeData_ != null ? other.tradeData_.Clone() : null;
    orderType_ = other.orderType_;
    orderStatus_ = other.orderStatus_;
    expirationTimestamp_ = other.expirationTimestamp_;
    executionPrice_ = other.executionPrice_;
    executedVolume_ = other.executedVolume_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    bookType_ = other.bookType_;
    method_ = other.method_;
    baseSlippagePrice_ = other.baseSlippagePrice_;
    closingOrder_ = other.closingOrder_;
    limitPrice_ = other.limitPrice_;
    stopPrice_ = other.stopPrice_;
    clientOrderId_ = other.clientOrderId_;
    commission_ = other.commission_;
    timeInForce_ = other.timeInForce_;
    positionId_ = other.positionId_;
    relativeStopLoss_ = other.relativeStopLoss_;
    relativeTakeProfit_ = other.relativeTakeProfit_;
    introducingBrokerCommission_ = other.introducingBrokerCommission_;
    pocketCommission_ = other.pocketCommission_;
    pocketMarkup_ = other.pocketMarkup_;
    mirroringCommission_ = other.mirroringCommission_;
    originalClientOrderId_ = other.originalClientOrderId_;
    checkTolerance_ = other.checkTolerance_;
    login_ = other.login_;
    name_ = other.name_;
    lastName_ = other.lastName_;
    isStopOut_ = other.isStopOut_;
    trailingStopLoss_ = other.trailingStopLoss_;
    closeWithPID_ = other.closeWithPID_;
    stopTriggerMethod_ = other.stopTriggerMethod_;
    stopLossTriggerMethod_ = other.stopLossTriggerMethod_;
    slippageInPoints_ = other.slippageInPoints_;
    desiredOpenTimestamp_ = other.desiredOpenTimestamp_;
    ocoOrderId_ = other.ocoOrderId_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrder Clone() {
    return new ProtoOrder(this);
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 1;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// ID of the Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OrderId {
    get { if ((_hasBits0 & 1) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "tradeData" field.</summary>
  public const int TradeDataFieldNumber = 2;
  private global::ProtoTradeData tradeData_;
  /// <summary>
  /// Detailed Trader's data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTradeData TradeData {
    get { return tradeData_; }
    set {
      tradeData_ = value;
    }
  }

  /// <summary>Field number for the "orderType" field.</summary>
  public const int OrderTypeFieldNumber = 3;
  private readonly static global::ProtoOrderType OrderTypeDefaultValue = global::ProtoOrderType.Market;

  private global::ProtoOrderType orderType_;
  /// <summary>
  /// Order type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderType OrderType {
    get { if ((_hasBits0 & 2) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      orderType_ = value;
    }
  }
  /// <summary>Gets whether the "orderType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "orderType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "orderStatus" field.</summary>
  public const int OrderStatusFieldNumber = 4;
  private readonly static global::ProtoOrderStatus OrderStatusDefaultValue = global::ProtoOrderStatus.OrderStatusAccepted;

  private global::ProtoOrderStatus orderStatus_;
  /// <summary>
  /// Order status
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderStatus OrderStatus {
    get { if ((_hasBits0 & 4) != 0) { return orderStatus_; } else { return OrderStatusDefaultValue; } }
    set {
      _hasBits0 |= 4;
      orderStatus_ = value;
    }
  }
  /// <summary>Gets whether the "orderStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderStatus {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "orderStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderStatus() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "expirationTimestamp" field.</summary>
  public const int ExpirationTimestampFieldNumber = 6;
  private readonly static long ExpirationTimestampDefaultValue = 0L;

  private long expirationTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds, if the Order has time in force GTD then expiration is specified
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExpirationTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return expirationTimestamp_; } else { return ExpirationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      expirationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "expirationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExpirationTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "expirationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExpirationTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "executionPrice" field.</summary>
  public const int ExecutionPriceFieldNumber = 9;
  private readonly static double ExecutionPriceDefaultValue = 0D;

  private double executionPrice_;
  /// <summary>
  /// Price at which an Order was executed. For Orders with FILLED status
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double ExecutionPrice {
    get { if ((_hasBits0 & 16) != 0) { return executionPrice_; } else { return ExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      executionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "executionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPrice {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "executionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPrice() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "executedVolume" field.</summary>
  public const int ExecutedVolumeFieldNumber = 10;
  private readonly static long ExecutedVolumeDefaultValue = 0L;

  private long executedVolume_;
  /// <summary>
  /// Part of the volume that was filled
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutedVolume {
    get { if ((_hasBits0 & 32) != 0) { return executedVolume_; } else { return ExecutedVolumeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      executedVolume_ = value;
    }
  }
  /// <summary>Gets whether the "executedVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutedVolume {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "executedVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutedVolume() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 11;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// Absolute Stop Loss price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double StopLoss {
    get { if ((_hasBits0 & 64) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 64;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLoss {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLoss() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 12;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// Absolute Take Profit price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double TakeProfit {
    get { if ((_hasBits0 & 128) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 128;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTakeProfit() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 13;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the last update of the Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 256) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 256;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "bookType" field.</summary>
  public const int BookTypeFieldNumber = 14;
  private readonly static global::ProtoBookType BookTypeDefaultValue = global::ProtoBookType.BookA;

  private global::ProtoBookType bookType_;
  /// <summary>
  /// Book type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoBookType BookType {
    get { if ((_hasBits0 & 512) != 0) { return bookType_; } else { return BookTypeDefaultValue; } }
    set {
      _hasBits0 |= 512;
      bookType_ = value;
    }
  }
  /// <summary>Gets whether the "bookType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBookType {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "bookType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBookType() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "method" field.</summary>
  public const int MethodFieldNumber = 16;
  private readonly static string MethodDefaultValue = "";

  private string method_;
  /// <summary>
  /// Method specified during Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Method {
    get { return method_ ?? MethodDefaultValue; }
    set {
      method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "method" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMethod {
    get { return method_ != null; }
  }
  /// <summary>Clears the value of the "method" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMethod() {
    method_ = null;
  }

  /// <summary>Field number for the "baseSlippagePrice" field.</summary>
  public const int BaseSlippagePriceFieldNumber = 18;
  private readonly static double BaseSlippagePriceDefaultValue = 0D;

  private double baseSlippagePrice_;
  /// <summary>
  /// Used for Market Range Order with combination of slippageInPoints to specify price range where Order can be executed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double BaseSlippagePrice {
    get { if ((_hasBits0 & 1024) != 0) { return baseSlippagePrice_; } else { return BaseSlippagePriceDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      baseSlippagePrice_ = value;
    }
  }
  /// <summary>Gets whether the "baseSlippagePrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseSlippagePrice {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "baseSlippagePrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseSlippagePrice() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "closingOrder" field.</summary>
  public const int ClosingOrderFieldNumber = 20;
  private readonly static bool ClosingOrderDefaultValue = false;

  private bool closingOrder_;
  /// <summary>
  /// If TRUE then the Order is closing part of whole Position. Must have specified positionId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ClosingOrder {
    get { if ((_hasBits0 & 2048) != 0) { return closingOrder_; } else { return ClosingOrderDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      closingOrder_ = value;
    }
  }
  /// <summary>Gets whether the "closingOrder" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosingOrder {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "closingOrder" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosingOrder() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "limitPrice" field.</summary>
  public const int LimitPriceFieldNumber = 21;
  private readonly static double LimitPriceDefaultValue = 0D;

  private double limitPrice_;
  /// <summary>
  /// Valid only for LIMIT Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double LimitPrice {
    get { if ((_hasBits0 & 4096) != 0) { return limitPrice_; } else { return LimitPriceDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      limitPrice_ = value;
    }
  }
  /// <summary>Gets whether the "limitPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitPrice {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "limitPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitPrice() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "stopPrice" field.</summary>
  public const int StopPriceFieldNumber = 22;
  private readonly static double StopPriceDefaultValue = 0D;

  private double stopPrice_;
  /// <summary>
  /// Valid only for STOP and STOP_LIMIT Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double StopPrice {
    get { if ((_hasBits0 & 8192) != 0) { return stopPrice_; } else { return StopPriceDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      stopPrice_ = value;
    }
  }
  /// <summary>Gets whether the "stopPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopPrice {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "stopPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopPrice() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "clientOrderId" field.</summary>
  public const int ClientOrderIdFieldNumber = 23;
  private readonly static string ClientOrderIdDefaultValue = "";

  private string clientOrderId_;
  /// <summary>
  /// Optional ClientOrderId. Max Length = 50 chars
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientOrderId {
    get { return clientOrderId_ ?? ClientOrderIdDefaultValue; }
    set {
      clientOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientOrderId {
    get { return clientOrderId_ != null; }
  }
  /// <summary>Clears the value of the "clientOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientOrderId() {
    clientOrderId_ = null;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 24;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Amount of trading commission
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 16384) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "timeInForce" field.</summary>
  public const int TimeInForceFieldNumber = 26;
  private readonly static global::ProtoTimeInForce TimeInForceDefaultValue = global::ProtoTimeInForce.ImmediateOrCancel;

  private global::ProtoTimeInForce timeInForce_;
  /// <summary>
  /// Order's time in force. Depends on Order type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTimeInForce TimeInForce {
    get { if ((_hasBits0 & 32768) != 0) { return timeInForce_; } else { return TimeInForceDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      timeInForce_ = value;
    }
  }
  /// <summary>Gets whether the "timeInForce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimeInForce {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "timeInForce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimeInForce() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 30;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// ID of Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 65536) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "relativeStopLoss" field.</summary>
  public const int RelativeStopLossFieldNumber = 32;
  private readonly static long RelativeStopLossDefaultValue = 0L;

  private long relativeStopLoss_;
  /// <summary>
  /// Relative Stop Loss distance. Specifies distance between execution price of the Order and placed Stop Loss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RelativeStopLoss {
    get { if ((_hasBits0 & 131072) != 0) { return relativeStopLoss_; } else { return RelativeStopLossDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      relativeStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "relativeStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelativeStopLoss {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "relativeStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelativeStopLoss() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "relativeTakeProfit" field.</summary>
  public const int RelativeTakeProfitFieldNumber = 33;
  private readonly static long RelativeTakeProfitDefaultValue = 0L;

  private long relativeTakeProfit_;
  /// <summary>
  /// Relative Take Profit distance. Specifies distance between execution price of the Order and placed Take Profit
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RelativeTakeProfit {
    get { if ((_hasBits0 & 262144) != 0) { return relativeTakeProfit_; } else { return RelativeTakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      relativeTakeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "relativeTakeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelativeTakeProfit {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "relativeTakeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelativeTakeProfit() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "introducingBrokerCommission" field.</summary>
  public const int IntroducingBrokerCommissionFieldNumber = 34;
  private readonly static long IntroducingBrokerCommissionDefaultValue = 0L;

  private long introducingBrokerCommission_;
  /// <summary>
  /// Commission of Introducing Broker (IB)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerCommission {
    get { if ((_hasBits0 & 524288) != 0) { return introducingBrokerCommission_; } else { return IntroducingBrokerCommissionDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      introducingBrokerCommission_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommission {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommission() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "pocketCommission" field.</summary>
  public const int PocketCommissionFieldNumber = 35;
  private readonly static long PocketCommissionDefaultValue = 0L;

  private long pocketCommission_;
  /// <summary>
  /// Amount of commission, which Broker should pay to IB for introduced clients
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketCommission {
    get { if ((_hasBits0 & 1048576) != 0) { return pocketCommission_; } else { return PocketCommissionDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      pocketCommission_ = value;
    }
  }
  /// <summary>Gets whether the "pocketCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketCommission {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "pocketCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketCommission() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "pocketMarkup" field.</summary>
  public const int PocketMarkupFieldNumber = 36;
  private readonly static long PocketMarkupDefaultValue = 0L;

  private long pocketMarkup_;
  /// <summary>
  /// Amount of markup (in points), which Broker should pay to IB for introduced clients
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketMarkup {
    get { if ((_hasBits0 & 2097152) != 0) { return pocketMarkup_; } else { return PocketMarkupDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      pocketMarkup_ = value;
    }
  }
  /// <summary>Gets whether the "pocketMarkup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketMarkup {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "pocketMarkup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketMarkup() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "mirroringCommission" field.</summary>
  public const int MirroringCommissionFieldNumber = 39;
  private readonly static long MirroringCommissionDefaultValue = 0L;

  private long mirroringCommission_;
  /// <summary>
  /// Amount of unrealized commission related to following of Strategy Provider
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MirroringCommission {
    get { if ((_hasBits0 & 4194304) != 0) { return mirroringCommission_; } else { return MirroringCommissionDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      mirroringCommission_ = value;
    }
  }
  /// <summary>Gets whether the "mirroringCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMirroringCommission {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "mirroringCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMirroringCommission() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "originalClientOrderId" field.</summary>
  public const int OriginalClientOrderIdFieldNumber = 40;
  private readonly static string OriginalClientOrderIdDefaultValue = "";

  private string originalClientOrderId_;
  /// <summary>
  /// ClientOrderId specified by Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string OriginalClientOrderId {
    get { return originalClientOrderId_ ?? OriginalClientOrderIdDefaultValue; }
    set {
      originalClientOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "originalClientOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOriginalClientOrderId {
    get { return originalClientOrderId_ != null; }
  }
  /// <summary>Clears the value of the "originalClientOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOriginalClientOrderId() {
    originalClientOrderId_ = null;
  }

  /// <summary>Field number for the "checkTolerance" field.</summary>
  public const int CheckToleranceFieldNumber = 41;
  private readonly static bool CheckToleranceDefaultValue = false;

  private bool checkTolerance_;
  /// <summary>
  /// If TRUE then tolerance check is applied and Order may be rejected due to significant price change. Applied only for B-book Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckTolerance {
    get { if ((_hasBits0 & 8388608) != 0) { return checkTolerance_; } else { return CheckToleranceDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      checkTolerance_ = value;
    }
  }
  /// <summary>Gets whether the "checkTolerance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCheckTolerance {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "checkTolerance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCheckTolerance() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "login" field.</summary>
  public const int LoginFieldNumber = 42;
  private readonly static long LoginDefaultValue = 0L;

  private long login_;
  /// <summary>
  /// Login of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Login {
    get { if ((_hasBits0 & 16777216) != 0) { return login_; } else { return LoginDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      login_ = value;
    }
  }
  /// <summary>Gets whether the "login" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLogin {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "login" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLogin() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 43;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "lastName" field.</summary>
  public const int LastNameFieldNumber = 44;
  private readonly static string LastNameDefaultValue = "";

  private string lastName_;
  /// <summary>
  /// Last name of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LastName {
    get { return lastName_ ?? LastNameDefaultValue; }
    set {
      lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "lastName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastName {
    get { return lastName_ != null; }
  }
  /// <summary>Clears the value of the "lastName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastName() {
    lastName_ = null;
  }

  /// <summary>Field number for the "isStopOut" field.</summary>
  public const int IsStopOutFieldNumber = 45;
  private readonly static bool IsStopOutDefaultValue = false;

  private bool isStopOut_;
  /// <summary>
  /// If TRUE then Order was Stopped Out from server's side
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsStopOut {
    get { if ((_hasBits0 & 33554432) != 0) { return isStopOut_; } else { return IsStopOutDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      isStopOut_ = value;
    }
  }
  /// <summary>Gets whether the "isStopOut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsStopOut {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "isStopOut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsStopOut() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "trailingStopLoss" field.</summary>
  public const int TrailingStopLossFieldNumber = 46;
  private readonly static bool TrailingStopLossDefaultValue = false;

  private bool trailingStopLoss_;
  /// <summary>
  /// If TRUE then the Trailing Stop Loss is applied to order. Valid for STOP_LOSS_TAKE_PROFIT Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool TrailingStopLoss {
    get { if ((_hasBits0 & 67108864) != 0) { return trailingStopLoss_; } else { return TrailingStopLossDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      trailingStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "trailingStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTrailingStopLoss {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "trailingStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTrailingStopLoss() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "closeWithPID" field.</summary>
  public const int CloseWithPIDFieldNumber = 47;
  private readonly static long CloseWithPIDDefaultValue = 0L;

  private long closeWithPID_;
  /// <summary>
  /// Some number which may be used to aggregate Deals into Positions on the hedged accounts in UI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CloseWithPID {
    get { if ((_hasBits0 & 134217728) != 0) { return closeWithPID_; } else { return CloseWithPIDDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      closeWithPID_ = value;
    }
  }
  /// <summary>Gets whether the "closeWithPID" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCloseWithPID {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "closeWithPID" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCloseWithPID() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "stopTriggerMethod" field.</summary>
  public const int StopTriggerMethodFieldNumber = 48;
  private readonly static global::ProtoOrderTriggerMethod StopTriggerMethodDefaultValue = global::ProtoOrderTriggerMethod.Trade;

  private global::ProtoOrderTriggerMethod stopTriggerMethod_;
  /// <summary>
  /// Trigger Method for the STOP or the STOP_LIMIT pending Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderTriggerMethod StopTriggerMethod {
    get { if ((_hasBits0 & 268435456) != 0) { return stopTriggerMethod_; } else { return StopTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      stopTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopTriggerMethod {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "stopTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopTriggerMethod() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "stopLossTriggerMethod" field.</summary>
  public const int StopLossTriggerMethodFieldNumber = 49;
  private readonly static global::ProtoOrderTriggerMethod StopLossTriggerMethodDefaultValue = global::ProtoOrderTriggerMethod.Trade;

  private global::ProtoOrderTriggerMethod stopLossTriggerMethod_;
  /// <summary>
  /// Stop Trigger Method for SL/TP Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderTriggerMethod StopLossTriggerMethod {
    get { if ((_hasBits0 & 536870912) != 0) { return stopLossTriggerMethod_; } else { return StopLossTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      stopLossTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopLossTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLossTriggerMethod {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "stopLossTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLossTriggerMethod() {
    _hasBits0 &= ~536870912;
  }

  /// <summary>Field number for the "slippageInPoints" field.</summary>
  public const int SlippageInPointsFieldNumber = 50;
  private readonly static int SlippageInPointsDefaultValue = 0;

  private int slippageInPoints_;
  /// <summary>
  /// Used for Market Range and STOP_LIMIT Orders to to specify price range were Order can be executed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SlippageInPoints {
    get { if ((_hasBits0 & 1073741824) != 0) { return slippageInPoints_; } else { return SlippageInPointsDefaultValue; } }
    set {
      _hasBits0 |= 1073741824;
      slippageInPoints_ = value;
    }
  }
  /// <summary>Gets whether the "slippageInPoints" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSlippageInPoints {
    get { return (_hasBits0 & 1073741824) != 0; }
  }
  /// <summary>Clears the value of the "slippageInPoints" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSlippageInPoints() {
    _hasBits0 &= ~1073741824;
  }

  /// <summary>Field number for the "desiredOpenTimestamp" field.</summary>
  public const int DesiredOpenTimestampFieldNumber = 51;
  private readonly static long DesiredOpenTimestampDefaultValue = 0L;

  private long desiredOpenTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DesiredOpenTimestamp {
    get { if ((_hasBits0 & -2147483648) != 0) { return desiredOpenTimestamp_; } else { return DesiredOpenTimestampDefaultValue; } }
    set {
      _hasBits0 |= -2147483648;
      desiredOpenTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "desiredOpenTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDesiredOpenTimestamp {
    get { return (_hasBits0 & -2147483648) != 0; }
  }
  /// <summary>Clears the value of the "desiredOpenTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDesiredOpenTimestamp() {
    _hasBits0 &= ~-2147483648;
  }

  /// <summary>Field number for the "ocoOrderId" field.</summary>
  public const int OcoOrderIdFieldNumber = 52;
  private readonly static long OcoOrderIdDefaultValue = 0L;

  private long ocoOrderId_;
  /// <summary>
  /// Link to ID of OCO (one cancels other) Order. OCO Orders is a pair of pending Orders (only STOP, LIMIT and STOP_LIMIT could be linked) Orders where one Order should be cancelled as soon as another Order changes it's status from Accepted to Filled
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OcoOrderId {
    get { if ((_hasBits1 & 1) != 0) { return ocoOrderId_; } else { return OcoOrderIdDefaultValue; } }
    set {
      _hasBits1 |= 1;
      ocoOrderId_ = value;
    }
  }
  /// <summary>Gets whether the "ocoOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOcoOrderId {
    get { return (_hasBits1 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ocoOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOcoOrderId() {
    _hasBits1 &= ~1;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 54;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission, pocketCommission,mirroringCommission
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits1 & 2) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits1 |= 2;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits1 & 2) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits1 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOrder);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOrder other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OrderId != other.OrderId) return false;
    if (!object.Equals(TradeData, other.TradeData)) return false;
    if (OrderType != other.OrderType) return false;
    if (OrderStatus != other.OrderStatus) return false;
    if (ExpirationTimestamp != other.ExpirationTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExecutionPrice, other.ExecutionPrice)) return false;
    if (ExecutedVolume != other.ExecutedVolume) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (BookType != other.BookType) return false;
    if (Method != other.Method) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseSlippagePrice, other.BaseSlippagePrice)) return false;
    if (ClosingOrder != other.ClosingOrder) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopPrice, other.StopPrice)) return false;
    if (ClientOrderId != other.ClientOrderId) return false;
    if (Commission != other.Commission) return false;
    if (TimeInForce != other.TimeInForce) return false;
    if (PositionId != other.PositionId) return false;
    if (RelativeStopLoss != other.RelativeStopLoss) return false;
    if (RelativeTakeProfit != other.RelativeTakeProfit) return false;
    if (IntroducingBrokerCommission != other.IntroducingBrokerCommission) return false;
    if (PocketCommission != other.PocketCommission) return false;
    if (PocketMarkup != other.PocketMarkup) return false;
    if (MirroringCommission != other.MirroringCommission) return false;
    if (OriginalClientOrderId != other.OriginalClientOrderId) return false;
    if (CheckTolerance != other.CheckTolerance) return false;
    if (Login != other.Login) return false;
    if (Name != other.Name) return false;
    if (LastName != other.LastName) return false;
    if (IsStopOut != other.IsStopOut) return false;
    if (TrailingStopLoss != other.TrailingStopLoss) return false;
    if (CloseWithPID != other.CloseWithPID) return false;
    if (StopTriggerMethod != other.StopTriggerMethod) return false;
    if (StopLossTriggerMethod != other.StopLossTriggerMethod) return false;
    if (SlippageInPoints != other.SlippageInPoints) return false;
    if (DesiredOpenTimestamp != other.DesiredOpenTimestamp) return false;
    if (OcoOrderId != other.OcoOrderId) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (tradeData_ != null) hash ^= TradeData.GetHashCode();
    if (HasOrderType) hash ^= OrderType.GetHashCode();
    if (HasOrderStatus) hash ^= OrderStatus.GetHashCode();
    if (HasExpirationTimestamp) hash ^= ExpirationTimestamp.GetHashCode();
    if (HasExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExecutionPrice);
    if (HasExecutedVolume) hash ^= ExecutedVolume.GetHashCode();
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasBookType) hash ^= BookType.GetHashCode();
    if (HasMethod) hash ^= Method.GetHashCode();
    if (HasBaseSlippagePrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseSlippagePrice);
    if (HasClosingOrder) hash ^= ClosingOrder.GetHashCode();
    if (HasLimitPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
    if (HasStopPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopPrice);
    if (HasClientOrderId) hash ^= ClientOrderId.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasTimeInForce) hash ^= TimeInForce.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasRelativeStopLoss) hash ^= RelativeStopLoss.GetHashCode();
    if (HasRelativeTakeProfit) hash ^= RelativeTakeProfit.GetHashCode();
    if (HasIntroducingBrokerCommission) hash ^= IntroducingBrokerCommission.GetHashCode();
    if (HasPocketCommission) hash ^= PocketCommission.GetHashCode();
    if (HasPocketMarkup) hash ^= PocketMarkup.GetHashCode();
    if (HasMirroringCommission) hash ^= MirroringCommission.GetHashCode();
    if (HasOriginalClientOrderId) hash ^= OriginalClientOrderId.GetHashCode();
    if (HasCheckTolerance) hash ^= CheckTolerance.GetHashCode();
    if (HasLogin) hash ^= Login.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasLastName) hash ^= LastName.GetHashCode();
    if (HasIsStopOut) hash ^= IsStopOut.GetHashCode();
    if (HasTrailingStopLoss) hash ^= TrailingStopLoss.GetHashCode();
    if (HasCloseWithPID) hash ^= CloseWithPID.GetHashCode();
    if (HasStopTriggerMethod) hash ^= StopTriggerMethod.GetHashCode();
    if (HasStopLossTriggerMethod) hash ^= StopLossTriggerMethod.GetHashCode();
    if (HasSlippageInPoints) hash ^= SlippageInPoints.GetHashCode();
    if (HasDesiredOpenTimestamp) hash ^= DesiredOpenTimestamp.GetHashCode();
    if (HasOcoOrderId) hash ^= OcoOrderId.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasOrderId) {
      output.WriteRawTag(8);
      output.WriteInt64(OrderId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TradeData);
    }
    if (HasOrderType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) OrderType);
    }
    if (HasOrderStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) OrderStatus);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(73);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasExecutedVolume) {
      output.WriteRawTag(80);
      output.WriteInt64(ExecutedVolume);
    }
    if (HasStopLoss) {
      output.WriteRawTag(89);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(97);
      output.WriteDouble(TakeProfit);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(104);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasBookType) {
      output.WriteRawTag(112);
      output.WriteEnum((int) BookType);
    }
    if (HasMethod) {
      output.WriteRawTag(130, 1);
      output.WriteString(Method);
    }
    if (HasBaseSlippagePrice) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(BaseSlippagePrice);
    }
    if (HasClosingOrder) {
      output.WriteRawTag(160, 1);
      output.WriteBool(ClosingOrder);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(169, 1);
      output.WriteDouble(LimitPrice);
    }
    if (HasStopPrice) {
      output.WriteRawTag(177, 1);
      output.WriteDouble(StopPrice);
    }
    if (HasClientOrderId) {
      output.WriteRawTag(186, 1);
      output.WriteString(ClientOrderId);
    }
    if (HasCommission) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(Commission);
    }
    if (HasTimeInForce) {
      output.WriteRawTag(208, 1);
      output.WriteEnum((int) TimeInForce);
    }
    if (HasPositionId) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(PositionId);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(136, 2);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(144, 2);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(160, 2);
      output.WriteInt64(PocketMarkup);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(184, 2);
      output.WriteInt64(MirroringCommission);
    }
    if (HasOriginalClientOrderId) {
      output.WriteRawTag(194, 2);
      output.WriteString(OriginalClientOrderId);
    }
    if (HasCheckTolerance) {
      output.WriteRawTag(200, 2);
      output.WriteBool(CheckTolerance);
    }
    if (HasLogin) {
      output.WriteRawTag(208, 2);
      output.WriteInt64(Login);
    }
    if (HasName) {
      output.WriteRawTag(218, 2);
      output.WriteString(Name);
    }
    if (HasLastName) {
      output.WriteRawTag(226, 2);
      output.WriteString(LastName);
    }
    if (HasIsStopOut) {
      output.WriteRawTag(232, 2);
      output.WriteBool(IsStopOut);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(240, 2);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasCloseWithPID) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(CloseWithPID);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(128, 3);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(136, 3);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasSlippageInPoints) {
      output.WriteRawTag(144, 3);
      output.WriteInt32(SlippageInPoints);
    }
    if (HasDesiredOpenTimestamp) {
      output.WriteRawTag(152, 3);
      output.WriteInt64(DesiredOpenTimestamp);
    }
    if (HasOcoOrderId) {
      output.WriteRawTag(160, 3);
      output.WriteInt64(OcoOrderId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(176, 3);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasOrderId) {
      output.WriteRawTag(8);
      output.WriteInt64(OrderId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TradeData);
    }
    if (HasOrderType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) OrderType);
    }
    if (HasOrderStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) OrderStatus);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(73);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasExecutedVolume) {
      output.WriteRawTag(80);
      output.WriteInt64(ExecutedVolume);
    }
    if (HasStopLoss) {
      output.WriteRawTag(89);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(97);
      output.WriteDouble(TakeProfit);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(104);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasBookType) {
      output.WriteRawTag(112);
      output.WriteEnum((int) BookType);
    }
    if (HasMethod) {
      output.WriteRawTag(130, 1);
      output.WriteString(Method);
    }
    if (HasBaseSlippagePrice) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(BaseSlippagePrice);
    }
    if (HasClosingOrder) {
      output.WriteRawTag(160, 1);
      output.WriteBool(ClosingOrder);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(169, 1);
      output.WriteDouble(LimitPrice);
    }
    if (HasStopPrice) {
      output.WriteRawTag(177, 1);
      output.WriteDouble(StopPrice);
    }
    if (HasClientOrderId) {
      output.WriteRawTag(186, 1);
      output.WriteString(ClientOrderId);
    }
    if (HasCommission) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(Commission);
    }
    if (HasTimeInForce) {
      output.WriteRawTag(208, 1);
      output.WriteEnum((int) TimeInForce);
    }
    if (HasPositionId) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(PositionId);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(136, 2);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(144, 2);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(160, 2);
      output.WriteInt64(PocketMarkup);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(184, 2);
      output.WriteInt64(MirroringCommission);
    }
    if (HasOriginalClientOrderId) {
      output.WriteRawTag(194, 2);
      output.WriteString(OriginalClientOrderId);
    }
    if (HasCheckTolerance) {
      output.WriteRawTag(200, 2);
      output.WriteBool(CheckTolerance);
    }
    if (HasLogin) {
      output.WriteRawTag(208, 2);
      output.WriteInt64(Login);
    }
    if (HasName) {
      output.WriteRawTag(218, 2);
      output.WriteString(Name);
    }
    if (HasLastName) {
      output.WriteRawTag(226, 2);
      output.WriteString(LastName);
    }
    if (HasIsStopOut) {
      output.WriteRawTag(232, 2);
      output.WriteBool(IsStopOut);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(240, 2);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasCloseWithPID) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(CloseWithPID);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(128, 3);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(136, 3);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasSlippageInPoints) {
      output.WriteRawTag(144, 3);
      output.WriteInt32(SlippageInPoints);
    }
    if (HasDesiredOpenTimestamp) {
      output.WriteRawTag(152, 3);
      output.WriteInt64(DesiredOpenTimestamp);
    }
    if (HasOcoOrderId) {
      output.WriteRawTag(160, 3);
      output.WriteInt64(OcoOrderId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(176, 3);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (tradeData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeData);
    }
    if (HasOrderType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
    }
    if (HasOrderStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderStatus);
    }
    if (HasExpirationTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimestamp);
    }
    if (HasExecutionPrice) {
      size += 1 + 8;
    }
    if (HasExecutedVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutedVolume);
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 1 + 8;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasBookType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BookType);
    }
    if (HasMethod) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Method);
    }
    if (HasBaseSlippagePrice) {
      size += 2 + 8;
    }
    if (HasClosingOrder) {
      size += 2 + 1;
    }
    if (HasLimitPrice) {
      size += 2 + 8;
    }
    if (HasStopPrice) {
      size += 2 + 8;
    }
    if (HasClientOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientOrderId);
    }
    if (HasCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasTimeInForce) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
    }
    if (HasPositionId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasRelativeStopLoss) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeTakeProfit);
    }
    if (HasIntroducingBrokerCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketCommission);
    }
    if (HasPocketMarkup) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketMarkup);
    }
    if (HasMirroringCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MirroringCommission);
    }
    if (HasOriginalClientOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OriginalClientOrderId);
    }
    if (HasCheckTolerance) {
      size += 2 + 1;
    }
    if (HasLogin) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Login);
    }
    if (HasName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasLastName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(LastName);
    }
    if (HasIsStopOut) {
      size += 2 + 1;
    }
    if (HasTrailingStopLoss) {
      size += 2 + 1;
    }
    if (HasCloseWithPID) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(CloseWithPID);
    }
    if (HasStopTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopTriggerMethod);
    }
    if (HasStopLossTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopLossTriggerMethod);
    }
    if (HasSlippageInPoints) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SlippageInPoints);
    }
    if (HasDesiredOpenTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DesiredOpenTimestamp);
    }
    if (HasOcoOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OcoOrderId);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOrder other) {
    if (other == null) {
      return;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.tradeData_ != null) {
      if (tradeData_ == null) {
        TradeData = new global::ProtoTradeData();
      }
      TradeData.MergeFrom(other.TradeData);
    }
    if (other.HasOrderType) {
      OrderType = other.OrderType;
    }
    if (other.HasOrderStatus) {
      OrderStatus = other.OrderStatus;
    }
    if (other.HasExpirationTimestamp) {
      ExpirationTimestamp = other.ExpirationTimestamp;
    }
    if (other.HasExecutionPrice) {
      ExecutionPrice = other.ExecutionPrice;
    }
    if (other.HasExecutedVolume) {
      ExecutedVolume = other.ExecutedVolume;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasBookType) {
      BookType = other.BookType;
    }
    if (other.HasMethod) {
      Method = other.Method;
    }
    if (other.HasBaseSlippagePrice) {
      BaseSlippagePrice = other.BaseSlippagePrice;
    }
    if (other.HasClosingOrder) {
      ClosingOrder = other.ClosingOrder;
    }
    if (other.HasLimitPrice) {
      LimitPrice = other.LimitPrice;
    }
    if (other.HasStopPrice) {
      StopPrice = other.StopPrice;
    }
    if (other.HasClientOrderId) {
      ClientOrderId = other.ClientOrderId;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasTimeInForce) {
      TimeInForce = other.TimeInForce;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasRelativeStopLoss) {
      RelativeStopLoss = other.RelativeStopLoss;
    }
    if (other.HasRelativeTakeProfit) {
      RelativeTakeProfit = other.RelativeTakeProfit;
    }
    if (other.HasIntroducingBrokerCommission) {
      IntroducingBrokerCommission = other.IntroducingBrokerCommission;
    }
    if (other.HasPocketCommission) {
      PocketCommission = other.PocketCommission;
    }
    if (other.HasPocketMarkup) {
      PocketMarkup = other.PocketMarkup;
    }
    if (other.HasMirroringCommission) {
      MirroringCommission = other.MirroringCommission;
    }
    if (other.HasOriginalClientOrderId) {
      OriginalClientOrderId = other.OriginalClientOrderId;
    }
    if (other.HasCheckTolerance) {
      CheckTolerance = other.CheckTolerance;
    }
    if (other.HasLogin) {
      Login = other.Login;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasLastName) {
      LastName = other.LastName;
    }
    if (other.HasIsStopOut) {
      IsStopOut = other.IsStopOut;
    }
    if (other.HasTrailingStopLoss) {
      TrailingStopLoss = other.TrailingStopLoss;
    }
    if (other.HasCloseWithPID) {
      CloseWithPID = other.CloseWithPID;
    }
    if (other.HasStopTriggerMethod) {
      StopTriggerMethod = other.StopTriggerMethod;
    }
    if (other.HasStopLossTriggerMethod) {
      StopLossTriggerMethod = other.StopLossTriggerMethod;
    }
    if (other.HasSlippageInPoints) {
      SlippageInPoints = other.SlippageInPoints;
    }
    if (other.HasDesiredOpenTimestamp) {
      DesiredOpenTimestamp = other.DesiredOpenTimestamp;
    }
    if (other.HasOcoOrderId) {
      OcoOrderId = other.OcoOrderId;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OrderId = input.ReadInt64();
          break;
        }
        case 18: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoTradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 24: {
          OrderType = (global::ProtoOrderType) input.ReadEnum();
          break;
        }
        case 32: {
          OrderStatus = (global::ProtoOrderStatus) input.ReadEnum();
          break;
        }
        case 48: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 73: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 80: {
          ExecutedVolume = input.ReadInt64();
          break;
        }
        case 89: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 97: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 104: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 112: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 130: {
          Method = input.ReadString();
          break;
        }
        case 145: {
          BaseSlippagePrice = input.ReadDouble();
          break;
        }
        case 160: {
          ClosingOrder = input.ReadBool();
          break;
        }
        case 169: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 177: {
          StopPrice = input.ReadDouble();
          break;
        }
        case 186: {
          ClientOrderId = input.ReadString();
          break;
        }
        case 192: {
          Commission = input.ReadInt64();
          break;
        }
        case 208: {
          TimeInForce = (global::ProtoTimeInForce) input.ReadEnum();
          break;
        }
        case 240: {
          PositionId = input.ReadInt64();
          break;
        }
        case 256: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 264: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 272: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 280: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 288: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 312: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 322: {
          OriginalClientOrderId = input.ReadString();
          break;
        }
        case 328: {
          CheckTolerance = input.ReadBool();
          break;
        }
        case 336: {
          Login = input.ReadInt64();
          break;
        }
        case 346: {
          Name = input.ReadString();
          break;
        }
        case 354: {
          LastName = input.ReadString();
          break;
        }
        case 360: {
          IsStopOut = input.ReadBool();
          break;
        }
        case 368: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 376: {
          CloseWithPID = input.ReadInt64();
          break;
        }
        case 384: {
          StopTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 392: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 400: {
          SlippageInPoints = input.ReadInt32();
          break;
        }
        case 408: {
          DesiredOpenTimestamp = input.ReadInt64();
          break;
        }
        case 416: {
          OcoOrderId = input.ReadInt64();
          break;
        }
        case 432: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          OrderId = input.ReadInt64();
          break;
        }
        case 18: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoTradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 24: {
          OrderType = (global::ProtoOrderType) input.ReadEnum();
          break;
        }
        case 32: {
          OrderStatus = (global::ProtoOrderStatus) input.ReadEnum();
          break;
        }
        case 48: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 73: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 80: {
          ExecutedVolume = input.ReadInt64();
          break;
        }
        case 89: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 97: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 104: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 112: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 130: {
          Method = input.ReadString();
          break;
        }
        case 145: {
          BaseSlippagePrice = input.ReadDouble();
          break;
        }
        case 160: {
          ClosingOrder = input.ReadBool();
          break;
        }
        case 169: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 177: {
          StopPrice = input.ReadDouble();
          break;
        }
        case 186: {
          ClientOrderId = input.ReadString();
          break;
        }
        case 192: {
          Commission = input.ReadInt64();
          break;
        }
        case 208: {
          TimeInForce = (global::ProtoTimeInForce) input.ReadEnum();
          break;
        }
        case 240: {
          PositionId = input.ReadInt64();
          break;
        }
        case 256: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 264: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 272: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 280: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 288: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 312: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 322: {
          OriginalClientOrderId = input.ReadString();
          break;
        }
        case 328: {
          CheckTolerance = input.ReadBool();
          break;
        }
        case 336: {
          Login = input.ReadInt64();
          break;
        }
        case 346: {
          Name = input.ReadString();
          break;
        }
        case 354: {
          LastName = input.ReadString();
          break;
        }
        case 360: {
          IsStopOut = input.ReadBool();
          break;
        }
        case 368: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 376: {
          CloseWithPID = input.ReadInt64();
          break;
        }
        case 384: {
          StopTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 392: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 400: {
          SlippageInPoints = input.ReadInt32();
          break;
        }
        case 408: {
          DesiredOpenTimestamp = input.ReadInt64();
          break;
        }
        case 416: {
          OcoOrderId = input.ReadInt64();
          break;
        }
        case 432: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Trading details for Closing Deal
/// </summary>
public sealed partial class ProtoClosePositionDetail : pb::IMessage<ProtoClosePositionDetail>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoClosePositionDetail> _parser = new pb::MessageParser<ProtoClosePositionDetail>(() => new ProtoClosePositionDetail());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoClosePositionDetail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoClosePositionDetail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoClosePositionDetail(ProtoClosePositionDetail other) : this() {
    _hasBits0 = other._hasBits0;
    entryPrice_ = other.entryPrice_;
    profit_ = other.profit_;
    swap_ = other.swap_;
    commission_ = other.commission_;
    balance_ = other.balance_;
    comment_ = other.comment_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    quoteToDepositConversionRate_ = other.quoteToDepositConversionRate_;
    closedVolume_ = other.closedVolume_;
    balanceVersion_ = other.balanceVersion_;
    introducingBrokerCommission_ = other.introducingBrokerCommission_;
    pocketCommission_ = other.pocketCommission_;
    pocketMarkup_ = other.pocketMarkup_;
    equity_ = other.equity_;
    netProfit_ = other.netProfit_;
    mirroringCommission_ = other.mirroringCommission_;
    depositToIbDepositRate_ = other.depositToIbDepositRate_;
    minEquity_ = other.minEquity_;
    maxEquity_ = other.maxEquity_;
    rebate_ = other.rebate_;
    balanceHistoryId_ = other.balanceHistoryId_;
    markup_ = other.markup_;
    equityBasedRoi_ = other.equityBasedRoi_;
    closedStake_ = other.closedStake_;
    ibCommissionsPaid_ = other.ibCommissionsPaid_;
    nonWithdrawableBonus_ = other.nonWithdrawableBonus_;
    stopLossTriggerMethod_ = other.stopLossTriggerMethod_;
    offsetDealTimestamp_ = other.offsetDealTimestamp_;
    moneyDigits_ = other.moneyDigits_;
    pnlConversionFee_ = other.pnlConversionFee_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoClosePositionDetail Clone() {
    return new ProtoClosePositionDetail(this);
  }

  /// <summary>Field number for the "entryPrice" field.</summary>
  public const int EntryPriceFieldNumber = 2;
  private readonly static double EntryPriceDefaultValue = 0D;

  private double entryPrice_;
  /// <summary>
  /// Position price at the moment of filling the closing Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EntryPrice {
    get { if ((_hasBits0 & 1) != 0) { return entryPrice_; } else { return EntryPriceDefaultValue; } }
    set {
      _hasBits0 |= 1;
      entryPrice_ = value;
    }
  }
  /// <summary>Gets whether the "entryPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEntryPrice {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "entryPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEntryPrice() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "profit" field.</summary>
  public const int ProfitFieldNumber = 7;
  private readonly static long ProfitDefaultValue = 0L;

  private long profit_;
  /// <summary>
  /// Amount of realized gross profit after execution of the Closing Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Profit {
    get { if ((_hasBits0 & 8) != 0) { return profit_; } else { return ProfitDefaultValue; } }
    set {
      _hasBits0 |= 8;
      profit_ = value;
    }
  }
  /// <summary>Gets whether the "profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProfit {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProfit() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "swap" field.</summary>
  public const int SwapFieldNumber = 3;
  private readonly static long SwapDefaultValue = 0L;

  private long swap_;
  /// <summary>
  /// Amount of realized Swap related to closed volume
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Swap {
    get { if ((_hasBits0 & 2) != 0) { return swap_; } else { return SwapDefaultValue; } }
    set {
      _hasBits0 |= 2;
      swap_ = value;
    }
  }
  /// <summary>Gets whether the "swap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwap {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "swap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwap() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 4;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Amount of realized commission related to closed volume
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 4) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 8;
  private readonly static long BalanceDefaultValue = 0L;

  private long balance_;
  /// <summary>
  /// Account balance after after execution of the Closing Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Balance {
    get { if ((_hasBits0 & 16) != 0) { return balance_; } else { return BalanceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      balance_ = value;
    }
  }
  /// <summary>Gets whether the "balance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalance {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "balance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalance() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 11;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment specified by the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 12;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// Absolute Stop Loss price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double StopLoss {
    get { if ((_hasBits0 & 32) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 32;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLoss {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLoss() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 13;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// Absolute Take Profit price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double TakeProfit {
    get { if ((_hasBits0 & 64) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 64;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTakeProfit() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "quoteToDepositConversionRate" field.</summary>
  public const int QuoteToDepositConversionRateFieldNumber = 15;
  private readonly static double QuoteToDepositConversionRateDefaultValue = 0D;

  private double quoteToDepositConversionRate_;
  /// <summary>
  /// Conversion rate from quote Asset to Trader's deposit Asset on the moment when the Closing Deal was sent for execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double QuoteToDepositConversionRate {
    get { if ((_hasBits0 & 128) != 0) { return quoteToDepositConversionRate_; } else { return QuoteToDepositConversionRateDefaultValue; } }
    set {
      _hasBits0 |= 128;
      quoteToDepositConversionRate_ = value;
    }
  }
  /// <summary>Gets whether the "quoteToDepositConversionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuoteToDepositConversionRate {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "quoteToDepositConversionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuoteToDepositConversionRate() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "closedVolume" field.</summary>
  public const int ClosedVolumeFieldNumber = 16;
  private readonly static long ClosedVolumeDefaultValue = 0L;

  private long closedVolume_;
  /// <summary>
  /// Closed volume in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ClosedVolume {
    get { if ((_hasBits0 & 256) != 0) { return closedVolume_; } else { return ClosedVolumeDefaultValue; } }
    set {
      _hasBits0 |= 256;
      closedVolume_ = value;
    }
  }
  /// <summary>Gets whether the "closedVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosedVolume {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "closedVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosedVolume() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "balanceVersion" field.</summary>
  public const int BalanceVersionFieldNumber = 18;
  private readonly static long BalanceVersionDefaultValue = 0L;

  private long balanceVersion_;
  /// <summary>
  /// Balance version of the Account related to Closing Deal operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceVersion {
    get { if ((_hasBits0 & 512) != 0) { return balanceVersion_; } else { return BalanceVersionDefaultValue; } }
    set {
      _hasBits0 |= 512;
      balanceVersion_ = value;
    }
  }
  /// <summary>Gets whether the "balanceVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceVersion {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "balanceVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceVersion() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "introducingBrokerCommission" field.</summary>
  public const int IntroducingBrokerCommissionFieldNumber = 19;
  private readonly static long IntroducingBrokerCommissionDefaultValue = 0L;

  private long introducingBrokerCommission_;
  /// <summary>
  /// Amount of additional commission, which client should pay to IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerCommission {
    get { if ((_hasBits0 & 1024) != 0) { return introducingBrokerCommission_; } else { return IntroducingBrokerCommissionDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      introducingBrokerCommission_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommission {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommission() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "pocketCommission" field.</summary>
  public const int PocketCommissionFieldNumber = 20;
  private readonly static long PocketCommissionDefaultValue = 0L;

  private long pocketCommission_;
  /// <summary>
  /// Amount of commission, which Broker should pay to IB for introduced clients
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketCommission {
    get { if ((_hasBits0 & 2048) != 0) { return pocketCommission_; } else { return PocketCommissionDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      pocketCommission_ = value;
    }
  }
  /// <summary>Gets whether the "pocketCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketCommission {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "pocketCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketCommission() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "pocketMarkup" field.</summary>
  public const int PocketMarkupFieldNumber = 21;
  private readonly static long PocketMarkupDefaultValue = 0L;

  private long pocketMarkup_;
  /// <summary>
  /// Amount of markup (in points), which Broker should pay to IB for introduced clients
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketMarkup {
    get { if ((_hasBits0 & 4096) != 0) { return pocketMarkup_; } else { return PocketMarkupDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      pocketMarkup_ = value;
    }
  }
  /// <summary>Gets whether the "pocketMarkup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketMarkup {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "pocketMarkup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketMarkup() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "equity" field.</summary>
  public const int EquityFieldNumber = 23;
  private readonly static long EquityDefaultValue = 0L;

  private long equity_;
  /// <summary>
  /// Total account's equity after Closing Deal execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Equity {
    get { if ((_hasBits0 & 8192) != 0) { return equity_; } else { return EquityDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      equity_ = value;
    }
  }
  /// <summary>Gets whether the "equity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEquity {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "equity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEquity() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "netProfit" field.</summary>
  public const int NetProfitFieldNumber = 25;
  private readonly static long NetProfitDefaultValue = 0L;

  private long netProfit_;
  /// <summary>
  /// Net realized profit related to the closing of offset part of opening Deals
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NetProfit {
    get { if ((_hasBits0 & 16384) != 0) { return netProfit_; } else { return NetProfitDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      netProfit_ = value;
    }
  }
  /// <summary>Gets whether the "netProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNetProfit {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "netProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNetProfit() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "mirroringCommission" field.</summary>
  public const int MirroringCommissionFieldNumber = 26;
  private readonly static long MirroringCommissionDefaultValue = 0L;

  private long mirroringCommission_;
  /// <summary>
  /// Amount of unrealized commission related to following of strategy provider
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MirroringCommission {
    get { if ((_hasBits0 & 32768) != 0) { return mirroringCommission_; } else { return MirroringCommissionDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      mirroringCommission_ = value;
    }
  }
  /// <summary>Gets whether the "mirroringCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMirroringCommission {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "mirroringCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMirroringCommission() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "depositToIbDepositRate" field.</summary>
  public const int DepositToIbDepositRateFieldNumber = 27;
  private readonly static double DepositToIbDepositRateDefaultValue = 0D;

  private double depositToIbDepositRate_;
  /// <summary>
  /// Conversion rate between Trader's deposit Asset and IB account's deposit Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double DepositToIbDepositRate {
    get { if ((_hasBits0 & 65536) != 0) { return depositToIbDepositRate_; } else { return DepositToIbDepositRateDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      depositToIbDepositRate_ = value;
    }
  }
  /// <summary>Gets whether the "depositToIbDepositRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositToIbDepositRate {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "depositToIbDepositRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositToIbDepositRate() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "minEquity" field.</summary>
  public const int MinEquityFieldNumber = 28;
  private readonly static long MinEquityDefaultValue = 0L;

  private long minEquity_;
  /// <summary>
  /// Minimum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinEquity {
    get { if ((_hasBits0 & 131072) != 0) { return minEquity_; } else { return MinEquityDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      minEquity_ = value;
    }
  }
  /// <summary>Gets whether the "minEquity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinEquity {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "minEquity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinEquity() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "maxEquity" field.</summary>
  public const int MaxEquityFieldNumber = 29;
  private readonly static long MaxEquityDefaultValue = 0L;

  private long maxEquity_;
  /// <summary>
  /// Maximum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxEquity {
    get { if ((_hasBits0 & 262144) != 0) { return maxEquity_; } else { return MaxEquityDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      maxEquity_ = value;
    }
  }
  /// <summary>Gets whether the "maxEquity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxEquity {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "maxEquity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxEquity() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "rebate" field.</summary>
  public const int RebateFieldNumber = 30;
  private readonly static long RebateDefaultValue = 0L;

  private long rebate_;
  /// <summary>
  /// Rebate in deposit Asset, in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Rebate {
    get { if ((_hasBits0 & 524288) != 0) { return rebate_; } else { return RebateDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      rebate_ = value;
    }
  }
  /// <summary>Gets whether the "rebate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRebate {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "rebate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRebate() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "balanceHistoryId" field.</summary>
  public const int BalanceHistoryIdFieldNumber = 31;
  private readonly static long BalanceHistoryIdDefaultValue = 0L;

  private long balanceHistoryId_;
  /// <summary>
  /// ID of related Balance History record
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceHistoryId {
    get { if ((_hasBits0 & 1048576) != 0) { return balanceHistoryId_; } else { return BalanceHistoryIdDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      balanceHistoryId_ = value;
    }
  }
  /// <summary>Gets whether the "balanceHistoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceHistoryId {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "balanceHistoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceHistoryId() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "markup" field.</summary>
  public const int MarkupFieldNumber = 32;
  private readonly static long MarkupDefaultValue = 0L;

  private long markup_;
  /// <summary>
  /// Markup in USD cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Markup {
    get { if ((_hasBits0 & 2097152) != 0) { return markup_; } else { return MarkupDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      markup_ = value;
    }
  }
  /// <summary>Gets whether the "markup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarkup {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "markup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarkup() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "equityBasedRoi" field.</summary>
  public const int EquityBasedRoiFieldNumber = 33;
  private readonly static double EquityBasedRoiDefaultValue = 0D;

  private double equityBasedRoi_;
  /// <summary>
  /// Position ROI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EquityBasedRoi {
    get { if ((_hasBits0 & 4194304) != 0) { return equityBasedRoi_; } else { return EquityBasedRoiDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      equityBasedRoi_ = value;
    }
  }
  /// <summary>Gets whether the "equityBasedRoi" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEquityBasedRoi {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "equityBasedRoi" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEquityBasedRoi() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "closedStake" field.</summary>
  public const int ClosedStakeFieldNumber = 34;
  private readonly static ulong ClosedStakeDefaultValue = 0UL;

  private ulong closedStake_;
  /// <summary>
  /// Closed stake for Spread Betting
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong ClosedStake {
    get { if ((_hasBits0 & 8388608) != 0) { return closedStake_; } else { return ClosedStakeDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      closedStake_ = value;
    }
  }
  /// <summary>Gets whether the "closedStake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosedStake {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "closedStake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosedStake() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "ibCommissionsPaid" field.</summary>
  public const int IbCommissionsPaidFieldNumber = 36;
  private readonly static bool IbCommissionsPaidDefaultValue = false;

  private bool ibCommissionsPaid_;
  /// <summary>
  /// If TRUE then IB commission is already paid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IbCommissionsPaid {
    get { if ((_hasBits0 & 16777216) != 0) { return ibCommissionsPaid_; } else { return IbCommissionsPaidDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      ibCommissionsPaid_ = value;
    }
  }
  /// <summary>Gets whether the "ibCommissionsPaid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbCommissionsPaid {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "ibCommissionsPaid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbCommissionsPaid() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "nonWithdrawableBonus" field.</summary>
  public const int NonWithdrawableBonusFieldNumber = 37;
  private readonly static long NonWithdrawableBonusDefaultValue = 0L;

  private long nonWithdrawableBonus_;
  /// <summary>
  /// Amount of Bonus, which can't be withdrawn (can only be used for trading)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NonWithdrawableBonus {
    get { if ((_hasBits0 & 33554432) != 0) { return nonWithdrawableBonus_; } else { return NonWithdrawableBonusDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      nonWithdrawableBonus_ = value;
    }
  }
  /// <summary>Gets whether the "nonWithdrawableBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNonWithdrawableBonus {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "nonWithdrawableBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNonWithdrawableBonus() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "stopLossTriggerMethod" field.</summary>
  public const int StopLossTriggerMethodFieldNumber = 38;
  private readonly static global::ProtoOrderTriggerMethod StopLossTriggerMethodDefaultValue = global::ProtoOrderTriggerMethod.Trade;

  private global::ProtoOrderTriggerMethod stopLossTriggerMethod_;
  /// <summary>
  /// Stop Trigger Method for SL/TP Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderTriggerMethod StopLossTriggerMethod {
    get { if ((_hasBits0 & 67108864) != 0) { return stopLossTriggerMethod_; } else { return StopLossTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      stopLossTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopLossTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLossTriggerMethod {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "stopLossTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLossTriggerMethod() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "offsetDealTimestamp" field.</summary>
  public const int OffsetDealTimestampFieldNumber = 40;
  private readonly static long OffsetDealTimestampDefaultValue = 0L;

  private long offsetDealTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of execution of the first offset Deal for this Closing Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OffsetDealTimestamp {
    get { if ((_hasBits0 & 134217728) != 0) { return offsetDealTimestamp_; } else { return OffsetDealTimestampDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      offsetDealTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "offsetDealTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOffsetDealTimestamp {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "offsetDealTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOffsetDealTimestamp() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 43;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, balance, pnlConversionFee
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 268435456) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "pnlConversionFee" field.</summary>
  public const int PnlConversionFeeFieldNumber = 44;
  private readonly static long PnlConversionFeeDefaultValue = 0L;

  private long pnlConversionFee_;
  /// <summary>
  /// Conversion Fee applied to the Deal in Trader's deposit Asset when Trader Symbol's quote Asset ID &lt;> Trader's deposit Asset ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PnlConversionFee {
    get { if ((_hasBits0 & 536870912) != 0) { return pnlConversionFee_; } else { return PnlConversionFeeDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      pnlConversionFee_ = value;
    }
  }
  /// <summary>Gets whether the "pnlConversionFee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPnlConversionFee {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "pnlConversionFee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPnlConversionFee() {
    _hasBits0 &= ~536870912;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoClosePositionDetail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoClosePositionDetail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EntryPrice, other.EntryPrice)) return false;
    if (Profit != other.Profit) return false;
    if (Swap != other.Swap) return false;
    if (Commission != other.Commission) return false;
    if (Balance != other.Balance) return false;
    if (Comment != other.Comment) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(QuoteToDepositConversionRate, other.QuoteToDepositConversionRate)) return false;
    if (ClosedVolume != other.ClosedVolume) return false;
    if (BalanceVersion != other.BalanceVersion) return false;
    if (IntroducingBrokerCommission != other.IntroducingBrokerCommission) return false;
    if (PocketCommission != other.PocketCommission) return false;
    if (PocketMarkup != other.PocketMarkup) return false;
    if (Equity != other.Equity) return false;
    if (NetProfit != other.NetProfit) return false;
    if (MirroringCommission != other.MirroringCommission) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DepositToIbDepositRate, other.DepositToIbDepositRate)) return false;
    if (MinEquity != other.MinEquity) return false;
    if (MaxEquity != other.MaxEquity) return false;
    if (Rebate != other.Rebate) return false;
    if (BalanceHistoryId != other.BalanceHistoryId) return false;
    if (Markup != other.Markup) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityBasedRoi, other.EquityBasedRoi)) return false;
    if (ClosedStake != other.ClosedStake) return false;
    if (IbCommissionsPaid != other.IbCommissionsPaid) return false;
    if (NonWithdrawableBonus != other.NonWithdrawableBonus) return false;
    if (StopLossTriggerMethod != other.StopLossTriggerMethod) return false;
    if (OffsetDealTimestamp != other.OffsetDealTimestamp) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    if (PnlConversionFee != other.PnlConversionFee) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEntryPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EntryPrice);
    if (HasProfit) hash ^= Profit.GetHashCode();
    if (HasSwap) hash ^= Swap.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasBalance) hash ^= Balance.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasQuoteToDepositConversionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(QuoteToDepositConversionRate);
    if (HasClosedVolume) hash ^= ClosedVolume.GetHashCode();
    if (HasBalanceVersion) hash ^= BalanceVersion.GetHashCode();
    if (HasIntroducingBrokerCommission) hash ^= IntroducingBrokerCommission.GetHashCode();
    if (HasPocketCommission) hash ^= PocketCommission.GetHashCode();
    if (HasPocketMarkup) hash ^= PocketMarkup.GetHashCode();
    if (HasEquity) hash ^= Equity.GetHashCode();
    if (HasNetProfit) hash ^= NetProfit.GetHashCode();
    if (HasMirroringCommission) hash ^= MirroringCommission.GetHashCode();
    if (HasDepositToIbDepositRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DepositToIbDepositRate);
    if (HasMinEquity) hash ^= MinEquity.GetHashCode();
    if (HasMaxEquity) hash ^= MaxEquity.GetHashCode();
    if (HasRebate) hash ^= Rebate.GetHashCode();
    if (HasBalanceHistoryId) hash ^= BalanceHistoryId.GetHashCode();
    if (HasMarkup) hash ^= Markup.GetHashCode();
    if (HasEquityBasedRoi) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityBasedRoi);
    if (HasClosedStake) hash ^= ClosedStake.GetHashCode();
    if (HasIbCommissionsPaid) hash ^= IbCommissionsPaid.GetHashCode();
    if (HasNonWithdrawableBonus) hash ^= NonWithdrawableBonus.GetHashCode();
    if (HasStopLossTriggerMethod) hash ^= StopLossTriggerMethod.GetHashCode();
    if (HasOffsetDealTimestamp) hash ^= OffsetDealTimestamp.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (HasPnlConversionFee) hash ^= PnlConversionFee.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasEntryPrice) {
      output.WriteRawTag(17);
      output.WriteDouble(EntryPrice);
    }
    if (HasSwap) {
      output.WriteRawTag(24);
      output.WriteInt64(Swap);
    }
    if (HasCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(Commission);
    }
    if (HasProfit) {
      output.WriteRawTag(56);
      output.WriteInt64(Profit);
    }
    if (HasBalance) {
      output.WriteRawTag(64);
      output.WriteInt64(Balance);
    }
    if (HasComment) {
      output.WriteRawTag(90);
      output.WriteString(Comment);
    }
    if (HasStopLoss) {
      output.WriteRawTag(97);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(105);
      output.WriteDouble(TakeProfit);
    }
    if (HasQuoteToDepositConversionRate) {
      output.WriteRawTag(121);
      output.WriteDouble(QuoteToDepositConversionRate);
    }
    if (HasClosedVolume) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(ClosedVolume);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(BalanceVersion);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(PocketMarkup);
    }
    if (HasEquity) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(Equity);
    }
    if (HasNetProfit) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(NetProfit);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(208, 1);
      output.WriteInt64(MirroringCommission);
    }
    if (HasDepositToIbDepositRate) {
      output.WriteRawTag(217, 1);
      output.WriteDouble(DepositToIbDepositRate);
    }
    if (HasMinEquity) {
      output.WriteRawTag(224, 1);
      output.WriteInt64(MinEquity);
    }
    if (HasMaxEquity) {
      output.WriteRawTag(232, 1);
      output.WriteInt64(MaxEquity);
    }
    if (HasRebate) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(Rebate);
    }
    if (HasBalanceHistoryId) {
      output.WriteRawTag(248, 1);
      output.WriteInt64(BalanceHistoryId);
    }
    if (HasMarkup) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(Markup);
    }
    if (HasEquityBasedRoi) {
      output.WriteRawTag(137, 2);
      output.WriteDouble(EquityBasedRoi);
    }
    if (HasClosedStake) {
      output.WriteRawTag(144, 2);
      output.WriteUInt64(ClosedStake);
    }
    if (HasIbCommissionsPaid) {
      output.WriteRawTag(160, 2);
      output.WriteBool(IbCommissionsPaid);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(168, 2);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(176, 2);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasOffsetDealTimestamp) {
      output.WriteRawTag(192, 2);
      output.WriteInt64(OffsetDealTimestamp);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(216, 2);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      output.WriteRawTag(224, 2);
      output.WriteInt64(PnlConversionFee);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasEntryPrice) {
      output.WriteRawTag(17);
      output.WriteDouble(EntryPrice);
    }
    if (HasSwap) {
      output.WriteRawTag(24);
      output.WriteInt64(Swap);
    }
    if (HasCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(Commission);
    }
    if (HasProfit) {
      output.WriteRawTag(56);
      output.WriteInt64(Profit);
    }
    if (HasBalance) {
      output.WriteRawTag(64);
      output.WriteInt64(Balance);
    }
    if (HasComment) {
      output.WriteRawTag(90);
      output.WriteString(Comment);
    }
    if (HasStopLoss) {
      output.WriteRawTag(97);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(105);
      output.WriteDouble(TakeProfit);
    }
    if (HasQuoteToDepositConversionRate) {
      output.WriteRawTag(121);
      output.WriteDouble(QuoteToDepositConversionRate);
    }
    if (HasClosedVolume) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(ClosedVolume);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(BalanceVersion);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(PocketMarkup);
    }
    if (HasEquity) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(Equity);
    }
    if (HasNetProfit) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(NetProfit);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(208, 1);
      output.WriteInt64(MirroringCommission);
    }
    if (HasDepositToIbDepositRate) {
      output.WriteRawTag(217, 1);
      output.WriteDouble(DepositToIbDepositRate);
    }
    if (HasMinEquity) {
      output.WriteRawTag(224, 1);
      output.WriteInt64(MinEquity);
    }
    if (HasMaxEquity) {
      output.WriteRawTag(232, 1);
      output.WriteInt64(MaxEquity);
    }
    if (HasRebate) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(Rebate);
    }
    if (HasBalanceHistoryId) {
      output.WriteRawTag(248, 1);
      output.WriteInt64(BalanceHistoryId);
    }
    if (HasMarkup) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(Markup);
    }
    if (HasEquityBasedRoi) {
      output.WriteRawTag(137, 2);
      output.WriteDouble(EquityBasedRoi);
    }
    if (HasClosedStake) {
      output.WriteRawTag(144, 2);
      output.WriteUInt64(ClosedStake);
    }
    if (HasIbCommissionsPaid) {
      output.WriteRawTag(160, 2);
      output.WriteBool(IbCommissionsPaid);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(168, 2);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(176, 2);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasOffsetDealTimestamp) {
      output.WriteRawTag(192, 2);
      output.WriteInt64(OffsetDealTimestamp);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(216, 2);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      output.WriteRawTag(224, 2);
      output.WriteInt64(PnlConversionFee);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasEntryPrice) {
      size += 1 + 8;
    }
    if (HasProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
    }
    if (HasSwap) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Swap);
    }
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasBalance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 1 + 8;
    }
    if (HasQuoteToDepositConversionRate) {
      size += 1 + 8;
    }
    if (HasClosedVolume) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClosedVolume);
    }
    if (HasBalanceVersion) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(BalanceVersion);
    }
    if (HasIntroducingBrokerCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketCommission);
    }
    if (HasPocketMarkup) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketMarkup);
    }
    if (HasEquity) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Equity);
    }
    if (HasNetProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetProfit);
    }
    if (HasMirroringCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MirroringCommission);
    }
    if (HasDepositToIbDepositRate) {
      size += 2 + 8;
    }
    if (HasMinEquity) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinEquity);
    }
    if (HasMaxEquity) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxEquity);
    }
    if (HasRebate) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Rebate);
    }
    if (HasBalanceHistoryId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(BalanceHistoryId);
    }
    if (HasMarkup) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Markup);
    }
    if (HasEquityBasedRoi) {
      size += 2 + 8;
    }
    if (HasClosedStake) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ClosedStake);
    }
    if (HasIbCommissionsPaid) {
      size += 2 + 1;
    }
    if (HasNonWithdrawableBonus) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(NonWithdrawableBonus);
    }
    if (HasStopLossTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopLossTriggerMethod);
    }
    if (HasOffsetDealTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OffsetDealTimestamp);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PnlConversionFee);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoClosePositionDetail other) {
    if (other == null) {
      return;
    }
    if (other.HasEntryPrice) {
      EntryPrice = other.EntryPrice;
    }
    if (other.HasProfit) {
      Profit = other.Profit;
    }
    if (other.HasSwap) {
      Swap = other.Swap;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasBalance) {
      Balance = other.Balance;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasQuoteToDepositConversionRate) {
      QuoteToDepositConversionRate = other.QuoteToDepositConversionRate;
    }
    if (other.HasClosedVolume) {
      ClosedVolume = other.ClosedVolume;
    }
    if (other.HasBalanceVersion) {
      BalanceVersion = other.BalanceVersion;
    }
    if (other.HasIntroducingBrokerCommission) {
      IntroducingBrokerCommission = other.IntroducingBrokerCommission;
    }
    if (other.HasPocketCommission) {
      PocketCommission = other.PocketCommission;
    }
    if (other.HasPocketMarkup) {
      PocketMarkup = other.PocketMarkup;
    }
    if (other.HasEquity) {
      Equity = other.Equity;
    }
    if (other.HasNetProfit) {
      NetProfit = other.NetProfit;
    }
    if (other.HasMirroringCommission) {
      MirroringCommission = other.MirroringCommission;
    }
    if (other.HasDepositToIbDepositRate) {
      DepositToIbDepositRate = other.DepositToIbDepositRate;
    }
    if (other.HasMinEquity) {
      MinEquity = other.MinEquity;
    }
    if (other.HasMaxEquity) {
      MaxEquity = other.MaxEquity;
    }
    if (other.HasRebate) {
      Rebate = other.Rebate;
    }
    if (other.HasBalanceHistoryId) {
      BalanceHistoryId = other.BalanceHistoryId;
    }
    if (other.HasMarkup) {
      Markup = other.Markup;
    }
    if (other.HasEquityBasedRoi) {
      EquityBasedRoi = other.EquityBasedRoi;
    }
    if (other.HasClosedStake) {
      ClosedStake = other.ClosedStake;
    }
    if (other.HasIbCommissionsPaid) {
      IbCommissionsPaid = other.IbCommissionsPaid;
    }
    if (other.HasNonWithdrawableBonus) {
      NonWithdrawableBonus = other.NonWithdrawableBonus;
    }
    if (other.HasStopLossTriggerMethod) {
      StopLossTriggerMethod = other.StopLossTriggerMethod;
    }
    if (other.HasOffsetDealTimestamp) {
      OffsetDealTimestamp = other.OffsetDealTimestamp;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    if (other.HasPnlConversionFee) {
      PnlConversionFee = other.PnlConversionFee;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 17: {
          EntryPrice = input.ReadDouble();
          break;
        }
        case 24: {
          Swap = input.ReadInt64();
          break;
        }
        case 32: {
          Commission = input.ReadInt64();
          break;
        }
        case 56: {
          Profit = input.ReadInt64();
          break;
        }
        case 64: {
          Balance = input.ReadInt64();
          break;
        }
        case 90: {
          Comment = input.ReadString();
          break;
        }
        case 97: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 105: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 121: {
          QuoteToDepositConversionRate = input.ReadDouble();
          break;
        }
        case 128: {
          ClosedVolume = input.ReadInt64();
          break;
        }
        case 144: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 152: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 160: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 168: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 184: {
          Equity = input.ReadInt64();
          break;
        }
        case 200: {
          NetProfit = input.ReadInt64();
          break;
        }
        case 208: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 217: {
          DepositToIbDepositRate = input.ReadDouble();
          break;
        }
        case 224: {
          MinEquity = input.ReadInt64();
          break;
        }
        case 232: {
          MaxEquity = input.ReadInt64();
          break;
        }
        case 240: {
          Rebate = input.ReadInt64();
          break;
        }
        case 248: {
          BalanceHistoryId = input.ReadInt64();
          break;
        }
        case 256: {
          Markup = input.ReadInt64();
          break;
        }
        case 265: {
          EquityBasedRoi = input.ReadDouble();
          break;
        }
        case 272: {
          ClosedStake = input.ReadUInt64();
          break;
        }
        case 288: {
          IbCommissionsPaid = input.ReadBool();
          break;
        }
        case 296: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 304: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 320: {
          OffsetDealTimestamp = input.ReadInt64();
          break;
        }
        case 344: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 352: {
          PnlConversionFee = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 17: {
          EntryPrice = input.ReadDouble();
          break;
        }
        case 24: {
          Swap = input.ReadInt64();
          break;
        }
        case 32: {
          Commission = input.ReadInt64();
          break;
        }
        case 56: {
          Profit = input.ReadInt64();
          break;
        }
        case 64: {
          Balance = input.ReadInt64();
          break;
        }
        case 90: {
          Comment = input.ReadString();
          break;
        }
        case 97: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 105: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 121: {
          QuoteToDepositConversionRate = input.ReadDouble();
          break;
        }
        case 128: {
          ClosedVolume = input.ReadInt64();
          break;
        }
        case 144: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 152: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 160: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 168: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 184: {
          Equity = input.ReadInt64();
          break;
        }
        case 200: {
          NetProfit = input.ReadInt64();
          break;
        }
        case 208: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 217: {
          DepositToIbDepositRate = input.ReadDouble();
          break;
        }
        case 224: {
          MinEquity = input.ReadInt64();
          break;
        }
        case 232: {
          MaxEquity = input.ReadInt64();
          break;
        }
        case 240: {
          Rebate = input.ReadInt64();
          break;
        }
        case 248: {
          BalanceHistoryId = input.ReadInt64();
          break;
        }
        case 256: {
          Markup = input.ReadInt64();
          break;
        }
        case 265: {
          EquityBasedRoi = input.ReadDouble();
          break;
        }
        case 272: {
          ClosedStake = input.ReadUInt64();
          break;
        }
        case 288: {
          IbCommissionsPaid = input.ReadBool();
          break;
        }
        case 296: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 304: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 320: {
          OffsetDealTimestamp = input.ReadInt64();
          break;
        }
        case 344: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 352: {
          PnlConversionFee = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Order related action entity
/// </summary>
public sealed partial class ProtoOrderAction : pb::IMessage<ProtoOrderAction>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOrderAction> _parser = new pb::MessageParser<ProtoOrderAction>(() => new ProtoOrderAction());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOrderAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrderAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrderAction(ProtoOrderAction other) : this() {
    _hasBits0 = other._hasBits0;
    actionId_ = other.actionId_;
    actionType_ = other.actionType_;
    actionStatus_ = other.actionStatus_;
    expirationTimestamp_ = other.expirationTimestamp_;
    volume_ = other.volume_;
    price_ = other.price_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    sessionId_ = other.sessionId_;
    clientRequestId_ = other.clientRequestId_;
    label_ = other.label_;
    comment_ = other.comment_;
    channel_ = other.channel_;
    executeTimestamp_ = other.executeTimestamp_;
    relativeStopLoss_ = other.relativeStopLoss_;
    relativeTakeProfit_ = other.relativeTakeProfit_;
    stopTriggerMethod_ = other.stopTriggerMethod_;
    stopLossTriggerMethod_ = other.stopLossTriggerMethod_;
    desiredOpenTimestamp_ = other.desiredOpenTimestamp_;
    ocoOrderId_ = other.ocoOrderId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrderAction Clone() {
    return new ProtoOrderAction(this);
  }

  /// <summary>Field number for the "actionId" field.</summary>
  public const int ActionIdFieldNumber = 1;
  private readonly static long ActionIdDefaultValue = 0L;

  private long actionId_;
  /// <summary>
  /// Action ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ActionId {
    get { if ((_hasBits0 & 1) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      actionId_ = value;
    }
  }
  /// <summary>Gets whether the "actionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasActionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "actionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearActionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "actionType" field.</summary>
  public const int ActionTypeFieldNumber = 3;
  private readonly static global::ProtoActionType ActionTypeDefaultValue = global::ProtoActionType.ActionCreateStopLossTakeProfit;

  private global::ProtoActionType actionType_;
  /// <summary>
  /// Action type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoActionType ActionType {
    get { if ((_hasBits0 & 2) != 0) { return actionType_; } else { return ActionTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      actionType_ = value;
    }
  }
  /// <summary>Gets whether the "actionType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasActionType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "actionType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearActionType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "actionStatus" field.</summary>
  public const int ActionStatusFieldNumber = 4;
  private readonly static global::ProtoActionStatus ActionStatusDefaultValue = global::ProtoActionStatus.ActionPending;

  private global::ProtoActionStatus actionStatus_;
  /// <summary>
  /// Action status
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoActionStatus ActionStatus {
    get { if ((_hasBits0 & 4) != 0) { return actionStatus_; } else { return ActionStatusDefaultValue; } }
    set {
      _hasBits0 |= 4;
      actionStatus_ = value;
    }
  }
  /// <summary>Gets whether the "actionStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasActionStatus {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "actionStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearActionStatus() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "expirationTimestamp" field.</summary>
  public const int ExpirationTimestampFieldNumber = 5;
  private readonly static long ExpirationTimestampDefaultValue = 0L;

  private long expirationTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of Order expiration
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExpirationTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return expirationTimestamp_; } else { return ExpirationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      expirationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "expirationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExpirationTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "expirationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExpirationTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 6;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume for created Order/Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 16) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 7;
  private readonly static long PriceDefaultValue = 0L;

  private long price_;
  /// <summary>
  /// Price for created Deal/amended Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Price {
    get { if ((_hasBits0 & 32) != 0) { return price_; } else { return PriceDefaultValue; } }
    set {
      _hasBits0 |= 32;
      price_ = value;
    }
  }
  /// <summary>Gets whether the "price" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPrice {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "price" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPrice() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 8;
  private readonly static long StopLossDefaultValue = 0L;

  private long stopLoss_;
  /// <summary>
  /// Stop Loss price for Stop Loss action
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StopLoss {
    get { if ((_hasBits0 & 64) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 64;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLoss {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLoss() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 9;
  private readonly static long TakeProfitDefaultValue = 0L;

  private long takeProfit_;
  /// <summary>
  /// Take Profit price for Take Profit action
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TakeProfit {
    get { if ((_hasBits0 & 128) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 128;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTakeProfit() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 10;
  private readonly static string SessionIdDefaultValue = "";

  private string sessionId_;
  /// <summary>
  /// ID of Trader's session
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionId {
    get { return sessionId_ ?? SessionIdDefaultValue; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "sessionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionId {
    get { return sessionId_ != null; }
  }
  /// <summary>Clears the value of the "sessionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionId() {
    sessionId_ = null;
  }

  /// <summary>Field number for the "clientRequestId" field.</summary>
  public const int ClientRequestIdFieldNumber = 11;
  private readonly static string ClientRequestIdDefaultValue = "";

  private string clientRequestId_;
  /// <summary>
  /// ClientRequestId specified in the Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientRequestId {
    get { return clientRequestId_ ?? ClientRequestIdDefaultValue; }
    set {
      clientRequestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientRequestId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientRequestId {
    get { return clientRequestId_ != null; }
  }
  /// <summary>Clears the value of the "clientRequestId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientRequestId() {
    clientRequestId_ = null;
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 12;
  private readonly static string LabelDefaultValue = "";

  private string label_;
  /// <summary>
  /// Label field value from corresponding Order. Used by cAlgo bots to identify its own Orders. Max length = 100
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Label {
    get { return label_ ?? LabelDefaultValue; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "label" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLabel {
    get { return label_ != null; }
  }
  /// <summary>Clears the value of the "label" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLabel() {
    label_ = null;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 13;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment specified in the Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 14;
  private readonly static string ChannelDefaultValue = "";

  private string channel_;
  /// <summary>
  /// Channel, specified in the Order (cTrader, cServer etc)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Channel {
    get { return channel_ ?? ChannelDefaultValue; }
    set {
      channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "channel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChannel {
    get { return channel_ != null; }
  }
  /// <summary>Clears the value of the "channel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChannel() {
    channel_ = null;
  }

  /// <summary>Field number for the "executeTimestamp" field.</summary>
  public const int ExecuteTimestampFieldNumber = 17;
  private readonly static long ExecuteTimestampDefaultValue = 0L;

  private long executeTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of action execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecuteTimestamp {
    get { if ((_hasBits0 & 256) != 0) { return executeTimestamp_; } else { return ExecuteTimestampDefaultValue; } }
    set {
      _hasBits0 |= 256;
      executeTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "executeTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecuteTimestamp {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "executeTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecuteTimestamp() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "relativeStopLoss" field.</summary>
  public const int RelativeStopLossFieldNumber = 18;
  private readonly static long RelativeStopLossDefaultValue = 0L;

  private long relativeStopLoss_;
  /// <summary>
  /// Stop Loss entered by Trader at the moment of market Order creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RelativeStopLoss {
    get { if ((_hasBits0 & 512) != 0) { return relativeStopLoss_; } else { return RelativeStopLossDefaultValue; } }
    set {
      _hasBits0 |= 512;
      relativeStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "relativeStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelativeStopLoss {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "relativeStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelativeStopLoss() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "relativeTakeProfit" field.</summary>
  public const int RelativeTakeProfitFieldNumber = 19;
  private readonly static long RelativeTakeProfitDefaultValue = 0L;

  private long relativeTakeProfit_;
  /// <summary>
  /// Take Profit entered by Trader at the moment of market Order creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RelativeTakeProfit {
    get { if ((_hasBits0 & 1024) != 0) { return relativeTakeProfit_; } else { return RelativeTakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      relativeTakeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "relativeTakeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelativeTakeProfit {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "relativeTakeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelativeTakeProfit() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "stopTriggerMethod" field.</summary>
  public const int StopTriggerMethodFieldNumber = 20;
  private readonly static global::ProtoOrderTriggerMethod StopTriggerMethodDefaultValue = global::ProtoOrderTriggerMethod.Trade;

  private global::ProtoOrderTriggerMethod stopTriggerMethod_;
  /// <summary>
  /// Trigger Method for the STOP or the STOP_LIMIT pending Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderTriggerMethod StopTriggerMethod {
    get { if ((_hasBits0 & 2048) != 0) { return stopTriggerMethod_; } else { return StopTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      stopTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopTriggerMethod {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "stopTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopTriggerMethod() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "stopLossTriggerMethod" field.</summary>
  public const int StopLossTriggerMethodFieldNumber = 21;
  private readonly static global::ProtoOrderTriggerMethod StopLossTriggerMethodDefaultValue = global::ProtoOrderTriggerMethod.Trade;

  private global::ProtoOrderTriggerMethod stopLossTriggerMethod_;
  /// <summary>
  /// Stop Trigger Method for SL/TP Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderTriggerMethod StopLossTriggerMethod {
    get { if ((_hasBits0 & 4096) != 0) { return stopLossTriggerMethod_; } else { return StopLossTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      stopLossTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopLossTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLossTriggerMethod {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "stopLossTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLossTriggerMethod() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "desiredOpenTimestamp" field.</summary>
  public const int DesiredOpenTimestampFieldNumber = 22;
  private readonly static long DesiredOpenTimestampDefaultValue = 0L;

  private long desiredOpenTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DesiredOpenTimestamp {
    get { if ((_hasBits0 & 8192) != 0) { return desiredOpenTimestamp_; } else { return DesiredOpenTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      desiredOpenTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "desiredOpenTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDesiredOpenTimestamp {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "desiredOpenTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDesiredOpenTimestamp() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "ocoOrderId" field.</summary>
  public const int OcoOrderIdFieldNumber = 23;
  private readonly static long OcoOrderIdDefaultValue = 0L;

  private long ocoOrderId_;
  /// <summary>
  /// Link to ID of OCO (one cancels other) Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OcoOrderId {
    get { if ((_hasBits0 & 16384) != 0) { return ocoOrderId_; } else { return OcoOrderIdDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      ocoOrderId_ = value;
    }
  }
  /// <summary>Gets whether the "ocoOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOcoOrderId {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "ocoOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOcoOrderId() {
    _hasBits0 &= ~16384;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOrderAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOrderAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ActionId != other.ActionId) return false;
    if (ActionType != other.ActionType) return false;
    if (ActionStatus != other.ActionStatus) return false;
    if (ExpirationTimestamp != other.ExpirationTimestamp) return false;
    if (Volume != other.Volume) return false;
    if (Price != other.Price) return false;
    if (StopLoss != other.StopLoss) return false;
    if (TakeProfit != other.TakeProfit) return false;
    if (SessionId != other.SessionId) return false;
    if (ClientRequestId != other.ClientRequestId) return false;
    if (Label != other.Label) return false;
    if (Comment != other.Comment) return false;
    if (Channel != other.Channel) return false;
    if (ExecuteTimestamp != other.ExecuteTimestamp) return false;
    if (RelativeStopLoss != other.RelativeStopLoss) return false;
    if (RelativeTakeProfit != other.RelativeTakeProfit) return false;
    if (StopTriggerMethod != other.StopTriggerMethod) return false;
    if (StopLossTriggerMethod != other.StopLossTriggerMethod) return false;
    if (DesiredOpenTimestamp != other.DesiredOpenTimestamp) return false;
    if (OcoOrderId != other.OcoOrderId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasActionId) hash ^= ActionId.GetHashCode();
    if (HasActionType) hash ^= ActionType.GetHashCode();
    if (HasActionStatus) hash ^= ActionStatus.GetHashCode();
    if (HasExpirationTimestamp) hash ^= ExpirationTimestamp.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasPrice) hash ^= Price.GetHashCode();
    if (HasStopLoss) hash ^= StopLoss.GetHashCode();
    if (HasTakeProfit) hash ^= TakeProfit.GetHashCode();
    if (HasSessionId) hash ^= SessionId.GetHashCode();
    if (HasClientRequestId) hash ^= ClientRequestId.GetHashCode();
    if (HasLabel) hash ^= Label.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasChannel) hash ^= Channel.GetHashCode();
    if (HasExecuteTimestamp) hash ^= ExecuteTimestamp.GetHashCode();
    if (HasRelativeStopLoss) hash ^= RelativeStopLoss.GetHashCode();
    if (HasRelativeTakeProfit) hash ^= RelativeTakeProfit.GetHashCode();
    if (HasStopTriggerMethod) hash ^= StopTriggerMethod.GetHashCode();
    if (HasStopLossTriggerMethod) hash ^= StopLossTriggerMethod.GetHashCode();
    if (HasDesiredOpenTimestamp) hash ^= DesiredOpenTimestamp.GetHashCode();
    if (HasOcoOrderId) hash ^= OcoOrderId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasActionId) {
      output.WriteRawTag(8);
      output.WriteInt64(ActionId);
    }
    if (HasActionType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ActionType);
    }
    if (HasActionStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) ActionStatus);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasVolume) {
      output.WriteRawTag(48);
      output.WriteInt64(Volume);
    }
    if (HasPrice) {
      output.WriteRawTag(56);
      output.WriteInt64(Price);
    }
    if (HasStopLoss) {
      output.WriteRawTag(64);
      output.WriteInt64(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(72);
      output.WriteInt64(TakeProfit);
    }
    if (HasSessionId) {
      output.WriteRawTag(82);
      output.WriteString(SessionId);
    }
    if (HasClientRequestId) {
      output.WriteRawTag(90);
      output.WriteString(ClientRequestId);
    }
    if (HasLabel) {
      output.WriteRawTag(98);
      output.WriteString(Label);
    }
    if (HasComment) {
      output.WriteRawTag(106);
      output.WriteString(Comment);
    }
    if (HasChannel) {
      output.WriteRawTag(114);
      output.WriteString(Channel);
    }
    if (HasExecuteTimestamp) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(ExecuteTimestamp);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(160, 1);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(168, 1);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasDesiredOpenTimestamp) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(DesiredOpenTimestamp);
    }
    if (HasOcoOrderId) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(OcoOrderId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasActionId) {
      output.WriteRawTag(8);
      output.WriteInt64(ActionId);
    }
    if (HasActionType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ActionType);
    }
    if (HasActionStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) ActionStatus);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasVolume) {
      output.WriteRawTag(48);
      output.WriteInt64(Volume);
    }
    if (HasPrice) {
      output.WriteRawTag(56);
      output.WriteInt64(Price);
    }
    if (HasStopLoss) {
      output.WriteRawTag(64);
      output.WriteInt64(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(72);
      output.WriteInt64(TakeProfit);
    }
    if (HasSessionId) {
      output.WriteRawTag(82);
      output.WriteString(SessionId);
    }
    if (HasClientRequestId) {
      output.WriteRawTag(90);
      output.WriteString(ClientRequestId);
    }
    if (HasLabel) {
      output.WriteRawTag(98);
      output.WriteString(Label);
    }
    if (HasComment) {
      output.WriteRawTag(106);
      output.WriteString(Comment);
    }
    if (HasChannel) {
      output.WriteRawTag(114);
      output.WriteString(Channel);
    }
    if (HasExecuteTimestamp) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(ExecuteTimestamp);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(160, 1);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(168, 1);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasDesiredOpenTimestamp) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(DesiredOpenTimestamp);
    }
    if (HasOcoOrderId) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(OcoOrderId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasActionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActionId);
    }
    if (HasActionType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
    }
    if (HasActionStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionStatus);
    }
    if (HasExpirationTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimestamp);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasPrice) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
    }
    if (HasStopLoss) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StopLoss);
    }
    if (HasTakeProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TakeProfit);
    }
    if (HasSessionId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (HasClientRequestId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientRequestId);
    }
    if (HasLabel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasChannel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
    }
    if (HasExecuteTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExecuteTimestamp);
    }
    if (HasRelativeStopLoss) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeTakeProfit);
    }
    if (HasStopTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopTriggerMethod);
    }
    if (HasStopLossTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopLossTriggerMethod);
    }
    if (HasDesiredOpenTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DesiredOpenTimestamp);
    }
    if (HasOcoOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(OcoOrderId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOrderAction other) {
    if (other == null) {
      return;
    }
    if (other.HasActionId) {
      ActionId = other.ActionId;
    }
    if (other.HasActionType) {
      ActionType = other.ActionType;
    }
    if (other.HasActionStatus) {
      ActionStatus = other.ActionStatus;
    }
    if (other.HasExpirationTimestamp) {
      ExpirationTimestamp = other.ExpirationTimestamp;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasPrice) {
      Price = other.Price;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasSessionId) {
      SessionId = other.SessionId;
    }
    if (other.HasClientRequestId) {
      ClientRequestId = other.ClientRequestId;
    }
    if (other.HasLabel) {
      Label = other.Label;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasChannel) {
      Channel = other.Channel;
    }
    if (other.HasExecuteTimestamp) {
      ExecuteTimestamp = other.ExecuteTimestamp;
    }
    if (other.HasRelativeStopLoss) {
      RelativeStopLoss = other.RelativeStopLoss;
    }
    if (other.HasRelativeTakeProfit) {
      RelativeTakeProfit = other.RelativeTakeProfit;
    }
    if (other.HasStopTriggerMethod) {
      StopTriggerMethod = other.StopTriggerMethod;
    }
    if (other.HasStopLossTriggerMethod) {
      StopLossTriggerMethod = other.StopLossTriggerMethod;
    }
    if (other.HasDesiredOpenTimestamp) {
      DesiredOpenTimestamp = other.DesiredOpenTimestamp;
    }
    if (other.HasOcoOrderId) {
      OcoOrderId = other.OcoOrderId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ActionId = input.ReadInt64();
          break;
        }
        case 24: {
          ActionType = (global::ProtoActionType) input.ReadEnum();
          break;
        }
        case 32: {
          ActionStatus = (global::ProtoActionStatus) input.ReadEnum();
          break;
        }
        case 40: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 48: {
          Volume = input.ReadInt64();
          break;
        }
        case 56: {
          Price = input.ReadInt64();
          break;
        }
        case 64: {
          StopLoss = input.ReadInt64();
          break;
        }
        case 72: {
          TakeProfit = input.ReadInt64();
          break;
        }
        case 82: {
          SessionId = input.ReadString();
          break;
        }
        case 90: {
          ClientRequestId = input.ReadString();
          break;
        }
        case 98: {
          Label = input.ReadString();
          break;
        }
        case 106: {
          Comment = input.ReadString();
          break;
        }
        case 114: {
          Channel = input.ReadString();
          break;
        }
        case 136: {
          ExecuteTimestamp = input.ReadInt64();
          break;
        }
        case 144: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 152: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 160: {
          StopTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 168: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 176: {
          DesiredOpenTimestamp = input.ReadInt64();
          break;
        }
        case 184: {
          OcoOrderId = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ActionId = input.ReadInt64();
          break;
        }
        case 24: {
          ActionType = (global::ProtoActionType) input.ReadEnum();
          break;
        }
        case 32: {
          ActionStatus = (global::ProtoActionStatus) input.ReadEnum();
          break;
        }
        case 40: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 48: {
          Volume = input.ReadInt64();
          break;
        }
        case 56: {
          Price = input.ReadInt64();
          break;
        }
        case 64: {
          StopLoss = input.ReadInt64();
          break;
        }
        case 72: {
          TakeProfit = input.ReadInt64();
          break;
        }
        case 82: {
          SessionId = input.ReadString();
          break;
        }
        case 90: {
          ClientRequestId = input.ReadString();
          break;
        }
        case 98: {
          Label = input.ReadString();
          break;
        }
        case 106: {
          Comment = input.ReadString();
          break;
        }
        case 114: {
          Channel = input.ReadString();
          break;
        }
        case 136: {
          ExecuteTimestamp = input.ReadInt64();
          break;
        }
        case 144: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 152: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 160: {
          StopTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 168: {
          StopLossTriggerMethod = (global::ProtoOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 176: {
          DesiredOpenTimestamp = input.ReadInt64();
          break;
        }
        case 184: {
          OcoOrderId = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Account Deposit/Withdrawal operation entity
/// </summary>
public sealed partial class ProtoDepositWithdraw : pb::IMessage<ProtoDepositWithdraw>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoDepositWithdraw> _parser = new pb::MessageParser<ProtoDepositWithdraw>(() => new ProtoDepositWithdraw());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoDepositWithdraw> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDepositWithdraw() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDepositWithdraw(ProtoDepositWithdraw other) : this() {
    _hasBits0 = other._hasBits0;
    operationType_ = other.operationType_;
    balanceHistoryId_ = other.balanceHistoryId_;
    traderId_ = other.traderId_;
    balance_ = other.balance_;
    delta_ = other.delta_;
    changeBalanceTimestamp_ = other.changeBalanceTimestamp_;
    comment_ = other.comment_;
    externalNote_ = other.externalNote_;
    balanceVersion_ = other.balanceVersion_;
    equity_ = other.equity_;
    minEquity_ = other.minEquity_;
    maxEquity_ = other.maxEquity_;
    nonWithdrawableBonus_ = other.nonWithdrawableBonus_;
    source_ = other.source_;
    externalId_ = other.externalId_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDepositWithdraw Clone() {
    return new ProtoDepositWithdraw(this);
  }

  /// <summary>Field number for the "operationType" field.</summary>
  public const int OperationTypeFieldNumber = 1;
  private readonly static global::ProtoChangeBalanceType OperationTypeDefaultValue = global::ProtoChangeBalanceType.BalanceDeposit;

  private global::ProtoChangeBalanceType operationType_;
  /// <summary>
  /// Type of the operation - Deposit/Withdrawal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoChangeBalanceType OperationType {
    get { if ((_hasBits0 & 1) != 0) { return operationType_; } else { return OperationTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      operationType_ = value;
    }
  }
  /// <summary>Gets whether the "operationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOperationType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "operationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOperationType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "balanceHistoryId" field.</summary>
  public const int BalanceHistoryIdFieldNumber = 2;
  private readonly static long BalanceHistoryIdDefaultValue = 0L;

  private long balanceHistoryId_;
  /// <summary>
  /// The unique ID of the Deposit/Withdrawal operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceHistoryId {
    get { if ((_hasBits0 & 2) != 0) { return balanceHistoryId_; } else { return BalanceHistoryIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      balanceHistoryId_ = value;
    }
  }
  /// <summary>Gets whether the "balanceHistoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceHistoryId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "balanceHistoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceHistoryId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 3;
  private readonly static long TraderIdDefaultValue = 0L;

  private long traderId_;
  /// <summary>
  /// ID of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderId {
    get { if ((_hasBits0 & 4) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 4;
  private readonly static long BalanceDefaultValue = 0L;

  private long balance_;
  /// <summary>
  /// Trader's balance after the operation was executed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Balance {
    get { if ((_hasBits0 & 8) != 0) { return balance_; } else { return BalanceDefaultValue; } }
    set {
      _hasBits0 |= 8;
      balance_ = value;
    }
  }
  /// <summary>Gets whether the "balance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalance {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "balance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalance() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "delta" field.</summary>
  public const int DeltaFieldNumber = 5;
  private readonly static long DeltaDefaultValue = 0L;

  private long delta_;
  /// <summary>
  /// Amount of Deposit/Withdrawal operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Delta {
    get { if ((_hasBits0 & 16) != 0) { return delta_; } else { return DeltaDefaultValue; } }
    set {
      _hasBits0 |= 16;
      delta_ = value;
    }
  }
  /// <summary>Gets whether the "delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDelta {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDelta() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "changeBalanceTimestamp" field.</summary>
  public const int ChangeBalanceTimestampFieldNumber = 6;
  private readonly static long ChangeBalanceTimestampDefaultValue = 0L;

  private long changeBalanceTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when Deposit/Withdrawal operation was executed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ChangeBalanceTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return changeBalanceTimestamp_; } else { return ChangeBalanceTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      changeBalanceTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "changeBalanceTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChangeBalanceTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "changeBalanceTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChangeBalanceTimestamp() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 7;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment added to operation. Visible only to Managers
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "externalNote" field.</summary>
  public const int ExternalNoteFieldNumber = 8;
  private readonly static string ExternalNoteDefaultValue = "";

  private string externalNote_;
  /// <summary>
  /// Note added to operation. Visible to the Trader and to Managers
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ExternalNote {
    get { return externalNote_ ?? ExternalNoteDefaultValue; }
    set {
      externalNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "externalNote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExternalNote {
    get { return externalNote_ != null; }
  }
  /// <summary>Clears the value of the "externalNote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExternalNote() {
    externalNote_ = null;
  }

  /// <summary>Field number for the "balanceVersion" field.</summary>
  public const int BalanceVersionFieldNumber = 9;
  private readonly static long BalanceVersionDefaultValue = 0L;

  private long balanceVersion_;
  /// <summary>
  /// Balance version used to identify the final balance. Increments each time when the Trader's balance is changed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceVersion {
    get { if ((_hasBits0 & 64) != 0) { return balanceVersion_; } else { return BalanceVersionDefaultValue; } }
    set {
      _hasBits0 |= 64;
      balanceVersion_ = value;
    }
  }
  /// <summary>Gets whether the "balanceVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceVersion {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "balanceVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceVersion() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "equity" field.</summary>
  public const int EquityFieldNumber = 10;
  private readonly static long EquityDefaultValue = 0L;

  private long equity_;
  /// <summary>
  /// Trader's equity after balance operation was executed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Equity {
    get { if ((_hasBits0 & 128) != 0) { return equity_; } else { return EquityDefaultValue; } }
    set {
      _hasBits0 |= 128;
      equity_ = value;
    }
  }
  /// <summary>Gets whether the "equity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEquity {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "equity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEquity() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "minEquity" field.</summary>
  public const int MinEquityFieldNumber = 11;
  private readonly static long MinEquityDefaultValue = 0L;

  private long minEquity_;
  /// <summary>
  /// Min equity since previous balance operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinEquity {
    get { if ((_hasBits0 & 256) != 0) { return minEquity_; } else { return MinEquityDefaultValue; } }
    set {
      _hasBits0 |= 256;
      minEquity_ = value;
    }
  }
  /// <summary>Gets whether the "minEquity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinEquity {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "minEquity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinEquity() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "maxEquity" field.</summary>
  public const int MaxEquityFieldNumber = 12;
  private readonly static long MaxEquityDefaultValue = 0L;

  private long maxEquity_;
  /// <summary>
  /// Max equity since previous balance operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxEquity {
    get { if ((_hasBits0 & 512) != 0) { return maxEquity_; } else { return MaxEquityDefaultValue; } }
    set {
      _hasBits0 |= 512;
      maxEquity_ = value;
    }
  }
  /// <summary>Gets whether the "maxEquity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxEquity {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "maxEquity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxEquity() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "nonWithdrawableBonus" field.</summary>
  public const int NonWithdrawableBonusFieldNumber = 13;
  private readonly static long NonWithdrawableBonusDefaultValue = 0L;

  private long nonWithdrawableBonus_;
  /// <summary>
  /// If TRUE then deposit is a non-withdrawable Bonus from Broker that can be used only for trading
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NonWithdrawableBonus {
    get { if ((_hasBits0 & 1024) != 0) { return nonWithdrawableBonus_; } else { return NonWithdrawableBonusDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      nonWithdrawableBonus_ = value;
    }
  }
  /// <summary>Gets whether the "nonWithdrawableBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNonWithdrawableBonus {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "nonWithdrawableBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNonWithdrawableBonus() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 14;
  private readonly static string SourceDefaultValue = "";

  private string source_;
  /// <summary>
  /// Field can be used to determine source of payment (e. g VISA or PayPal)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Source {
    get { return source_ ?? SourceDefaultValue; }
    set {
      source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "source" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSource {
    get { return source_ != null; }
  }
  /// <summary>Clears the value of the "source" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSource() {
    source_ = null;
  }

  /// <summary>Field number for the "externalId" field.</summary>
  public const int ExternalIdFieldNumber = 15;
  private readonly static string ExternalIdDefaultValue = "";

  private string externalId_;
  /// <summary>
  /// ID which can be used for reconciliation with third party systems
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ExternalId {
    get { return externalId_ ?? ExternalIdDefaultValue; }
    set {
      externalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "externalId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExternalId {
    get { return externalId_ != null; }
  }
  /// <summary>Clears the value of the "externalId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExternalId() {
    externalId_ = null;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 16;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects balance, delta, equity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 2048) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~2048;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoDepositWithdraw);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoDepositWithdraw other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OperationType != other.OperationType) return false;
    if (BalanceHistoryId != other.BalanceHistoryId) return false;
    if (TraderId != other.TraderId) return false;
    if (Balance != other.Balance) return false;
    if (Delta != other.Delta) return false;
    if (ChangeBalanceTimestamp != other.ChangeBalanceTimestamp) return false;
    if (Comment != other.Comment) return false;
    if (ExternalNote != other.ExternalNote) return false;
    if (BalanceVersion != other.BalanceVersion) return false;
    if (Equity != other.Equity) return false;
    if (MinEquity != other.MinEquity) return false;
    if (MaxEquity != other.MaxEquity) return false;
    if (NonWithdrawableBonus != other.NonWithdrawableBonus) return false;
    if (Source != other.Source) return false;
    if (ExternalId != other.ExternalId) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasOperationType) hash ^= OperationType.GetHashCode();
    if (HasBalanceHistoryId) hash ^= BalanceHistoryId.GetHashCode();
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasBalance) hash ^= Balance.GetHashCode();
    if (HasDelta) hash ^= Delta.GetHashCode();
    if (HasChangeBalanceTimestamp) hash ^= ChangeBalanceTimestamp.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasExternalNote) hash ^= ExternalNote.GetHashCode();
    if (HasBalanceVersion) hash ^= BalanceVersion.GetHashCode();
    if (HasEquity) hash ^= Equity.GetHashCode();
    if (HasMinEquity) hash ^= MinEquity.GetHashCode();
    if (HasMaxEquity) hash ^= MaxEquity.GetHashCode();
    if (HasNonWithdrawableBonus) hash ^= NonWithdrawableBonus.GetHashCode();
    if (HasSource) hash ^= Source.GetHashCode();
    if (HasExternalId) hash ^= ExternalId.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBalanceHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BalanceHistoryId);
    }
    if (HasTraderId) {
      output.WriteRawTag(24);
      output.WriteInt64(TraderId);
    }
    if (HasBalance) {
      output.WriteRawTag(32);
      output.WriteInt64(Balance);
    }
    if (HasDelta) {
      output.WriteRawTag(40);
      output.WriteInt64(Delta);
    }
    if (HasChangeBalanceTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(ChangeBalanceTimestamp);
    }
    if (HasComment) {
      output.WriteRawTag(58);
      output.WriteString(Comment);
    }
    if (HasExternalNote) {
      output.WriteRawTag(66);
      output.WriteString(ExternalNote);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(72);
      output.WriteInt64(BalanceVersion);
    }
    if (HasEquity) {
      output.WriteRawTag(80);
      output.WriteInt64(Equity);
    }
    if (HasMinEquity) {
      output.WriteRawTag(88);
      output.WriteInt64(MinEquity);
    }
    if (HasMaxEquity) {
      output.WriteRawTag(96);
      output.WriteInt64(MaxEquity);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(104);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasSource) {
      output.WriteRawTag(114);
      output.WriteString(Source);
    }
    if (HasExternalId) {
      output.WriteRawTag(122);
      output.WriteString(ExternalId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBalanceHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BalanceHistoryId);
    }
    if (HasTraderId) {
      output.WriteRawTag(24);
      output.WriteInt64(TraderId);
    }
    if (HasBalance) {
      output.WriteRawTag(32);
      output.WriteInt64(Balance);
    }
    if (HasDelta) {
      output.WriteRawTag(40);
      output.WriteInt64(Delta);
    }
    if (HasChangeBalanceTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(ChangeBalanceTimestamp);
    }
    if (HasComment) {
      output.WriteRawTag(58);
      output.WriteString(Comment);
    }
    if (HasExternalNote) {
      output.WriteRawTag(66);
      output.WriteString(ExternalNote);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(72);
      output.WriteInt64(BalanceVersion);
    }
    if (HasEquity) {
      output.WriteRawTag(80);
      output.WriteInt64(Equity);
    }
    if (HasMinEquity) {
      output.WriteRawTag(88);
      output.WriteInt64(MinEquity);
    }
    if (HasMaxEquity) {
      output.WriteRawTag(96);
      output.WriteInt64(MaxEquity);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(104);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasSource) {
      output.WriteRawTag(114);
      output.WriteString(Source);
    }
    if (HasExternalId) {
      output.WriteRawTag(122);
      output.WriteString(ExternalId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasOperationType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperationType);
    }
    if (HasBalanceHistoryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceHistoryId);
    }
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderId);
    }
    if (HasBalance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
    }
    if (HasDelta) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Delta);
    }
    if (HasChangeBalanceTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeBalanceTimestamp);
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasExternalNote) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalNote);
    }
    if (HasBalanceVersion) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceVersion);
    }
    if (HasEquity) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Equity);
    }
    if (HasMinEquity) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinEquity);
    }
    if (HasMaxEquity) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxEquity);
    }
    if (HasNonWithdrawableBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NonWithdrawableBonus);
    }
    if (HasSource) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
    }
    if (HasExternalId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalId);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoDepositWithdraw other) {
    if (other == null) {
      return;
    }
    if (other.HasOperationType) {
      OperationType = other.OperationType;
    }
    if (other.HasBalanceHistoryId) {
      BalanceHistoryId = other.BalanceHistoryId;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasBalance) {
      Balance = other.Balance;
    }
    if (other.HasDelta) {
      Delta = other.Delta;
    }
    if (other.HasChangeBalanceTimestamp) {
      ChangeBalanceTimestamp = other.ChangeBalanceTimestamp;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasExternalNote) {
      ExternalNote = other.ExternalNote;
    }
    if (other.HasBalanceVersion) {
      BalanceVersion = other.BalanceVersion;
    }
    if (other.HasEquity) {
      Equity = other.Equity;
    }
    if (other.HasMinEquity) {
      MinEquity = other.MinEquity;
    }
    if (other.HasMaxEquity) {
      MaxEquity = other.MaxEquity;
    }
    if (other.HasNonWithdrawableBonus) {
      NonWithdrawableBonus = other.NonWithdrawableBonus;
    }
    if (other.HasSource) {
      Source = other.Source;
    }
    if (other.HasExternalId) {
      ExternalId = other.ExternalId;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OperationType = (global::ProtoChangeBalanceType) input.ReadEnum();
          break;
        }
        case 16: {
          BalanceHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          TraderId = input.ReadInt64();
          break;
        }
        case 32: {
          Balance = input.ReadInt64();
          break;
        }
        case 40: {
          Delta = input.ReadInt64();
          break;
        }
        case 48: {
          ChangeBalanceTimestamp = input.ReadInt64();
          break;
        }
        case 58: {
          Comment = input.ReadString();
          break;
        }
        case 66: {
          ExternalNote = input.ReadString();
          break;
        }
        case 72: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 80: {
          Equity = input.ReadInt64();
          break;
        }
        case 88: {
          MinEquity = input.ReadInt64();
          break;
        }
        case 96: {
          MaxEquity = input.ReadInt64();
          break;
        }
        case 104: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 114: {
          Source = input.ReadString();
          break;
        }
        case 122: {
          ExternalId = input.ReadString();
          break;
        }
        case 128: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          OperationType = (global::ProtoChangeBalanceType) input.ReadEnum();
          break;
        }
        case 16: {
          BalanceHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          TraderId = input.ReadInt64();
          break;
        }
        case 32: {
          Balance = input.ReadInt64();
          break;
        }
        case 40: {
          Delta = input.ReadInt64();
          break;
        }
        case 48: {
          ChangeBalanceTimestamp = input.ReadInt64();
          break;
        }
        case 58: {
          Comment = input.ReadString();
          break;
        }
        case 66: {
          ExternalNote = input.ReadString();
          break;
        }
        case 72: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 80: {
          Equity = input.ReadInt64();
          break;
        }
        case 88: {
          MinEquity = input.ReadInt64();
          break;
        }
        case 96: {
          MaxEquity = input.ReadInt64();
          break;
        }
        case 104: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 114: {
          Source = input.ReadString();
          break;
        }
        case 122: {
          ExternalId = input.ReadString();
          break;
        }
        case 128: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Bonus Deposit/Withdrawal entity
/// </summary>
public sealed partial class ProtoBonusDepositWithdraw : pb::IMessage<ProtoBonusDepositWithdraw>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoBonusDepositWithdraw> _parser = new pb::MessageParser<ProtoBonusDepositWithdraw>(() => new ProtoBonusDepositWithdraw());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoBonusDepositWithdraw> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoBonusDepositWithdraw() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoBonusDepositWithdraw(ProtoBonusDepositWithdraw other) : this() {
    _hasBits0 = other._hasBits0;
    operationType_ = other.operationType_;
    bonusHistoryId_ = other.bonusHistoryId_;
    traderId_ = other.traderId_;
    managerBonus_ = other.managerBonus_;
    managerDelta_ = other.managerDelta_;
    ibBonus_ = other.ibBonus_;
    ibDelta_ = other.ibDelta_;
    changeBonusTimestamp_ = other.changeBonusTimestamp_;
    comment_ = other.comment_;
    externalNote_ = other.externalNote_;
    introducingBrokerId_ = other.introducingBrokerId_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoBonusDepositWithdraw Clone() {
    return new ProtoBonusDepositWithdraw(this);
  }

  /// <summary>Field number for the "operationType" field.</summary>
  public const int OperationTypeFieldNumber = 1;
  private readonly static global::ProtoChangeBonusType OperationTypeDefaultValue = global::ProtoChangeBonusType.BonusDeposit;

  private global::ProtoChangeBonusType operationType_;
  /// <summary>
  /// Type of the operation. Bonus Deposit/Withdrawal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoChangeBonusType OperationType {
    get { if ((_hasBits0 & 1) != 0) { return operationType_; } else { return OperationTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      operationType_ = value;
    }
  }
  /// <summary>Gets whether the "operationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOperationType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "operationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOperationType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "bonusHistoryId" field.</summary>
  public const int BonusHistoryIdFieldNumber = 2;
  private readonly static long BonusHistoryIdDefaultValue = 0L;

  private long bonusHistoryId_;
  /// <summary>
  /// The unique ID of the Bonus Deposit/Withdrawal operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BonusHistoryId {
    get { if ((_hasBits0 & 2) != 0) { return bonusHistoryId_; } else { return BonusHistoryIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      bonusHistoryId_ = value;
    }
  }
  /// <summary>Gets whether the "bonusHistoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBonusHistoryId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "bonusHistoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBonusHistoryId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 3;
  private readonly static long TraderIdDefaultValue = 0L;

  private long traderId_;
  /// <summary>
  /// ID of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderId {
    get { if ((_hasBits0 & 4) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "managerBonus" field.</summary>
  public const int ManagerBonusFieldNumber = 4;
  private readonly static long ManagerBonusDefaultValue = 0L;

  private long managerBonus_;
  /// <summary>
  /// Total amount of broker's Bonus after the operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerBonus {
    get { if ((_hasBits0 & 8) != 0) { return managerBonus_; } else { return ManagerBonusDefaultValue; } }
    set {
      _hasBits0 |= 8;
      managerBonus_ = value;
    }
  }
  /// <summary>Gets whether the "managerBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerBonus {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "managerBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerBonus() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "managerDelta" field.</summary>
  public const int ManagerDeltaFieldNumber = 5;
  private readonly static long ManagerDeltaDefaultValue = 0L;

  private long managerDelta_;
  /// <summary>
  /// Amount of Bonus Deposited/Withdrew by the Manager
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerDelta {
    get { if ((_hasBits0 & 16) != 0) { return managerDelta_; } else { return ManagerDeltaDefaultValue; } }
    set {
      _hasBits0 |= 16;
      managerDelta_ = value;
    }
  }
  /// <summary>Gets whether the "managerDelta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerDelta {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "managerDelta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerDelta() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "ibBonus" field.</summary>
  public const int IbBonusFieldNumber = 6;
  private readonly static long IbBonusDefaultValue = 0L;

  private long ibBonus_;
  /// <summary>
  /// Total amount of Introducing Broker's Bonus after the operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IbBonus {
    get { if ((_hasBits0 & 32) != 0) { return ibBonus_; } else { return IbBonusDefaultValue; } }
    set {
      _hasBits0 |= 32;
      ibBonus_ = value;
    }
  }
  /// <summary>Gets whether the "ibBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbBonus {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ibBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbBonus() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "ibDelta" field.</summary>
  public const int IbDeltaFieldNumber = 7;
  private readonly static long IbDeltaDefaultValue = 0L;

  private long ibDelta_;
  /// <summary>
  /// Amount of Bonus Deposited/Withdrew by Introducing Broker
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IbDelta {
    get { if ((_hasBits0 & 64) != 0) { return ibDelta_; } else { return IbDeltaDefaultValue; } }
    set {
      _hasBits0 |= 64;
      ibDelta_ = value;
    }
  }
  /// <summary>Gets whether the "ibDelta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbDelta {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "ibDelta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbDelta() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "changeBonusTimestamp" field.</summary>
  public const int ChangeBonusTimestampFieldNumber = 8;
  private readonly static long ChangeBonusTimestampDefaultValue = 0L;

  private long changeBonusTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Bonus operation was executed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ChangeBonusTimestamp {
    get { if ((_hasBits0 & 128) != 0) { return changeBonusTimestamp_; } else { return ChangeBonusTimestampDefaultValue; } }
    set {
      _hasBits0 |= 128;
      changeBonusTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "changeBonusTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChangeBonusTimestamp {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "changeBonusTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChangeBonusTimestamp() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 10;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment added to operation. Visible only to Managers
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "externalNote" field.</summary>
  public const int ExternalNoteFieldNumber = 11;
  private readonly static string ExternalNoteDefaultValue = "";

  private string externalNote_;
  /// <summary>
  /// Note added to operation. Visible to the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ExternalNote {
    get { return externalNote_ ?? ExternalNoteDefaultValue; }
    set {
      externalNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "externalNote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExternalNote {
    get { return externalNote_ != null; }
  }
  /// <summary>Clears the value of the "externalNote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExternalNote() {
    externalNote_ = null;
  }

  /// <summary>Field number for the "introducingBrokerId" field.</summary>
  public const int IntroducingBrokerIdFieldNumber = 12;
  private readonly static long IntroducingBrokerIdDefaultValue = 0L;

  private long introducingBrokerId_;
  /// <summary>
  /// ID of Introducing Broker who Deposited/Withdrew Bonus
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerId {
    get { if ((_hasBits0 & 256) != 0) { return introducingBrokerId_; } else { return IntroducingBrokerIdDefaultValue; } }
    set {
      _hasBits0 |= 256;
      introducingBrokerId_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerId {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerId() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 13;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects managerBonus, managerDelta, ibBonus, ibDelta
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 512) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 512;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoBonusDepositWithdraw);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoBonusDepositWithdraw other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OperationType != other.OperationType) return false;
    if (BonusHistoryId != other.BonusHistoryId) return false;
    if (TraderId != other.TraderId) return false;
    if (ManagerBonus != other.ManagerBonus) return false;
    if (ManagerDelta != other.ManagerDelta) return false;
    if (IbBonus != other.IbBonus) return false;
    if (IbDelta != other.IbDelta) return false;
    if (ChangeBonusTimestamp != other.ChangeBonusTimestamp) return false;
    if (Comment != other.Comment) return false;
    if (ExternalNote != other.ExternalNote) return false;
    if (IntroducingBrokerId != other.IntroducingBrokerId) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasOperationType) hash ^= OperationType.GetHashCode();
    if (HasBonusHistoryId) hash ^= BonusHistoryId.GetHashCode();
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasManagerBonus) hash ^= ManagerBonus.GetHashCode();
    if (HasManagerDelta) hash ^= ManagerDelta.GetHashCode();
    if (HasIbBonus) hash ^= IbBonus.GetHashCode();
    if (HasIbDelta) hash ^= IbDelta.GetHashCode();
    if (HasChangeBonusTimestamp) hash ^= ChangeBonusTimestamp.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasExternalNote) hash ^= ExternalNote.GetHashCode();
    if (HasIntroducingBrokerId) hash ^= IntroducingBrokerId.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBonusHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BonusHistoryId);
    }
    if (HasTraderId) {
      output.WriteRawTag(24);
      output.WriteInt64(TraderId);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(32);
      output.WriteInt64(ManagerBonus);
    }
    if (HasManagerDelta) {
      output.WriteRawTag(40);
      output.WriteInt64(ManagerDelta);
    }
    if (HasIbBonus) {
      output.WriteRawTag(48);
      output.WriteInt64(IbBonus);
    }
    if (HasIbDelta) {
      output.WriteRawTag(56);
      output.WriteInt64(IbDelta);
    }
    if (HasChangeBonusTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(ChangeBonusTimestamp);
    }
    if (HasComment) {
      output.WriteRawTag(82);
      output.WriteString(Comment);
    }
    if (HasExternalNote) {
      output.WriteRawTag(90);
      output.WriteString(ExternalNote);
    }
    if (HasIntroducingBrokerId) {
      output.WriteRawTag(96);
      output.WriteInt64(IntroducingBrokerId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(104);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBonusHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BonusHistoryId);
    }
    if (HasTraderId) {
      output.WriteRawTag(24);
      output.WriteInt64(TraderId);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(32);
      output.WriteInt64(ManagerBonus);
    }
    if (HasManagerDelta) {
      output.WriteRawTag(40);
      output.WriteInt64(ManagerDelta);
    }
    if (HasIbBonus) {
      output.WriteRawTag(48);
      output.WriteInt64(IbBonus);
    }
    if (HasIbDelta) {
      output.WriteRawTag(56);
      output.WriteInt64(IbDelta);
    }
    if (HasChangeBonusTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(ChangeBonusTimestamp);
    }
    if (HasComment) {
      output.WriteRawTag(82);
      output.WriteString(Comment);
    }
    if (HasExternalNote) {
      output.WriteRawTag(90);
      output.WriteString(ExternalNote);
    }
    if (HasIntroducingBrokerId) {
      output.WriteRawTag(96);
      output.WriteInt64(IntroducingBrokerId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(104);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasOperationType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperationType);
    }
    if (HasBonusHistoryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BonusHistoryId);
    }
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderId);
    }
    if (HasManagerBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagerBonus);
    }
    if (HasManagerDelta) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagerDelta);
    }
    if (HasIbBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IbBonus);
    }
    if (HasIbDelta) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IbDelta);
    }
    if (HasChangeBonusTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeBonusTimestamp);
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasExternalNote) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalNote);
    }
    if (HasIntroducingBrokerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerId);
    }
    if (HasMoneyDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoBonusDepositWithdraw other) {
    if (other == null) {
      return;
    }
    if (other.HasOperationType) {
      OperationType = other.OperationType;
    }
    if (other.HasBonusHistoryId) {
      BonusHistoryId = other.BonusHistoryId;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasManagerBonus) {
      ManagerBonus = other.ManagerBonus;
    }
    if (other.HasManagerDelta) {
      ManagerDelta = other.ManagerDelta;
    }
    if (other.HasIbBonus) {
      IbBonus = other.IbBonus;
    }
    if (other.HasIbDelta) {
      IbDelta = other.IbDelta;
    }
    if (other.HasChangeBonusTimestamp) {
      ChangeBonusTimestamp = other.ChangeBonusTimestamp;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasExternalNote) {
      ExternalNote = other.ExternalNote;
    }
    if (other.HasIntroducingBrokerId) {
      IntroducingBrokerId = other.IntroducingBrokerId;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OperationType = (global::ProtoChangeBonusType) input.ReadEnum();
          break;
        }
        case 16: {
          BonusHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          TraderId = input.ReadInt64();
          break;
        }
        case 32: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 40: {
          ManagerDelta = input.ReadInt64();
          break;
        }
        case 48: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 56: {
          IbDelta = input.ReadInt64();
          break;
        }
        case 64: {
          ChangeBonusTimestamp = input.ReadInt64();
          break;
        }
        case 82: {
          Comment = input.ReadString();
          break;
        }
        case 90: {
          ExternalNote = input.ReadString();
          break;
        }
        case 96: {
          IntroducingBrokerId = input.ReadInt64();
          break;
        }
        case 104: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          OperationType = (global::ProtoChangeBonusType) input.ReadEnum();
          break;
        }
        case 16: {
          BonusHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          TraderId = input.ReadInt64();
          break;
        }
        case 32: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 40: {
          ManagerDelta = input.ReadInt64();
          break;
        }
        case 48: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 56: {
          IbDelta = input.ReadInt64();
          break;
        }
        case 64: {
          ChangeBonusTimestamp = input.ReadInt64();
          break;
        }
        case 82: {
          Comment = input.ReadString();
          break;
        }
        case 90: {
          ExternalNote = input.ReadString();
          break;
        }
        case 96: {
          IntroducingBrokerId = input.ReadInt64();
          break;
        }
        case 104: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Trader entity
/// </summary>
public sealed partial class ProtoTrader : pb::IMessage<ProtoTrader>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoTrader> _parser = new pb::MessageParser<ProtoTrader>(() => new ProtoTrader());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  private int _hasBits1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoTrader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTrader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTrader(ProtoTrader other) : this() {
    _hasBits0 = other._hasBits0;
    _hasBits1 = other._hasBits1;
    traderId_ = other.traderId_;
    login_ = other.login_;
    groupId_ = other.groupId_;
    balance_ = other.balance_;
    accountType_ = other.accountType_;
    name_ = other.name_;
    passwordHash_ = other.passwordHash_;
    description_ = other.description_;
    status_ = other.status_;
    countryId_ = other.countryId_;
    state_ = other.state_;
    city_ = other.city_;
    address_ = other.address_;
    zipCode_ = other.zipCode_;
    phone_ = other.phone_;
    phonePassword_ = other.phonePassword_;
    email_ = other.email_;
    documentId_ = other.documentId_;
    registrationTimestamp_ = other.registrationTimestamp_;
    lastConnectTimestamp_ = other.lastConnectTimestamp_;
    online_ = other.online_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    deleted_ = other.deleted_;
    balanceVersion_ = other.balanceVersion_;
    introducingBroker_ = other.introducingBroker_;
    parentIntroducingBrokerIdIsNull_ = other.parentIntroducingBrokerIdIsNull_;
    parentIntroducingBrokerId_ = other.parentIntroducingBrokerId_;
    introducingBrokerCommissionRate_ = other.introducingBrokerCommissionRate_;
    pocketCommissionRate_ = other.pocketCommissionRate_;
    pocketMarkupRate_ = other.pocketMarkupRate_;
    defaultIntroducingBrokerCommissionRate_ = other.defaultIntroducingBrokerCommissionRate_;
    defaultPocketCommissionRate_ = other.defaultPocketCommissionRate_;
    defaultPocketMarkupRate_ = other.defaultPocketMarkupRate_;
    defaultRebateRate_ = other.defaultRebateRate_;
    defaultIbCommissionsType_ = other.defaultIbCommissionsType_;
    ibCommissionsType_ = other.ibCommissionsType_;
    managerBonus_ = other.managerBonus_;
    ibBonus_ = other.ibBonus_;
    showPersonalData_ = other.showPersonalData_;
    splitRevenue_ = other.splitRevenue_;
    rankIdIsNull_ = other.rankIdIsNull_;
    rankId_ = other.rankId_;
    hasRank_ = other.hasRank_;
    rank_ = other.rank_.Clone();
    lastName_ = other.lastName_;
    defaultSplitRevenue_ = other.defaultSplitRevenue_;
    accessRights_ = other.accessRights_;
    sendOwnStatement_ = other.sendOwnStatement_;
    depositAssetId_ = other.depositAssetId_;
    swapFree_ = other.swapFree_;
    nonWithdrawableBonus_ = other.nonWithdrawableBonus_;
    leverageInCents_ = other.leverageInCents_;
    moveToIBGroup_ = other.moveToIBGroup_;
    totalMarginCalculationType_ = other.totalMarginCalculationType_;
    brokerName_ = other.brokerName_;
    maxLeverage_ = other.maxLeverage_;
    freeTrades_ = other.freeTrades_;
    version_ = other.version_;
    subAccountOf_ = other.subAccountOf_;
    maxNOP_ = other.maxNOP_;
    disablePasswordLogin_ = other.disablePasswordLogin_;
    isLimitedRisk_ = other.isLimitedRisk_;
    limitedRiskMarginCalculationStrategy_ = other.limitedRiskMarginCalculationStrategy_;
    moneyDigits_ = other.moneyDigits_;
    managementFee_ = other.managementFee_;
    sendStatementToBroker_ = other.sendStatementToBroker_;
    defaultIbCommissionSymbolCategory_ = other.defaultIbCommissionSymbolCategory_.Clone();
    ibCommissionSymbolCategory_ = other.ibCommissionSymbolCategory_.Clone();
    fairStopOut_ = other.fairStopOut_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTrader Clone() {
    return new ProtoTrader(this);
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 1;
  private readonly static long TraderIdDefaultValue = 0L;

  private long traderId_;
  /// <summary>
  /// Trader ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderId {
    get { if ((_hasBits0 & 1) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "login" field.</summary>
  public const int LoginFieldNumber = 2;
  private readonly static long LoginDefaultValue = 0L;

  private long login_;
  /// <summary>
  /// TraderLogin for a specific Account. Value is displayed on Client App UI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Login {
    get { if ((_hasBits0 & 2) != 0) { return login_; } else { return LoginDefaultValue; } }
    set {
      _hasBits0 |= 2;
      login_ = value;
    }
  }
  /// <summary>Gets whether the "login" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLogin {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "login" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLogin() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "groupId" field.</summary>
  public const int GroupIdFieldNumber = 3;
  private readonly static long GroupIdDefaultValue = 0L;

  private long groupId_;
  /// <summary>
  /// ID of Trader's group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GroupId {
    get { if ((_hasBits0 & 4) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      groupId_ = value;
    }
  }
  /// <summary>Gets whether the "groupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGroupId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "groupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGroupId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 8;
  private readonly static long BalanceDefaultValue = 0L;

  private long balance_;
  /// <summary>
  /// Current balance
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Balance {
    get { if ((_hasBits0 & 8) != 0) { return balance_; } else { return BalanceDefaultValue; } }
    set {
      _hasBits0 |= 8;
      balance_ = value;
    }
  }
  /// <summary>Gets whether the "balance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalance {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "balance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalance() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "accountType" field.</summary>
  public const int AccountTypeFieldNumber = 9;
  private readonly static global::ProtoAccountType AccountTypeDefaultValue = global::ProtoAccountType.Hedged;

  private global::ProtoAccountType accountType_;
  /// <summary>
  /// Type of Account (Trader)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoAccountType AccountType {
    get { if ((_hasBits0 & 16) != 0) { return accountType_; } else { return AccountTypeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      accountType_ = value;
    }
  }
  /// <summary>Gets whether the "accountType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAccountType {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "accountType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAccountType() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 10;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "passwordHash" field.</summary>
  public const int PasswordHashFieldNumber = 11;
  private readonly static string PasswordHashDefaultValue = "";

  private string passwordHash_;
  /// <summary>
  /// Password hash of the Trader (MD5 of password in utf-8 in lower case)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string PasswordHash {
    get { return passwordHash_ ?? PasswordHashDefaultValue; }
    set {
      passwordHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "passwordHash" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPasswordHash {
    get { return passwordHash_ != null; }
  }
  /// <summary>Clears the value of the "passwordHash" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPasswordHash() {
    passwordHash_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 12;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description for the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 13;
  private readonly static string StatusDefaultValue = "";

  private string status_;
  /// <summary>
  /// Can be used for KYC related purposes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Status {
    get { return status_ ?? StatusDefaultValue; }
    set {
      status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStatus {
    get { return status_ != null; }
  }
  /// <summary>Clears the value of the "status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStatus() {
    status_ = null;
  }

  /// <summary>Field number for the "countryId" field.</summary>
  public const int CountryIdFieldNumber = 14;
  private readonly static long CountryIdDefaultValue = 0L;

  private long countryId_;
  /// <summary>
  /// ID of Trader's Country
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CountryId {
    get { if ((_hasBits0 & 32) != 0) { return countryId_; } else { return CountryIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      countryId_ = value;
    }
  }
  /// <summary>Gets whether the "countryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCountryId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "countryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCountryId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 15;
  private readonly static string StateDefaultValue = "";

  private string state_;
  /// <summary>
  /// State (region) of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string State {
    get { return state_ ?? StateDefaultValue; }
    set {
      state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasState {
    get { return state_ != null; }
  }
  /// <summary>Clears the value of the "state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearState() {
    state_ = null;
  }

  /// <summary>Field number for the "city" field.</summary>
  public const int CityFieldNumber = 16;
  private readonly static string CityDefaultValue = "";

  private string city_;
  /// <summary>
  /// City of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string City {
    get { return city_ ?? CityDefaultValue; }
    set {
      city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "city" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCity {
    get { return city_ != null; }
  }
  /// <summary>Clears the value of the "city" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCity() {
    city_ = null;
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 17;
  private readonly static string AddressDefaultValue = "";

  private string address_;
  /// <summary>
  /// Address of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Address {
    get { return address_ ?? AddressDefaultValue; }
    set {
      address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "address" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAddress {
    get { return address_ != null; }
  }
  /// <summary>Clears the value of the "address" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAddress() {
    address_ = null;
  }

  /// <summary>Field number for the "zipCode" field.</summary>
  public const int ZipCodeFieldNumber = 18;
  private readonly static string ZipCodeDefaultValue = "";

  private string zipCode_;
  /// <summary>
  /// Zip code of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ZipCode {
    get { return zipCode_ ?? ZipCodeDefaultValue; }
    set {
      zipCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "zipCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasZipCode {
    get { return zipCode_ != null; }
  }
  /// <summary>Clears the value of the "zipCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearZipCode() {
    zipCode_ = null;
  }

  /// <summary>Field number for the "phone" field.</summary>
  public const int PhoneFieldNumber = 19;
  private readonly static string PhoneDefaultValue = "";

  private string phone_;
  /// <summary>
  /// Phone number of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Phone {
    get { return phone_ ?? PhoneDefaultValue; }
    set {
      phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "phone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPhone {
    get { return phone_ != null; }
  }
  /// <summary>Clears the value of the "phone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPhone() {
    phone_ = null;
  }

  /// <summary>Field number for the "phonePassword" field.</summary>
  public const int PhonePasswordFieldNumber = 20;
  private readonly static string PhonePasswordDefaultValue = "";

  private string phonePassword_;
  /// <summary>
  /// Temporary password generated by the server to organize phone trading functionality (Manager trades by Trader's phone request)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string PhonePassword {
    get { return phonePassword_ ?? PhonePasswordDefaultValue; }
    set {
      phonePassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "phonePassword" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPhonePassword {
    get { return phonePassword_ != null; }
  }
  /// <summary>Clears the value of the "phonePassword" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPhonePassword() {
    phonePassword_ = null;
  }

  /// <summary>Field number for the "email" field.</summary>
  public const int EmailFieldNumber = 21;
  private readonly static string EmailDefaultValue = "";

  private string email_;
  /// <summary>
  /// Email of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Email {
    get { return email_ ?? EmailDefaultValue; }
    set {
      email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "email" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEmail {
    get { return email_ != null; }
  }
  /// <summary>Clears the value of the "email" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEmail() {
    email_ = null;
  }

  /// <summary>Field number for the "documentId" field.</summary>
  public const int DocumentIdFieldNumber = 22;
  private readonly static string DocumentIdDefaultValue = "";

  private string documentId_;
  /// <summary>
  /// Trader's document ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DocumentId {
    get { return documentId_ ?? DocumentIdDefaultValue; }
    set {
      documentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "documentId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDocumentId {
    get { return documentId_ != null; }
  }
  /// <summary>Clears the value of the "documentId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDocumentId() {
    documentId_ = null;
  }

  /// <summary>Field number for the "registrationTimestamp" field.</summary>
  public const int RegistrationTimestampFieldNumber = 25;
  private readonly static long RegistrationTimestampDefaultValue = 0L;

  private long registrationTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of Trader registration
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RegistrationTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return registrationTimestamp_; } else { return RegistrationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      registrationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "registrationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRegistrationTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "registrationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegistrationTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "lastConnectTimestamp" field.</summary>
  public const int LastConnectTimestampFieldNumber = 26;
  private readonly static long LastConnectTimestampDefaultValue = 0L;

  private long lastConnectTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Trader's last successful authorization
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastConnectTimestamp {
    get { if ((_hasBits0 & 128) != 0) { return lastConnectTimestamp_; } else { return LastConnectTimestampDefaultValue; } }
    set {
      _hasBits0 |= 128;
      lastConnectTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "lastConnectTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastConnectTimestamp {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "lastConnectTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastConnectTimestamp() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "online" field.</summary>
  public const int OnlineFieldNumber = 27;
  private readonly static bool OnlineDefaultValue = false;

  private bool online_;
  /// <summary>
  /// If TRUE then Trader is online
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Online {
    get { if ((_hasBits0 & 256) != 0) { return online_; } else { return OnlineDefaultValue; } }
    set {
      _hasBits0 |= 256;
      online_ = value;
    }
  }
  /// <summary>Gets whether the "online" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOnline {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "online" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOnline() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 28;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of last update of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 512) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 512;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "deleted" field.</summary>
  public const int DeletedFieldNumber = 29;
  private readonly static bool DeletedDefaultValue = false;

  private bool deleted_;
  /// <summary>
  /// If TRUE then Trader is deleted
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Deleted {
    get { if ((_hasBits0 & 1024) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      deleted_ = value;
    }
  }
  /// <summary>Gets whether the "deleted" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeleted {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "deleted" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeleted() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "balanceVersion" field.</summary>
  public const int BalanceVersionFieldNumber = 30;
  private readonly static long BalanceVersionDefaultValue = 0L;

  private long balanceVersion_;
  /// <summary>
  /// Balance version used to identify the final balance. Increments each time when Trader's balance is changed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceVersion {
    get { if ((_hasBits0 & 2048) != 0) { return balanceVersion_; } else { return BalanceVersionDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      balanceVersion_ = value;
    }
  }
  /// <summary>Gets whether the "balanceVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceVersion {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "balanceVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceVersion() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "introducingBroker" field.</summary>
  public const int IntroducingBrokerFieldNumber = 32;
  private readonly static bool IntroducingBrokerDefaultValue = false;

  private bool introducingBroker_;
  /// <summary>
  /// TRUE for Introducing Broker (IB)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IntroducingBroker {
    get { if ((_hasBits0 & 4096) != 0) { return introducingBroker_; } else { return IntroducingBrokerDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      introducingBroker_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBroker" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBroker {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "introducingBroker" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBroker() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "parentIntroducingBrokerIdIsNull" field.</summary>
  public const int ParentIntroducingBrokerIdIsNullFieldNumber = 55;
  private readonly static bool ParentIntroducingBrokerIdIsNullDefaultValue = false;

  private bool parentIntroducingBrokerIdIsNull_;
  /// <summary>
  /// TRUE sets parentIntroducingBrokerId = null
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ParentIntroducingBrokerIdIsNull {
    get { if ((_hasBits0 & 1073741824) != 0) { return parentIntroducingBrokerIdIsNull_; } else { return ParentIntroducingBrokerIdIsNullDefaultValue; } }
    set {
      _hasBits0 |= 1073741824;
      parentIntroducingBrokerIdIsNull_ = value;
    }
  }
  /// <summary>Gets whether the "parentIntroducingBrokerIdIsNull" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasParentIntroducingBrokerIdIsNull {
    get { return (_hasBits0 & 1073741824) != 0; }
  }
  /// <summary>Clears the value of the "parentIntroducingBrokerIdIsNull" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearParentIntroducingBrokerIdIsNull() {
    _hasBits0 &= ~1073741824;
  }

  /// <summary>Field number for the "parentIntroducingBrokerId" field.</summary>
  public const int ParentIntroducingBrokerIdFieldNumber = 33;
  private readonly static long ParentIntroducingBrokerIdDefaultValue = 0L;

  private long parentIntroducingBrokerId_;
  /// <summary>
  /// Specifies ID of the Trader which introduced current Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ParentIntroducingBrokerId {
    get { if ((_hasBits0 & 8192) != 0) { return parentIntroducingBrokerId_; } else { return ParentIntroducingBrokerIdDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      parentIntroducingBrokerId_ = value;
    }
  }
  /// <summary>Gets whether the "parentIntroducingBrokerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasParentIntroducingBrokerId {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "parentIntroducingBrokerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearParentIntroducingBrokerId() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "introducingBrokerCommissionRate" field.</summary>
  public const int IntroducingBrokerCommissionRateFieldNumber = 34;
  private readonly static int IntroducingBrokerCommissionRateDefaultValue = 0;

  private int introducingBrokerCommissionRate_;
  /// <summary>
  /// Commission rate of Introducing Broker. Additional Commission Paid by Client
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int IntroducingBrokerCommissionRate {
    get { if ((_hasBits0 & 16384) != 0) { return introducingBrokerCommissionRate_; } else { return IntroducingBrokerCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      introducingBrokerCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommissionRate {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommissionRate() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "pocketCommissionRate" field.</summary>
  public const int PocketCommissionRateFieldNumber = 35;
  private readonly static int PocketCommissionRateDefaultValue = 0;

  private int pocketCommissionRate_;
  /// <summary>
  /// Commission which Broker will pay to IB for the Deal of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PocketCommissionRate {
    get { if ((_hasBits0 & 32768) != 0) { return pocketCommissionRate_; } else { return PocketCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      pocketCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "pocketCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketCommissionRate {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "pocketCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketCommissionRate() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "pocketMarkupRate" field.</summary>
  public const int PocketMarkupRateFieldNumber = 36;
  private readonly static int PocketMarkupRateDefaultValue = 0;

  private int pocketMarkupRate_;
  /// <summary>
  /// Markup which Broker will pay to IB for the Deal of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PocketMarkupRate {
    get { if ((_hasBits0 & 65536) != 0) { return pocketMarkupRate_; } else { return PocketMarkupRateDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      pocketMarkupRate_ = value;
    }
  }
  /// <summary>Gets whether the "pocketMarkupRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketMarkupRate {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "pocketMarkupRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketMarkupRate() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "defaultIntroducingBrokerCommissionRate" field.</summary>
  public const int DefaultIntroducingBrokerCommissionRateFieldNumber = 37;
  private readonly static int DefaultIntroducingBrokerCommissionRateDefaultValue = 0;

  private int defaultIntroducingBrokerCommissionRate_;
  /// <summary>
  /// When Trader is assigned to IB introducingBrokerCommissionRate of Trader = defaultIntroducingBrokerCommissionRate of IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DefaultIntroducingBrokerCommissionRate {
    get { if ((_hasBits0 & 131072) != 0) { return defaultIntroducingBrokerCommissionRate_; } else { return DefaultIntroducingBrokerCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      defaultIntroducingBrokerCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "defaultIntroducingBrokerCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultIntroducingBrokerCommissionRate {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "defaultIntroducingBrokerCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultIntroducingBrokerCommissionRate() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "defaultPocketCommissionRate" field.</summary>
  public const int DefaultPocketCommissionRateFieldNumber = 38;
  private readonly static int DefaultPocketCommissionRateDefaultValue = 0;

  private int defaultPocketCommissionRate_;
  /// <summary>
  /// When Trader is assigned to IB pocketCommissionRate of Trader = defaultPocketCommissionRate of IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DefaultPocketCommissionRate {
    get { if ((_hasBits0 & 262144) != 0) { return defaultPocketCommissionRate_; } else { return DefaultPocketCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      defaultPocketCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "defaultPocketCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultPocketCommissionRate {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "defaultPocketCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultPocketCommissionRate() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "defaultPocketMarkupRate" field.</summary>
  public const int DefaultPocketMarkupRateFieldNumber = 39;
  private readonly static int DefaultPocketMarkupRateDefaultValue = 0;

  private int defaultPocketMarkupRate_;
  /// <summary>
  /// When Trader is assigned to IB pocketMarkupRate of Trader = defaultPocketMarkupRate of IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DefaultPocketMarkupRate {
    get { if ((_hasBits0 & 524288) != 0) { return defaultPocketMarkupRate_; } else { return DefaultPocketMarkupRateDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      defaultPocketMarkupRate_ = value;
    }
  }
  /// <summary>Gets whether the "defaultPocketMarkupRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultPocketMarkupRate {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "defaultPocketMarkupRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultPocketMarkupRate() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "defaultRebateRate" field.</summary>
  public const int DefaultRebateRateFieldNumber = 43;
  private readonly static int DefaultRebateRateDefaultValue = 0;

  private int defaultRebateRate_;
  /// <summary>
  /// When Trader is assigned to IB rebateRate of Trader = defaultRebateRate of IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DefaultRebateRate {
    get { if ((_hasBits0 & 1048576) != 0) { return defaultRebateRate_; } else { return DefaultRebateRateDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      defaultRebateRate_ = value;
    }
  }
  /// <summary>Gets whether the "defaultRebateRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultRebateRate {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "defaultRebateRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultRebateRate() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "defaultIbCommissionsType" field.</summary>
  public const int DefaultIbCommissionsTypeFieldNumber = 44;
  private readonly static global::ProtoCommissionType DefaultIbCommissionsTypeDefaultValue = global::ProtoCommissionType.UsdPerMillionUsd;

  private global::ProtoCommissionType defaultIbCommissionsType_;
  /// <summary>
  /// When Trader is assigned to IB ibCommissionsType of Trader = defaultIbCommissionsType of IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoCommissionType DefaultIbCommissionsType {
    get { if ((_hasBits0 & 2097152) != 0) { return defaultIbCommissionsType_; } else { return DefaultIbCommissionsTypeDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      defaultIbCommissionsType_ = value;
    }
  }
  /// <summary>Gets whether the "defaultIbCommissionsType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultIbCommissionsType {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "defaultIbCommissionsType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultIbCommissionsType() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "ibCommissionsType" field.</summary>
  public const int IbCommissionsTypeFieldNumber = 45;
  private readonly static global::ProtoCommissionType IbCommissionsTypeDefaultValue = global::ProtoCommissionType.UsdPerMillionUsd;

  private global::ProtoCommissionType ibCommissionsType_;
  /// <summary>
  /// Determines how ibCommissionRate and pocketCommissionRate will be treated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoCommissionType IbCommissionsType {
    get { if ((_hasBits0 & 4194304) != 0) { return ibCommissionsType_; } else { return IbCommissionsTypeDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      ibCommissionsType_ = value;
    }
  }
  /// <summary>Gets whether the "ibCommissionsType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbCommissionsType {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "ibCommissionsType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbCommissionsType() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "managerBonus" field.</summary>
  public const int ManagerBonusFieldNumber = 47;
  private readonly static long ManagerBonusDefaultValue = 0L;

  private long managerBonus_;
  /// <summary>
  /// Amount of Bonus, given by the Broker
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerBonus {
    get { if ((_hasBits0 & 8388608) != 0) { return managerBonus_; } else { return ManagerBonusDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      managerBonus_ = value;
    }
  }
  /// <summary>Gets whether the "managerBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerBonus {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "managerBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerBonus() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "ibBonus" field.</summary>
  public const int IbBonusFieldNumber = 48;
  private readonly static long IbBonusDefaultValue = 0L;

  private long ibBonus_;
  /// <summary>
  /// Amount of Bonus, given by the IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IbBonus {
    get { if ((_hasBits0 & 16777216) != 0) { return ibBonus_; } else { return IbBonusDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      ibBonus_ = value;
    }
  }
  /// <summary>Gets whether the "ibBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbBonus {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "ibBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbBonus() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "showPersonalData" field.</summary>
  public const int ShowPersonalDataFieldNumber = 49;
  private readonly static bool ShowPersonalDataDefaultValue = false;

  private bool showPersonalData_;
  /// <summary>
  /// If FALSE personal data (Name, Email, Phone) is not sent for this Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ShowPersonalData {
    get { if ((_hasBits0 & 33554432) != 0) { return showPersonalData_; } else { return ShowPersonalDataDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      showPersonalData_ = value;
    }
  }
  /// <summary>Gets whether the "showPersonalData" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasShowPersonalData {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "showPersonalData" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearShowPersonalData() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "splitRevenue" field.</summary>
  public const int SplitRevenueFieldNumber = 50;
  private readonly static bool SplitRevenueDefaultValue = false;

  private bool splitRevenue_;
  /// <summary>
  /// IF TRUE then Partner will get some part of Price Stream Markup and Commissions, paid by Client to Broker, depending on the Rank of the IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SplitRevenue {
    get { if ((_hasBits0 & 67108864) != 0) { return splitRevenue_; } else { return SplitRevenueDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      splitRevenue_ = value;
    }
  }
  /// <summary>Gets whether the "splitRevenue" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSplitRevenue {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "splitRevenue" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSplitRevenue() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "rankIdIsNull" field.</summary>
  public const int RankIdIsNullFieldNumber = 51;
  private readonly static bool RankIdIsNullDefaultValue = false;

  private bool rankIdIsNull_;
  /// <summary>
  /// TRUE sets rankId=null
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RankIdIsNull {
    get { if ((_hasBits0 & 134217728) != 0) { return rankIdIsNull_; } else { return RankIdIsNullDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      rankIdIsNull_ = value;
    }
  }
  /// <summary>Gets whether the "rankIdIsNull" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRankIdIsNull {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "rankIdIsNull" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRankIdIsNull() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "rankId" field.</summary>
  public const int RankIdFieldNumber = 52;
  private readonly static int RankIdDefaultValue = 0;

  private int rankId_;
  /// <summary>
  /// Refers to ID of rank entity. Rank - is some level of IB. Higher Rank gives more Bonuses to IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RankId {
    get { if ((_hasBits0 & 268435456) != 0) { return rankId_; } else { return RankIdDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      rankId_ = value;
    }
  }
  /// <summary>Gets whether the "rankId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRankId {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "rankId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRankId() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "hasRank" field.</summary>
  public const int HasRankFieldNumber = 53;
  private readonly static bool HasRankDefaultValue = false;

  private bool hasRank_;
  /// <summary>
  /// If True then Trader has IB rank
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRank {
    get { if ((_hasBits0 & 536870912) != 0) { return hasRank_; } else { return HasRankDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      hasRank_ = value;
    }
  }
  /// <summary>Gets whether the "hasRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHasRank {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "hasRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHasRank() {
    _hasBits0 &= ~536870912;
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 54;
  private static readonly pb::FieldCodec<global::ProtoTraderRank> _repeated_rank_codec
      = pb::FieldCodec.ForMessage(434, global::ProtoTraderRank.Parser);
  private readonly pbc::RepeatedField<global::ProtoTraderRank> rank_ = new pbc::RepeatedField<global::ProtoTraderRank>();
  /// <summary>
  /// Refers to IB rank of IB. Higher Rank gives more Bonuses to IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoTraderRank> Rank {
    get { return rank_; }
  }

  /// <summary>Field number for the "lastName" field.</summary>
  public const int LastNameFieldNumber = 56;
  private readonly static string LastNameDefaultValue = "";

  private string lastName_;
  /// <summary>
  /// Last name of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LastName {
    get { return lastName_ ?? LastNameDefaultValue; }
    set {
      lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "lastName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastName {
    get { return lastName_ != null; }
  }
  /// <summary>Clears the value of the "lastName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastName() {
    lastName_ = null;
  }

  /// <summary>Field number for the "defaultSplitRevenue" field.</summary>
  public const int DefaultSplitRevenueFieldNumber = 57;
  private readonly static bool DefaultSplitRevenueDefaultValue = false;

  private bool defaultSplitRevenue_;
  /// <summary>
  /// When Trader is assigned to IB splitRevenue of Trader = defaultSplitRevenue of IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DefaultSplitRevenue {
    get { if ((_hasBits0 & -2147483648) != 0) { return defaultSplitRevenue_; } else { return DefaultSplitRevenueDefaultValue; } }
    set {
      _hasBits0 |= -2147483648;
      defaultSplitRevenue_ = value;
    }
  }
  /// <summary>Gets whether the "defaultSplitRevenue" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultSplitRevenue {
    get { return (_hasBits0 & -2147483648) != 0; }
  }
  /// <summary>Clears the value of the "defaultSplitRevenue" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultSplitRevenue() {
    _hasBits0 &= ~-2147483648;
  }

  /// <summary>Field number for the "accessRights" field.</summary>
  public const int AccessRightsFieldNumber = 59;
  private readonly static global::ProtoAccessRights AccessRightsDefaultValue = global::ProtoAccessRights.FullAccess;

  private global::ProtoAccessRights accessRights_;
  /// <summary>
  /// Type of the access of the Account
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoAccessRights AccessRights {
    get { if ((_hasBits1 & 1) != 0) { return accessRights_; } else { return AccessRightsDefaultValue; } }
    set {
      _hasBits1 |= 1;
      accessRights_ = value;
    }
  }
  /// <summary>Gets whether the "accessRights" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAccessRights {
    get { return (_hasBits1 & 1) != 0; }
  }
  /// <summary>Clears the value of the "accessRights" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAccessRights() {
    _hasBits1 &= ~1;
  }

  /// <summary>Field number for the "sendOwnStatement" field.</summary>
  public const int SendOwnStatementFieldNumber = 60;
  private readonly static bool SendOwnStatementDefaultValue = false;

  private bool sendOwnStatement_;
  /// <summary>
  /// Specifies whether EOD statement should be send to the Trader or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SendOwnStatement {
    get { if ((_hasBits1 & 2) != 0) { return sendOwnStatement_; } else { return SendOwnStatementDefaultValue; } }
    set {
      _hasBits1 |= 2;
      sendOwnStatement_ = value;
    }
  }
  /// <summary>Gets whether the "sendOwnStatement" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSendOwnStatement {
    get { return (_hasBits1 & 2) != 0; }
  }
  /// <summary>Clears the value of the "sendOwnStatement" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSendOwnStatement() {
    _hasBits1 &= ~2;
  }

  /// <summary>Field number for the "depositAssetId" field.</summary>
  public const int DepositAssetIdFieldNumber = 61;
  private readonly static long DepositAssetIdDefaultValue = 0L;

  private long depositAssetId_;
  /// <summary>
  /// ID of the deposit Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DepositAssetId {
    get { if ((_hasBits1 & 4) != 0) { return depositAssetId_; } else { return DepositAssetIdDefaultValue; } }
    set {
      _hasBits1 |= 4;
      depositAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "depositAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositAssetId {
    get { return (_hasBits1 & 4) != 0; }
  }
  /// <summary>Clears the value of the "depositAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositAssetId() {
    _hasBits1 &= ~4;
  }

  /// <summary>Field number for the "swapFree" field.</summary>
  public const int SwapFreeFieldNumber = 64;
  private readonly static bool SwapFreeDefaultValue = false;

  private bool swapFree_;
  /// <summary>
  /// Specifies whether account is SWAP-free (Shariah compliant)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SwapFree {
    get { if ((_hasBits1 & 8) != 0) { return swapFree_; } else { return SwapFreeDefaultValue; } }
    set {
      _hasBits1 |= 8;
      swapFree_ = value;
    }
  }
  /// <summary>Gets whether the "swapFree" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapFree {
    get { return (_hasBits1 & 8) != 0; }
  }
  /// <summary>Clears the value of the "swapFree" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapFree() {
    _hasBits1 &= ~8;
  }

  /// <summary>Field number for the "nonWithdrawableBonus" field.</summary>
  public const int NonWithdrawableBonusFieldNumber = 65;
  private readonly static long NonWithdrawableBonusDefaultValue = 0L;

  private long nonWithdrawableBonus_;
  /// <summary>
  /// Amount of non-withdrawable Bonus, given by the Broker
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NonWithdrawableBonus {
    get { if ((_hasBits1 & 16) != 0) { return nonWithdrawableBonus_; } else { return NonWithdrawableBonusDefaultValue; } }
    set {
      _hasBits1 |= 16;
      nonWithdrawableBonus_ = value;
    }
  }
  /// <summary>Gets whether the "nonWithdrawableBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNonWithdrawableBonus {
    get { return (_hasBits1 & 16) != 0; }
  }
  /// <summary>Clears the value of the "nonWithdrawableBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNonWithdrawableBonus() {
    _hasBits1 &= ~16;
  }

  /// <summary>Field number for the "leverageInCents" field.</summary>
  public const int LeverageInCentsFieldNumber = 66;
  private readonly static uint LeverageInCentsDefaultValue = 0;

  private uint leverageInCents_;
  /// <summary>
  /// Trader's leverage in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LeverageInCents {
    get { if ((_hasBits1 & 32) != 0) { return leverageInCents_; } else { return LeverageInCentsDefaultValue; } }
    set {
      _hasBits1 |= 32;
      leverageInCents_ = value;
    }
  }
  /// <summary>Gets whether the "leverageInCents" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeverageInCents {
    get { return (_hasBits1 & 32) != 0; }
  }
  /// <summary>Clears the value of the "leverageInCents" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeverageInCents() {
    _hasBits1 &= ~32;
  }

  /// <summary>Field number for the "moveToIBGroup" field.</summary>
  public const int MoveToIBGroupFieldNumber = 67;
  private readonly static bool MoveToIBGroupDefaultValue = false;

  private bool moveToIBGroup_;
  /// <summary>
  /// If TRUE then Trader will be added into group where IB is at the moment of linking account to IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MoveToIBGroup {
    get { if ((_hasBits1 & 64) != 0) { return moveToIBGroup_; } else { return MoveToIBGroupDefaultValue; } }
    set {
      _hasBits1 |= 64;
      moveToIBGroup_ = value;
    }
  }
  /// <summary>Gets whether the "moveToIBGroup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoveToIBGroup {
    get { return (_hasBits1 & 64) != 0; }
  }
  /// <summary>Clears the value of the "moveToIBGroup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoveToIBGroup() {
    _hasBits1 &= ~64;
  }

  /// <summary>Field number for the "totalMarginCalculationType" field.</summary>
  public const int TotalMarginCalculationTypeFieldNumber = 68;
  private readonly static global::ProtoTotalMarginCalculationType TotalMarginCalculationTypeDefaultValue = global::ProtoTotalMarginCalculationType.Max;

  private global::ProtoTotalMarginCalculationType totalMarginCalculationType_;
  /// <summary>
  /// Total margin calculation type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTotalMarginCalculationType TotalMarginCalculationType {
    get { if ((_hasBits1 & 128) != 0) { return totalMarginCalculationType_; } else { return TotalMarginCalculationTypeDefaultValue; } }
    set {
      _hasBits1 |= 128;
      totalMarginCalculationType_ = value;
    }
  }
  /// <summary>Gets whether the "totalMarginCalculationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTotalMarginCalculationType {
    get { return (_hasBits1 & 128) != 0; }
  }
  /// <summary>Clears the value of the "totalMarginCalculationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTotalMarginCalculationType() {
    _hasBits1 &= ~128;
  }

  /// <summary>Field number for the "brokerName" field.</summary>
  public const int BrokerNameFieldNumber = 69;
  private readonly static string BrokerNameDefaultValue = "";

  private string brokerName_;
  /// <summary>
  /// Some whitelabel assigned to Trader by the Broker at the moment of Account creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BrokerName {
    get { return brokerName_ ?? BrokerNameDefaultValue; }
    set {
      brokerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "brokerName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBrokerName {
    get { return brokerName_ != null; }
  }
  /// <summary>Clears the value of the "brokerName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBrokerName() {
    brokerName_ = null;
  }

  /// <summary>Field number for the "maxLeverage" field.</summary>
  public const int MaxLeverageFieldNumber = 70;
  private readonly static uint MaxLeverageDefaultValue = 0;

  private uint maxLeverage_;
  /// <summary>
  /// Maximum allowed leverage for the Account. Used as validation when a Trader wants to change leverage value
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxLeverage {
    get { if ((_hasBits1 & 256) != 0) { return maxLeverage_; } else { return MaxLeverageDefaultValue; } }
    set {
      _hasBits1 |= 256;
      maxLeverage_ = value;
    }
  }
  /// <summary>Gets whether the "maxLeverage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxLeverage {
    get { return (_hasBits1 & 256) != 0; }
  }
  /// <summary>Clears the value of the "maxLeverage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxLeverage() {
    _hasBits1 &= ~256;
  }

  /// <summary>Field number for the "freeTrades" field.</summary>
  public const int FreeTradesFieldNumber = 71;
  private readonly static bool FreeTradesDefaultValue = false;

  private bool freeTrades_;
  /// <summary>
  /// IF TRUE then commission rate = 0 will be applied to all trades
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool FreeTrades {
    get { if ((_hasBits1 & 512) != 0) { return freeTrades_; } else { return FreeTradesDefaultValue; } }
    set {
      _hasBits1 |= 512;
      freeTrades_ = value;
    }
  }
  /// <summary>Gets whether the "freeTrades" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFreeTrades {
    get { return (_hasBits1 & 512) != 0; }
  }
  /// <summary>Clears the value of the "freeTrades" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFreeTrades() {
    _hasBits1 &= ~512;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 74;
  private readonly static long VersionDefaultValue = 0L;

  private long version_;
  /// <summary>
  /// When any parameter of ProtoTrader is changed (except balance, ibBonus, passwordHash, lastConnectTimestamp, online, balanceVersion, logoutTimestamp, equity) version is incremented
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Version {
    get { if ((_hasBits1 & 1024) != 0) { return version_; } else { return VersionDefaultValue; } }
    set {
      _hasBits1 |= 1024;
      version_ = value;
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVersion {
    get { return (_hasBits1 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVersion() {
    _hasBits1 &= ~1024;
  }

  /// <summary>Field number for the "subAccountOf" field.</summary>
  public const int SubAccountOfFieldNumber = 75;
  private readonly static long SubAccountOfDefaultValue = 0L;

  private long subAccountOf_;
  /// <summary>
  /// Determines parent account of account, if it is Subaccount. Used for Copy service
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SubAccountOf {
    get { if ((_hasBits1 & 2048) != 0) { return subAccountOf_; } else { return SubAccountOfDefaultValue; } }
    set {
      _hasBits1 |= 2048;
      subAccountOf_ = value;
    }
  }
  /// <summary>Gets whether the "subAccountOf" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSubAccountOf {
    get { return (_hasBits1 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "subAccountOf" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSubAccountOf() {
    _hasBits1 &= ~2048;
  }

  /// <summary>Field number for the "maxNOP" field.</summary>
  public const int MaxNOPFieldNumber = 76;
  private readonly static uint MaxNOPDefaultValue = 0;

  private uint maxNOP_;
  /// <summary>
  /// Maximum exposure per Account as % from total Trader's equity. Protocol value = 1 equals to 0.01% = 0.0001. Example: if MaxNOP = 8.0% for account with equity 100 000 USD maximum NOP will be 1 250 000 USD. An Order which breaches this limit will be rejected
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxNOP {
    get { if ((_hasBits1 & 4096) != 0) { return maxNOP_; } else { return MaxNOPDefaultValue; } }
    set {
      _hasBits1 |= 4096;
      maxNOP_ = value;
    }
  }
  /// <summary>Gets whether the "maxNOP" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxNOP {
    get { return (_hasBits1 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "maxNOP" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxNOP() {
    _hasBits1 &= ~4096;
  }

  /// <summary>Field number for the "disablePasswordLogin" field.</summary>
  public const int DisablePasswordLoginFieldNumber = 77;
  private readonly static bool DisablePasswordLoginDefaultValue = false;

  private bool disablePasswordLogin_;
  /// <summary>
  /// If TRUE then login by a password for Trader is disabled. This password is not used to sign in to the trading applications. cTrader ID is used for this purpose. Password is only used for authenticating FIX API sessions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisablePasswordLogin {
    get { if ((_hasBits1 & 8192) != 0) { return disablePasswordLogin_; } else { return DisablePasswordLoginDefaultValue; } }
    set {
      _hasBits1 |= 8192;
      disablePasswordLogin_ = value;
    }
  }
  /// <summary>Gets whether the "disablePasswordLogin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisablePasswordLogin {
    get { return (_hasBits1 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "disablePasswordLogin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisablePasswordLogin() {
    _hasBits1 &= ~8192;
  }

  /// <summary>Field number for the "isLimitedRisk" field.</summary>
  public const int IsLimitedRiskFieldNumber = 78;
  private readonly static bool IsLimitedRiskDefaultValue = false;

  private bool isLimitedRisk_;
  /// <summary>
  /// Specifies whether Trader is of Limited Risk type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsLimitedRisk {
    get { if ((_hasBits1 & 16384) != 0) { return isLimitedRisk_; } else { return IsLimitedRiskDefaultValue; } }
    set {
      _hasBits1 |= 16384;
      isLimitedRisk_ = value;
    }
  }
  /// <summary>Gets whether the "isLimitedRisk" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsLimitedRisk {
    get { return (_hasBits1 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "isLimitedRisk" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsLimitedRisk() {
    _hasBits1 &= ~16384;
  }

  /// <summary>Field number for the "limitedRiskMarginCalculationStrategy" field.</summary>
  public const int LimitedRiskMarginCalculationStrategyFieldNumber = 79;
  private readonly static global::ProtoLimitedRiskMarginCalculationStrategy LimitedRiskMarginCalculationStrategyDefaultValue = global::ProtoLimitedRiskMarginCalculationStrategy.AccordingToLeverage;

  private global::ProtoLimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy_;
  /// <summary>
  /// Limited Risk type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoLimitedRiskMarginCalculationStrategy LimitedRiskMarginCalculationStrategy {
    get { if ((_hasBits1 & 32768) != 0) { return limitedRiskMarginCalculationStrategy_; } else { return LimitedRiskMarginCalculationStrategyDefaultValue; } }
    set {
      _hasBits1 |= 32768;
      limitedRiskMarginCalculationStrategy_ = value;
    }
  }
  /// <summary>Gets whether the "limitedRiskMarginCalculationStrategy" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitedRiskMarginCalculationStrategy {
    get { return (_hasBits1 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "limitedRiskMarginCalculationStrategy" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitedRiskMarginCalculationStrategy() {
    _hasBits1 &= ~32768;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 80;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects balance, managerBonus, ibBonus, nonWithdrawableBonus
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits1 & 65536) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits1 |= 65536;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits1 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits1 &= ~65536;
  }

  /// <summary>Field number for the "managementFee" field.</summary>
  public const int ManagementFeeFieldNumber = 81;
  private readonly static long ManagementFeeDefaultValue = 0L;

  private long managementFee_;
  /// <summary>
  /// Management Fee used in Copy
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagementFee {
    get { if ((_hasBits1 & 131072) != 0) { return managementFee_; } else { return ManagementFeeDefaultValue; } }
    set {
      _hasBits1 |= 131072;
      managementFee_ = value;
    }
  }
  /// <summary>Gets whether the "managementFee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagementFee {
    get { return (_hasBits1 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "managementFee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagementFee() {
    _hasBits1 &= ~131072;
  }

  /// <summary>Field number for the "sendStatementToBroker" field.</summary>
  public const int SendStatementToBrokerFieldNumber = 82;
  private readonly static bool SendStatementToBrokerDefaultValue = false;

  private bool sendStatementToBroker_;
  /// <summary>
  /// If TRUE then statement (report) is sent to the Broker
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SendStatementToBroker {
    get { if ((_hasBits1 & 262144) != 0) { return sendStatementToBroker_; } else { return SendStatementToBrokerDefaultValue; } }
    set {
      _hasBits1 |= 262144;
      sendStatementToBroker_ = value;
    }
  }
  /// <summary>Gets whether the "sendStatementToBroker" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSendStatementToBroker {
    get { return (_hasBits1 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "sendStatementToBroker" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSendStatementToBroker() {
    _hasBits1 &= ~262144;
  }

  /// <summary>Field number for the "defaultIbCommissionSymbolCategory" field.</summary>
  public const int DefaultIbCommissionSymbolCategoryFieldNumber = 83;
  private static readonly pb::FieldCodec<global::ProtoIbCommissionSymbolCategory> _repeated_defaultIbCommissionSymbolCategory_codec
      = pb::FieldCodec.ForMessage(666, global::ProtoIbCommissionSymbolCategory.Parser);
  private readonly pbc::RepeatedField<global::ProtoIbCommissionSymbolCategory> defaultIbCommissionSymbolCategory_ = new pbc::RepeatedField<global::ProtoIbCommissionSymbolCategory>();
  /// <summary>
  /// ID of default applicable ProtoIbCommissionSymbolCategory which allows IB to have a different commission per Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoIbCommissionSymbolCategory> DefaultIbCommissionSymbolCategory {
    get { return defaultIbCommissionSymbolCategory_; }
  }

  /// <summary>Field number for the "ibCommissionSymbolCategory" field.</summary>
  public const int IbCommissionSymbolCategoryFieldNumber = 84;
  private static readonly pb::FieldCodec<global::ProtoIbCommissionSymbolCategory> _repeated_ibCommissionSymbolCategory_codec
      = pb::FieldCodec.ForMessage(674, global::ProtoIbCommissionSymbolCategory.Parser);
  private readonly pbc::RepeatedField<global::ProtoIbCommissionSymbolCategory> ibCommissionSymbolCategory_ = new pbc::RepeatedField<global::ProtoIbCommissionSymbolCategory>();
  /// <summary>
  /// ID of applicable ProtoIbCommissionSymbolCategory which allows IB to have a different commission per Symbol Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoIbCommissionSymbolCategory> IbCommissionSymbolCategory {
    get { return ibCommissionSymbolCategory_; }
  }

  /// <summary>Field number for the "fairStopOut" field.</summary>
  public const int FairStopOutFieldNumber = 85;
  private readonly static bool FairStopOutDefaultValue = false;

  private bool fairStopOut_;
  /// <summary>
  /// If TRUE Position is fully closed on Stop Out regardless of ProtoGroup.fairStopOut, if FALSE- smart (partial closing) Stop Out is applied, if unspecified  - Stop Out format is determined by ProtoGroup.fairStopOut.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool FairStopOut {
    get { if ((_hasBits1 & 524288) != 0) { return fairStopOut_; } else { return FairStopOutDefaultValue; } }
    set {
      _hasBits1 |= 524288;
      fairStopOut_ = value;
    }
  }
  /// <summary>Gets whether the "fairStopOut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFairStopOut {
    get { return (_hasBits1 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "fairStopOut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFairStopOut() {
    _hasBits1 &= ~524288;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoTrader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoTrader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TraderId != other.TraderId) return false;
    if (Login != other.Login) return false;
    if (GroupId != other.GroupId) return false;
    if (Balance != other.Balance) return false;
    if (AccountType != other.AccountType) return false;
    if (Name != other.Name) return false;
    if (PasswordHash != other.PasswordHash) return false;
    if (Description != other.Description) return false;
    if (Status != other.Status) return false;
    if (CountryId != other.CountryId) return false;
    if (State != other.State) return false;
    if (City != other.City) return false;
    if (Address != other.Address) return false;
    if (ZipCode != other.ZipCode) return false;
    if (Phone != other.Phone) return false;
    if (PhonePassword != other.PhonePassword) return false;
    if (Email != other.Email) return false;
    if (DocumentId != other.DocumentId) return false;
    if (RegistrationTimestamp != other.RegistrationTimestamp) return false;
    if (LastConnectTimestamp != other.LastConnectTimestamp) return false;
    if (Online != other.Online) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (Deleted != other.Deleted) return false;
    if (BalanceVersion != other.BalanceVersion) return false;
    if (IntroducingBroker != other.IntroducingBroker) return false;
    if (ParentIntroducingBrokerIdIsNull != other.ParentIntroducingBrokerIdIsNull) return false;
    if (ParentIntroducingBrokerId != other.ParentIntroducingBrokerId) return false;
    if (IntroducingBrokerCommissionRate != other.IntroducingBrokerCommissionRate) return false;
    if (PocketCommissionRate != other.PocketCommissionRate) return false;
    if (PocketMarkupRate != other.PocketMarkupRate) return false;
    if (DefaultIntroducingBrokerCommissionRate != other.DefaultIntroducingBrokerCommissionRate) return false;
    if (DefaultPocketCommissionRate != other.DefaultPocketCommissionRate) return false;
    if (DefaultPocketMarkupRate != other.DefaultPocketMarkupRate) return false;
    if (DefaultRebateRate != other.DefaultRebateRate) return false;
    if (DefaultIbCommissionsType != other.DefaultIbCommissionsType) return false;
    if (IbCommissionsType != other.IbCommissionsType) return false;
    if (ManagerBonus != other.ManagerBonus) return false;
    if (IbBonus != other.IbBonus) return false;
    if (ShowPersonalData != other.ShowPersonalData) return false;
    if (SplitRevenue != other.SplitRevenue) return false;
    if (RankIdIsNull != other.RankIdIsNull) return false;
    if (RankId != other.RankId) return false;
    if (HasRank != other.HasRank) return false;
    if(!rank_.Equals(other.rank_)) return false;
    if (LastName != other.LastName) return false;
    if (DefaultSplitRevenue != other.DefaultSplitRevenue) return false;
    if (AccessRights != other.AccessRights) return false;
    if (SendOwnStatement != other.SendOwnStatement) return false;
    if (DepositAssetId != other.DepositAssetId) return false;
    if (SwapFree != other.SwapFree) return false;
    if (NonWithdrawableBonus != other.NonWithdrawableBonus) return false;
    if (LeverageInCents != other.LeverageInCents) return false;
    if (MoveToIBGroup != other.MoveToIBGroup) return false;
    if (TotalMarginCalculationType != other.TotalMarginCalculationType) return false;
    if (BrokerName != other.BrokerName) return false;
    if (MaxLeverage != other.MaxLeverage) return false;
    if (FreeTrades != other.FreeTrades) return false;
    if (Version != other.Version) return false;
    if (SubAccountOf != other.SubAccountOf) return false;
    if (MaxNOP != other.MaxNOP) return false;
    if (DisablePasswordLogin != other.DisablePasswordLogin) return false;
    if (IsLimitedRisk != other.IsLimitedRisk) return false;
    if (LimitedRiskMarginCalculationStrategy != other.LimitedRiskMarginCalculationStrategy) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    if (ManagementFee != other.ManagementFee) return false;
    if (SendStatementToBroker != other.SendStatementToBroker) return false;
    if(!defaultIbCommissionSymbolCategory_.Equals(other.defaultIbCommissionSymbolCategory_)) return false;
    if(!ibCommissionSymbolCategory_.Equals(other.ibCommissionSymbolCategory_)) return false;
    if (FairStopOut != other.FairStopOut) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasLogin) hash ^= Login.GetHashCode();
    if (HasGroupId) hash ^= GroupId.GetHashCode();
    if (HasBalance) hash ^= Balance.GetHashCode();
    if (HasAccountType) hash ^= AccountType.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasPasswordHash) hash ^= PasswordHash.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasStatus) hash ^= Status.GetHashCode();
    if (HasCountryId) hash ^= CountryId.GetHashCode();
    if (HasState) hash ^= State.GetHashCode();
    if (HasCity) hash ^= City.GetHashCode();
    if (HasAddress) hash ^= Address.GetHashCode();
    if (HasZipCode) hash ^= ZipCode.GetHashCode();
    if (HasPhone) hash ^= Phone.GetHashCode();
    if (HasPhonePassword) hash ^= PhonePassword.GetHashCode();
    if (HasEmail) hash ^= Email.GetHashCode();
    if (HasDocumentId) hash ^= DocumentId.GetHashCode();
    if (HasRegistrationTimestamp) hash ^= RegistrationTimestamp.GetHashCode();
    if (HasLastConnectTimestamp) hash ^= LastConnectTimestamp.GetHashCode();
    if (HasOnline) hash ^= Online.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasDeleted) hash ^= Deleted.GetHashCode();
    if (HasBalanceVersion) hash ^= BalanceVersion.GetHashCode();
    if (HasIntroducingBroker) hash ^= IntroducingBroker.GetHashCode();
    if (HasParentIntroducingBrokerIdIsNull) hash ^= ParentIntroducingBrokerIdIsNull.GetHashCode();
    if (HasParentIntroducingBrokerId) hash ^= ParentIntroducingBrokerId.GetHashCode();
    if (HasIntroducingBrokerCommissionRate) hash ^= IntroducingBrokerCommissionRate.GetHashCode();
    if (HasPocketCommissionRate) hash ^= PocketCommissionRate.GetHashCode();
    if (HasPocketMarkupRate) hash ^= PocketMarkupRate.GetHashCode();
    if (HasDefaultIntroducingBrokerCommissionRate) hash ^= DefaultIntroducingBrokerCommissionRate.GetHashCode();
    if (HasDefaultPocketCommissionRate) hash ^= DefaultPocketCommissionRate.GetHashCode();
    if (HasDefaultPocketMarkupRate) hash ^= DefaultPocketMarkupRate.GetHashCode();
    if (HasDefaultRebateRate) hash ^= DefaultRebateRate.GetHashCode();
    if (HasDefaultIbCommissionsType) hash ^= DefaultIbCommissionsType.GetHashCode();
    if (HasIbCommissionsType) hash ^= IbCommissionsType.GetHashCode();
    if (HasManagerBonus) hash ^= ManagerBonus.GetHashCode();
    if (HasIbBonus) hash ^= IbBonus.GetHashCode();
    if (HasShowPersonalData) hash ^= ShowPersonalData.GetHashCode();
    if (HasSplitRevenue) hash ^= SplitRevenue.GetHashCode();
    if (HasRankIdIsNull) hash ^= RankIdIsNull.GetHashCode();
    if (HasRankId) hash ^= RankId.GetHashCode();
    if (HasHasRank) hash ^= HasRank.GetHashCode();
    hash ^= rank_.GetHashCode();
    if (HasLastName) hash ^= LastName.GetHashCode();
    if (HasDefaultSplitRevenue) hash ^= DefaultSplitRevenue.GetHashCode();
    if (HasAccessRights) hash ^= AccessRights.GetHashCode();
    if (HasSendOwnStatement) hash ^= SendOwnStatement.GetHashCode();
    if (HasDepositAssetId) hash ^= DepositAssetId.GetHashCode();
    if (HasSwapFree) hash ^= SwapFree.GetHashCode();
    if (HasNonWithdrawableBonus) hash ^= NonWithdrawableBonus.GetHashCode();
    if (HasLeverageInCents) hash ^= LeverageInCents.GetHashCode();
    if (HasMoveToIBGroup) hash ^= MoveToIBGroup.GetHashCode();
    if (HasTotalMarginCalculationType) hash ^= TotalMarginCalculationType.GetHashCode();
    if (HasBrokerName) hash ^= BrokerName.GetHashCode();
    if (HasMaxLeverage) hash ^= MaxLeverage.GetHashCode();
    if (HasFreeTrades) hash ^= FreeTrades.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (HasSubAccountOf) hash ^= SubAccountOf.GetHashCode();
    if (HasMaxNOP) hash ^= MaxNOP.GetHashCode();
    if (HasDisablePasswordLogin) hash ^= DisablePasswordLogin.GetHashCode();
    if (HasIsLimitedRisk) hash ^= IsLimitedRisk.GetHashCode();
    if (HasLimitedRiskMarginCalculationStrategy) hash ^= LimitedRiskMarginCalculationStrategy.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (HasManagementFee) hash ^= ManagementFee.GetHashCode();
    if (HasSendStatementToBroker) hash ^= SendStatementToBroker.GetHashCode();
    hash ^= defaultIbCommissionSymbolCategory_.GetHashCode();
    hash ^= ibCommissionSymbolCategory_.GetHashCode();
    if (HasFairStopOut) hash ^= FairStopOut.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTraderId) {
      output.WriteRawTag(8);
      output.WriteInt64(TraderId);
    }
    if (HasLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(Login);
    }
    if (HasGroupId) {
      output.WriteRawTag(24);
      output.WriteInt64(GroupId);
    }
    if (HasBalance) {
      output.WriteRawTag(64);
      output.WriteInt64(Balance);
    }
    if (HasAccountType) {
      output.WriteRawTag(72);
      output.WriteEnum((int) AccountType);
    }
    if (HasName) {
      output.WriteRawTag(82);
      output.WriteString(Name);
    }
    if (HasPasswordHash) {
      output.WriteRawTag(90);
      output.WriteString(PasswordHash);
    }
    if (HasDescription) {
      output.WriteRawTag(98);
      output.WriteString(Description);
    }
    if (HasStatus) {
      output.WriteRawTag(106);
      output.WriteString(Status);
    }
    if (HasCountryId) {
      output.WriteRawTag(112);
      output.WriteInt64(CountryId);
    }
    if (HasState) {
      output.WriteRawTag(122);
      output.WriteString(State);
    }
    if (HasCity) {
      output.WriteRawTag(130, 1);
      output.WriteString(City);
    }
    if (HasAddress) {
      output.WriteRawTag(138, 1);
      output.WriteString(Address);
    }
    if (HasZipCode) {
      output.WriteRawTag(146, 1);
      output.WriteString(ZipCode);
    }
    if (HasPhone) {
      output.WriteRawTag(154, 1);
      output.WriteString(Phone);
    }
    if (HasPhonePassword) {
      output.WriteRawTag(162, 1);
      output.WriteString(PhonePassword);
    }
    if (HasEmail) {
      output.WriteRawTag(170, 1);
      output.WriteString(Email);
    }
    if (HasDocumentId) {
      output.WriteRawTag(178, 1);
      output.WriteString(DocumentId);
    }
    if (HasRegistrationTimestamp) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(RegistrationTimestamp);
    }
    if (HasLastConnectTimestamp) {
      output.WriteRawTag(208, 1);
      output.WriteInt64(LastConnectTimestamp);
    }
    if (HasOnline) {
      output.WriteRawTag(216, 1);
      output.WriteBool(Online);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(224, 1);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasDeleted) {
      output.WriteRawTag(232, 1);
      output.WriteBool(Deleted);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(BalanceVersion);
    }
    if (HasIntroducingBroker) {
      output.WriteRawTag(128, 2);
      output.WriteBool(IntroducingBroker);
    }
    if (HasParentIntroducingBrokerId) {
      output.WriteRawTag(136, 2);
      output.WriteInt64(ParentIntroducingBrokerId);
    }
    if (HasIntroducingBrokerCommissionRate) {
      output.WriteRawTag(144, 2);
      output.WriteInt32(IntroducingBrokerCommissionRate);
    }
    if (HasPocketCommissionRate) {
      output.WriteRawTag(152, 2);
      output.WriteInt32(PocketCommissionRate);
    }
    if (HasPocketMarkupRate) {
      output.WriteRawTag(160, 2);
      output.WriteInt32(PocketMarkupRate);
    }
    if (HasDefaultIntroducingBrokerCommissionRate) {
      output.WriteRawTag(168, 2);
      output.WriteInt32(DefaultIntroducingBrokerCommissionRate);
    }
    if (HasDefaultPocketCommissionRate) {
      output.WriteRawTag(176, 2);
      output.WriteInt32(DefaultPocketCommissionRate);
    }
    if (HasDefaultPocketMarkupRate) {
      output.WriteRawTag(184, 2);
      output.WriteInt32(DefaultPocketMarkupRate);
    }
    if (HasDefaultRebateRate) {
      output.WriteRawTag(216, 2);
      output.WriteInt32(DefaultRebateRate);
    }
    if (HasDefaultIbCommissionsType) {
      output.WriteRawTag(224, 2);
      output.WriteEnum((int) DefaultIbCommissionsType);
    }
    if (HasIbCommissionsType) {
      output.WriteRawTag(232, 2);
      output.WriteEnum((int) IbCommissionsType);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(ManagerBonus);
    }
    if (HasIbBonus) {
      output.WriteRawTag(128, 3);
      output.WriteInt64(IbBonus);
    }
    if (HasShowPersonalData) {
      output.WriteRawTag(136, 3);
      output.WriteBool(ShowPersonalData);
    }
    if (HasSplitRevenue) {
      output.WriteRawTag(144, 3);
      output.WriteBool(SplitRevenue);
    }
    if (HasRankIdIsNull) {
      output.WriteRawTag(152, 3);
      output.WriteBool(RankIdIsNull);
    }
    if (HasRankId) {
      output.WriteRawTag(160, 3);
      output.WriteInt32(RankId);
    }
    if (HasHasRank) {
      output.WriteRawTag(168, 3);
      output.WriteBool(HasRank);
    }
    rank_.WriteTo(output, _repeated_rank_codec);
    if (HasParentIntroducingBrokerIdIsNull) {
      output.WriteRawTag(184, 3);
      output.WriteBool(ParentIntroducingBrokerIdIsNull);
    }
    if (HasLastName) {
      output.WriteRawTag(194, 3);
      output.WriteString(LastName);
    }
    if (HasDefaultSplitRevenue) {
      output.WriteRawTag(200, 3);
      output.WriteBool(DefaultSplitRevenue);
    }
    if (HasAccessRights) {
      output.WriteRawTag(216, 3);
      output.WriteEnum((int) AccessRights);
    }
    if (HasSendOwnStatement) {
      output.WriteRawTag(224, 3);
      output.WriteBool(SendOwnStatement);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(232, 3);
      output.WriteInt64(DepositAssetId);
    }
    if (HasSwapFree) {
      output.WriteRawTag(128, 4);
      output.WriteBool(SwapFree);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(136, 4);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasLeverageInCents) {
      output.WriteRawTag(144, 4);
      output.WriteUInt32(LeverageInCents);
    }
    if (HasMoveToIBGroup) {
      output.WriteRawTag(152, 4);
      output.WriteBool(MoveToIBGroup);
    }
    if (HasTotalMarginCalculationType) {
      output.WriteRawTag(160, 4);
      output.WriteEnum((int) TotalMarginCalculationType);
    }
    if (HasBrokerName) {
      output.WriteRawTag(170, 4);
      output.WriteString(BrokerName);
    }
    if (HasMaxLeverage) {
      output.WriteRawTag(176, 4);
      output.WriteUInt32(MaxLeverage);
    }
    if (HasFreeTrades) {
      output.WriteRawTag(184, 4);
      output.WriteBool(FreeTrades);
    }
    if (HasVersion) {
      output.WriteRawTag(208, 4);
      output.WriteInt64(Version);
    }
    if (HasSubAccountOf) {
      output.WriteRawTag(216, 4);
      output.WriteInt64(SubAccountOf);
    }
    if (HasMaxNOP) {
      output.WriteRawTag(224, 4);
      output.WriteUInt32(MaxNOP);
    }
    if (HasDisablePasswordLogin) {
      output.WriteRawTag(232, 4);
      output.WriteBool(DisablePasswordLogin);
    }
    if (HasIsLimitedRisk) {
      output.WriteRawTag(240, 4);
      output.WriteBool(IsLimitedRisk);
    }
    if (HasLimitedRiskMarginCalculationStrategy) {
      output.WriteRawTag(248, 4);
      output.WriteEnum((int) LimitedRiskMarginCalculationStrategy);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(128, 5);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasManagementFee) {
      output.WriteRawTag(136, 5);
      output.WriteInt64(ManagementFee);
    }
    if (HasSendStatementToBroker) {
      output.WriteRawTag(144, 5);
      output.WriteBool(SendStatementToBroker);
    }
    defaultIbCommissionSymbolCategory_.WriteTo(output, _repeated_defaultIbCommissionSymbolCategory_codec);
    ibCommissionSymbolCategory_.WriteTo(output, _repeated_ibCommissionSymbolCategory_codec);
    if (HasFairStopOut) {
      output.WriteRawTag(168, 5);
      output.WriteBool(FairStopOut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTraderId) {
      output.WriteRawTag(8);
      output.WriteInt64(TraderId);
    }
    if (HasLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(Login);
    }
    if (HasGroupId) {
      output.WriteRawTag(24);
      output.WriteInt64(GroupId);
    }
    if (HasBalance) {
      output.WriteRawTag(64);
      output.WriteInt64(Balance);
    }
    if (HasAccountType) {
      output.WriteRawTag(72);
      output.WriteEnum((int) AccountType);
    }
    if (HasName) {
      output.WriteRawTag(82);
      output.WriteString(Name);
    }
    if (HasPasswordHash) {
      output.WriteRawTag(90);
      output.WriteString(PasswordHash);
    }
    if (HasDescription) {
      output.WriteRawTag(98);
      output.WriteString(Description);
    }
    if (HasStatus) {
      output.WriteRawTag(106);
      output.WriteString(Status);
    }
    if (HasCountryId) {
      output.WriteRawTag(112);
      output.WriteInt64(CountryId);
    }
    if (HasState) {
      output.WriteRawTag(122);
      output.WriteString(State);
    }
    if (HasCity) {
      output.WriteRawTag(130, 1);
      output.WriteString(City);
    }
    if (HasAddress) {
      output.WriteRawTag(138, 1);
      output.WriteString(Address);
    }
    if (HasZipCode) {
      output.WriteRawTag(146, 1);
      output.WriteString(ZipCode);
    }
    if (HasPhone) {
      output.WriteRawTag(154, 1);
      output.WriteString(Phone);
    }
    if (HasPhonePassword) {
      output.WriteRawTag(162, 1);
      output.WriteString(PhonePassword);
    }
    if (HasEmail) {
      output.WriteRawTag(170, 1);
      output.WriteString(Email);
    }
    if (HasDocumentId) {
      output.WriteRawTag(178, 1);
      output.WriteString(DocumentId);
    }
    if (HasRegistrationTimestamp) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(RegistrationTimestamp);
    }
    if (HasLastConnectTimestamp) {
      output.WriteRawTag(208, 1);
      output.WriteInt64(LastConnectTimestamp);
    }
    if (HasOnline) {
      output.WriteRawTag(216, 1);
      output.WriteBool(Online);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(224, 1);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasDeleted) {
      output.WriteRawTag(232, 1);
      output.WriteBool(Deleted);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(BalanceVersion);
    }
    if (HasIntroducingBroker) {
      output.WriteRawTag(128, 2);
      output.WriteBool(IntroducingBroker);
    }
    if (HasParentIntroducingBrokerId) {
      output.WriteRawTag(136, 2);
      output.WriteInt64(ParentIntroducingBrokerId);
    }
    if (HasIntroducingBrokerCommissionRate) {
      output.WriteRawTag(144, 2);
      output.WriteInt32(IntroducingBrokerCommissionRate);
    }
    if (HasPocketCommissionRate) {
      output.WriteRawTag(152, 2);
      output.WriteInt32(PocketCommissionRate);
    }
    if (HasPocketMarkupRate) {
      output.WriteRawTag(160, 2);
      output.WriteInt32(PocketMarkupRate);
    }
    if (HasDefaultIntroducingBrokerCommissionRate) {
      output.WriteRawTag(168, 2);
      output.WriteInt32(DefaultIntroducingBrokerCommissionRate);
    }
    if (HasDefaultPocketCommissionRate) {
      output.WriteRawTag(176, 2);
      output.WriteInt32(DefaultPocketCommissionRate);
    }
    if (HasDefaultPocketMarkupRate) {
      output.WriteRawTag(184, 2);
      output.WriteInt32(DefaultPocketMarkupRate);
    }
    if (HasDefaultRebateRate) {
      output.WriteRawTag(216, 2);
      output.WriteInt32(DefaultRebateRate);
    }
    if (HasDefaultIbCommissionsType) {
      output.WriteRawTag(224, 2);
      output.WriteEnum((int) DefaultIbCommissionsType);
    }
    if (HasIbCommissionsType) {
      output.WriteRawTag(232, 2);
      output.WriteEnum((int) IbCommissionsType);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(ManagerBonus);
    }
    if (HasIbBonus) {
      output.WriteRawTag(128, 3);
      output.WriteInt64(IbBonus);
    }
    if (HasShowPersonalData) {
      output.WriteRawTag(136, 3);
      output.WriteBool(ShowPersonalData);
    }
    if (HasSplitRevenue) {
      output.WriteRawTag(144, 3);
      output.WriteBool(SplitRevenue);
    }
    if (HasRankIdIsNull) {
      output.WriteRawTag(152, 3);
      output.WriteBool(RankIdIsNull);
    }
    if (HasRankId) {
      output.WriteRawTag(160, 3);
      output.WriteInt32(RankId);
    }
    if (HasHasRank) {
      output.WriteRawTag(168, 3);
      output.WriteBool(HasRank);
    }
    rank_.WriteTo(ref output, _repeated_rank_codec);
    if (HasParentIntroducingBrokerIdIsNull) {
      output.WriteRawTag(184, 3);
      output.WriteBool(ParentIntroducingBrokerIdIsNull);
    }
    if (HasLastName) {
      output.WriteRawTag(194, 3);
      output.WriteString(LastName);
    }
    if (HasDefaultSplitRevenue) {
      output.WriteRawTag(200, 3);
      output.WriteBool(DefaultSplitRevenue);
    }
    if (HasAccessRights) {
      output.WriteRawTag(216, 3);
      output.WriteEnum((int) AccessRights);
    }
    if (HasSendOwnStatement) {
      output.WriteRawTag(224, 3);
      output.WriteBool(SendOwnStatement);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(232, 3);
      output.WriteInt64(DepositAssetId);
    }
    if (HasSwapFree) {
      output.WriteRawTag(128, 4);
      output.WriteBool(SwapFree);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(136, 4);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasLeverageInCents) {
      output.WriteRawTag(144, 4);
      output.WriteUInt32(LeverageInCents);
    }
    if (HasMoveToIBGroup) {
      output.WriteRawTag(152, 4);
      output.WriteBool(MoveToIBGroup);
    }
    if (HasTotalMarginCalculationType) {
      output.WriteRawTag(160, 4);
      output.WriteEnum((int) TotalMarginCalculationType);
    }
    if (HasBrokerName) {
      output.WriteRawTag(170, 4);
      output.WriteString(BrokerName);
    }
    if (HasMaxLeverage) {
      output.WriteRawTag(176, 4);
      output.WriteUInt32(MaxLeverage);
    }
    if (HasFreeTrades) {
      output.WriteRawTag(184, 4);
      output.WriteBool(FreeTrades);
    }
    if (HasVersion) {
      output.WriteRawTag(208, 4);
      output.WriteInt64(Version);
    }
    if (HasSubAccountOf) {
      output.WriteRawTag(216, 4);
      output.WriteInt64(SubAccountOf);
    }
    if (HasMaxNOP) {
      output.WriteRawTag(224, 4);
      output.WriteUInt32(MaxNOP);
    }
    if (HasDisablePasswordLogin) {
      output.WriteRawTag(232, 4);
      output.WriteBool(DisablePasswordLogin);
    }
    if (HasIsLimitedRisk) {
      output.WriteRawTag(240, 4);
      output.WriteBool(IsLimitedRisk);
    }
    if (HasLimitedRiskMarginCalculationStrategy) {
      output.WriteRawTag(248, 4);
      output.WriteEnum((int) LimitedRiskMarginCalculationStrategy);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(128, 5);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasManagementFee) {
      output.WriteRawTag(136, 5);
      output.WriteInt64(ManagementFee);
    }
    if (HasSendStatementToBroker) {
      output.WriteRawTag(144, 5);
      output.WriteBool(SendStatementToBroker);
    }
    defaultIbCommissionSymbolCategory_.WriteTo(ref output, _repeated_defaultIbCommissionSymbolCategory_codec);
    ibCommissionSymbolCategory_.WriteTo(ref output, _repeated_ibCommissionSymbolCategory_codec);
    if (HasFairStopOut) {
      output.WriteRawTag(168, 5);
      output.WriteBool(FairStopOut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderId);
    }
    if (HasLogin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Login);
    }
    if (HasGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
    }
    if (HasBalance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
    }
    if (HasAccountType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasPasswordHash) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PasswordHash);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasStatus) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
    }
    if (HasCountryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountryId);
    }
    if (HasState) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
    }
    if (HasCity) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(City);
    }
    if (HasAddress) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Address);
    }
    if (HasZipCode) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ZipCode);
    }
    if (HasPhone) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Phone);
    }
    if (HasPhonePassword) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PhonePassword);
    }
    if (HasEmail) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Email);
    }
    if (HasDocumentId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DocumentId);
    }
    if (HasRegistrationTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegistrationTimestamp);
    }
    if (HasLastConnectTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastConnectTimestamp);
    }
    if (HasOnline) {
      size += 2 + 1;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasDeleted) {
      size += 2 + 1;
    }
    if (HasBalanceVersion) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(BalanceVersion);
    }
    if (HasIntroducingBroker) {
      size += 2 + 1;
    }
    if (HasParentIntroducingBrokerIdIsNull) {
      size += 2 + 1;
    }
    if (HasParentIntroducingBrokerId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentIntroducingBrokerId);
    }
    if (HasIntroducingBrokerCommissionRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IntroducingBrokerCommissionRate);
    }
    if (HasPocketCommissionRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PocketCommissionRate);
    }
    if (HasPocketMarkupRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PocketMarkupRate);
    }
    if (HasDefaultIntroducingBrokerCommissionRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultIntroducingBrokerCommissionRate);
    }
    if (HasDefaultPocketCommissionRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPocketCommissionRate);
    }
    if (HasDefaultPocketMarkupRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultPocketMarkupRate);
    }
    if (HasDefaultRebateRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultRebateRate);
    }
    if (HasDefaultIbCommissionsType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultIbCommissionsType);
    }
    if (HasIbCommissionsType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IbCommissionsType);
    }
    if (HasManagerBonus) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ManagerBonus);
    }
    if (HasIbBonus) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(IbBonus);
    }
    if (HasShowPersonalData) {
      size += 2 + 1;
    }
    if (HasSplitRevenue) {
      size += 2 + 1;
    }
    if (HasRankIdIsNull) {
      size += 2 + 1;
    }
    if (HasRankId) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(RankId);
    }
    if (HasHasRank) {
      size += 2 + 1;
    }
    size += rank_.CalculateSize(_repeated_rank_codec);
    if (HasLastName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(LastName);
    }
    if (HasDefaultSplitRevenue) {
      size += 2 + 1;
    }
    if (HasAccessRights) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AccessRights);
    }
    if (HasSendOwnStatement) {
      size += 2 + 1;
    }
    if (HasDepositAssetId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DepositAssetId);
    }
    if (HasSwapFree) {
      size += 2 + 1;
    }
    if (HasNonWithdrawableBonus) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(NonWithdrawableBonus);
    }
    if (HasLeverageInCents) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeverageInCents);
    }
    if (HasMoveToIBGroup) {
      size += 2 + 1;
    }
    if (HasTotalMarginCalculationType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TotalMarginCalculationType);
    }
    if (HasBrokerName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BrokerName);
    }
    if (HasMaxLeverage) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxLeverage);
    }
    if (HasFreeTrades) {
      size += 2 + 1;
    }
    if (HasVersion) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Version);
    }
    if (HasSubAccountOf) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(SubAccountOf);
    }
    if (HasMaxNOP) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxNOP);
    }
    if (HasDisablePasswordLogin) {
      size += 2 + 1;
    }
    if (HasIsLimitedRisk) {
      size += 2 + 1;
    }
    if (HasLimitedRiskMarginCalculationStrategy) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LimitedRiskMarginCalculationStrategy);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (HasManagementFee) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ManagementFee);
    }
    if (HasSendStatementToBroker) {
      size += 2 + 1;
    }
    size += defaultIbCommissionSymbolCategory_.CalculateSize(_repeated_defaultIbCommissionSymbolCategory_codec);
    size += ibCommissionSymbolCategory_.CalculateSize(_repeated_ibCommissionSymbolCategory_codec);
    if (HasFairStopOut) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoTrader other) {
    if (other == null) {
      return;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasLogin) {
      Login = other.Login;
    }
    if (other.HasGroupId) {
      GroupId = other.GroupId;
    }
    if (other.HasBalance) {
      Balance = other.Balance;
    }
    if (other.HasAccountType) {
      AccountType = other.AccountType;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasPasswordHash) {
      PasswordHash = other.PasswordHash;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasStatus) {
      Status = other.Status;
    }
    if (other.HasCountryId) {
      CountryId = other.CountryId;
    }
    if (other.HasState) {
      State = other.State;
    }
    if (other.HasCity) {
      City = other.City;
    }
    if (other.HasAddress) {
      Address = other.Address;
    }
    if (other.HasZipCode) {
      ZipCode = other.ZipCode;
    }
    if (other.HasPhone) {
      Phone = other.Phone;
    }
    if (other.HasPhonePassword) {
      PhonePassword = other.PhonePassword;
    }
    if (other.HasEmail) {
      Email = other.Email;
    }
    if (other.HasDocumentId) {
      DocumentId = other.DocumentId;
    }
    if (other.HasRegistrationTimestamp) {
      RegistrationTimestamp = other.RegistrationTimestamp;
    }
    if (other.HasLastConnectTimestamp) {
      LastConnectTimestamp = other.LastConnectTimestamp;
    }
    if (other.HasOnline) {
      Online = other.Online;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasDeleted) {
      Deleted = other.Deleted;
    }
    if (other.HasBalanceVersion) {
      BalanceVersion = other.BalanceVersion;
    }
    if (other.HasIntroducingBroker) {
      IntroducingBroker = other.IntroducingBroker;
    }
    if (other.HasParentIntroducingBrokerIdIsNull) {
      ParentIntroducingBrokerIdIsNull = other.ParentIntroducingBrokerIdIsNull;
    }
    if (other.HasParentIntroducingBrokerId) {
      ParentIntroducingBrokerId = other.ParentIntroducingBrokerId;
    }
    if (other.HasIntroducingBrokerCommissionRate) {
      IntroducingBrokerCommissionRate = other.IntroducingBrokerCommissionRate;
    }
    if (other.HasPocketCommissionRate) {
      PocketCommissionRate = other.PocketCommissionRate;
    }
    if (other.HasPocketMarkupRate) {
      PocketMarkupRate = other.PocketMarkupRate;
    }
    if (other.HasDefaultIntroducingBrokerCommissionRate) {
      DefaultIntroducingBrokerCommissionRate = other.DefaultIntroducingBrokerCommissionRate;
    }
    if (other.HasDefaultPocketCommissionRate) {
      DefaultPocketCommissionRate = other.DefaultPocketCommissionRate;
    }
    if (other.HasDefaultPocketMarkupRate) {
      DefaultPocketMarkupRate = other.DefaultPocketMarkupRate;
    }
    if (other.HasDefaultRebateRate) {
      DefaultRebateRate = other.DefaultRebateRate;
    }
    if (other.HasDefaultIbCommissionsType) {
      DefaultIbCommissionsType = other.DefaultIbCommissionsType;
    }
    if (other.HasIbCommissionsType) {
      IbCommissionsType = other.IbCommissionsType;
    }
    if (other.HasManagerBonus) {
      ManagerBonus = other.ManagerBonus;
    }
    if (other.HasIbBonus) {
      IbBonus = other.IbBonus;
    }
    if (other.HasShowPersonalData) {
      ShowPersonalData = other.ShowPersonalData;
    }
    if (other.HasSplitRevenue) {
      SplitRevenue = other.SplitRevenue;
    }
    if (other.HasRankIdIsNull) {
      RankIdIsNull = other.RankIdIsNull;
    }
    if (other.HasRankId) {
      RankId = other.RankId;
    }
    if (other.HasHasRank) {
      HasRank = other.HasRank;
    }
    rank_.Add(other.rank_);
    if (other.HasLastName) {
      LastName = other.LastName;
    }
    if (other.HasDefaultSplitRevenue) {
      DefaultSplitRevenue = other.DefaultSplitRevenue;
    }
    if (other.HasAccessRights) {
      AccessRights = other.AccessRights;
    }
    if (other.HasSendOwnStatement) {
      SendOwnStatement = other.SendOwnStatement;
    }
    if (other.HasDepositAssetId) {
      DepositAssetId = other.DepositAssetId;
    }
    if (other.HasSwapFree) {
      SwapFree = other.SwapFree;
    }
    if (other.HasNonWithdrawableBonus) {
      NonWithdrawableBonus = other.NonWithdrawableBonus;
    }
    if (other.HasLeverageInCents) {
      LeverageInCents = other.LeverageInCents;
    }
    if (other.HasMoveToIBGroup) {
      MoveToIBGroup = other.MoveToIBGroup;
    }
    if (other.HasTotalMarginCalculationType) {
      TotalMarginCalculationType = other.TotalMarginCalculationType;
    }
    if (other.HasBrokerName) {
      BrokerName = other.BrokerName;
    }
    if (other.HasMaxLeverage) {
      MaxLeverage = other.MaxLeverage;
    }
    if (other.HasFreeTrades) {
      FreeTrades = other.FreeTrades;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    if (other.HasSubAccountOf) {
      SubAccountOf = other.SubAccountOf;
    }
    if (other.HasMaxNOP) {
      MaxNOP = other.MaxNOP;
    }
    if (other.HasDisablePasswordLogin) {
      DisablePasswordLogin = other.DisablePasswordLogin;
    }
    if (other.HasIsLimitedRisk) {
      IsLimitedRisk = other.IsLimitedRisk;
    }
    if (other.HasLimitedRiskMarginCalculationStrategy) {
      LimitedRiskMarginCalculationStrategy = other.LimitedRiskMarginCalculationStrategy;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    if (other.HasManagementFee) {
      ManagementFee = other.ManagementFee;
    }
    if (other.HasSendStatementToBroker) {
      SendStatementToBroker = other.SendStatementToBroker;
    }
    defaultIbCommissionSymbolCategory_.Add(other.defaultIbCommissionSymbolCategory_);
    ibCommissionSymbolCategory_.Add(other.ibCommissionSymbolCategory_);
    if (other.HasFairStopOut) {
      FairStopOut = other.FairStopOut;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TraderId = input.ReadInt64();
          break;
        }
        case 16: {
          Login = input.ReadInt64();
          break;
        }
        case 24: {
          GroupId = input.ReadInt64();
          break;
        }
        case 64: {
          Balance = input.ReadInt64();
          break;
        }
        case 72: {
          AccountType = (global::ProtoAccountType) input.ReadEnum();
          break;
        }
        case 82: {
          Name = input.ReadString();
          break;
        }
        case 90: {
          PasswordHash = input.ReadString();
          break;
        }
        case 98: {
          Description = input.ReadString();
          break;
        }
        case 106: {
          Status = input.ReadString();
          break;
        }
        case 112: {
          CountryId = input.ReadInt64();
          break;
        }
        case 122: {
          State = input.ReadString();
          break;
        }
        case 130: {
          City = input.ReadString();
          break;
        }
        case 138: {
          Address = input.ReadString();
          break;
        }
        case 146: {
          ZipCode = input.ReadString();
          break;
        }
        case 154: {
          Phone = input.ReadString();
          break;
        }
        case 162: {
          PhonePassword = input.ReadString();
          break;
        }
        case 170: {
          Email = input.ReadString();
          break;
        }
        case 178: {
          DocumentId = input.ReadString();
          break;
        }
        case 200: {
          RegistrationTimestamp = input.ReadInt64();
          break;
        }
        case 208: {
          LastConnectTimestamp = input.ReadInt64();
          break;
        }
        case 216: {
          Online = input.ReadBool();
          break;
        }
        case 224: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 232: {
          Deleted = input.ReadBool();
          break;
        }
        case 240: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 256: {
          IntroducingBroker = input.ReadBool();
          break;
        }
        case 264: {
          ParentIntroducingBrokerId = input.ReadInt64();
          break;
        }
        case 272: {
          IntroducingBrokerCommissionRate = input.ReadInt32();
          break;
        }
        case 280: {
          PocketCommissionRate = input.ReadInt32();
          break;
        }
        case 288: {
          PocketMarkupRate = input.ReadInt32();
          break;
        }
        case 296: {
          DefaultIntroducingBrokerCommissionRate = input.ReadInt32();
          break;
        }
        case 304: {
          DefaultPocketCommissionRate = input.ReadInt32();
          break;
        }
        case 312: {
          DefaultPocketMarkupRate = input.ReadInt32();
          break;
        }
        case 344: {
          DefaultRebateRate = input.ReadInt32();
          break;
        }
        case 352: {
          DefaultIbCommissionsType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
        case 360: {
          IbCommissionsType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
        case 376: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 384: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 392: {
          ShowPersonalData = input.ReadBool();
          break;
        }
        case 400: {
          SplitRevenue = input.ReadBool();
          break;
        }
        case 408: {
          RankIdIsNull = input.ReadBool();
          break;
        }
        case 416: {
          RankId = input.ReadInt32();
          break;
        }
        case 424: {
          HasRank = input.ReadBool();
          break;
        }
        case 434: {
          rank_.AddEntriesFrom(input, _repeated_rank_codec);
          break;
        }
        case 440: {
          ParentIntroducingBrokerIdIsNull = input.ReadBool();
          break;
        }
        case 450: {
          LastName = input.ReadString();
          break;
        }
        case 456: {
          DefaultSplitRevenue = input.ReadBool();
          break;
        }
        case 472: {
          AccessRights = (global::ProtoAccessRights) input.ReadEnum();
          break;
        }
        case 480: {
          SendOwnStatement = input.ReadBool();
          break;
        }
        case 488: {
          DepositAssetId = input.ReadInt64();
          break;
        }
        case 512: {
          SwapFree = input.ReadBool();
          break;
        }
        case 520: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 528: {
          LeverageInCents = input.ReadUInt32();
          break;
        }
        case 536: {
          MoveToIBGroup = input.ReadBool();
          break;
        }
        case 544: {
          TotalMarginCalculationType = (global::ProtoTotalMarginCalculationType) input.ReadEnum();
          break;
        }
        case 554: {
          BrokerName = input.ReadString();
          break;
        }
        case 560: {
          MaxLeverage = input.ReadUInt32();
          break;
        }
        case 568: {
          FreeTrades = input.ReadBool();
          break;
        }
        case 592: {
          Version = input.ReadInt64();
          break;
        }
        case 600: {
          SubAccountOf = input.ReadInt64();
          break;
        }
        case 608: {
          MaxNOP = input.ReadUInt32();
          break;
        }
        case 616: {
          DisablePasswordLogin = input.ReadBool();
          break;
        }
        case 624: {
          IsLimitedRisk = input.ReadBool();
          break;
        }
        case 632: {
          LimitedRiskMarginCalculationStrategy = (global::ProtoLimitedRiskMarginCalculationStrategy) input.ReadEnum();
          break;
        }
        case 640: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 648: {
          ManagementFee = input.ReadInt64();
          break;
        }
        case 656: {
          SendStatementToBroker = input.ReadBool();
          break;
        }
        case 666: {
          defaultIbCommissionSymbolCategory_.AddEntriesFrom(input, _repeated_defaultIbCommissionSymbolCategory_codec);
          break;
        }
        case 674: {
          ibCommissionSymbolCategory_.AddEntriesFrom(input, _repeated_ibCommissionSymbolCategory_codec);
          break;
        }
        case 680: {
          FairStopOut = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TraderId = input.ReadInt64();
          break;
        }
        case 16: {
          Login = input.ReadInt64();
          break;
        }
        case 24: {
          GroupId = input.ReadInt64();
          break;
        }
        case 64: {
          Balance = input.ReadInt64();
          break;
        }
        case 72: {
          AccountType = (global::ProtoAccountType) input.ReadEnum();
          break;
        }
        case 82: {
          Name = input.ReadString();
          break;
        }
        case 90: {
          PasswordHash = input.ReadString();
          break;
        }
        case 98: {
          Description = input.ReadString();
          break;
        }
        case 106: {
          Status = input.ReadString();
          break;
        }
        case 112: {
          CountryId = input.ReadInt64();
          break;
        }
        case 122: {
          State = input.ReadString();
          break;
        }
        case 130: {
          City = input.ReadString();
          break;
        }
        case 138: {
          Address = input.ReadString();
          break;
        }
        case 146: {
          ZipCode = input.ReadString();
          break;
        }
        case 154: {
          Phone = input.ReadString();
          break;
        }
        case 162: {
          PhonePassword = input.ReadString();
          break;
        }
        case 170: {
          Email = input.ReadString();
          break;
        }
        case 178: {
          DocumentId = input.ReadString();
          break;
        }
        case 200: {
          RegistrationTimestamp = input.ReadInt64();
          break;
        }
        case 208: {
          LastConnectTimestamp = input.ReadInt64();
          break;
        }
        case 216: {
          Online = input.ReadBool();
          break;
        }
        case 224: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 232: {
          Deleted = input.ReadBool();
          break;
        }
        case 240: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 256: {
          IntroducingBroker = input.ReadBool();
          break;
        }
        case 264: {
          ParentIntroducingBrokerId = input.ReadInt64();
          break;
        }
        case 272: {
          IntroducingBrokerCommissionRate = input.ReadInt32();
          break;
        }
        case 280: {
          PocketCommissionRate = input.ReadInt32();
          break;
        }
        case 288: {
          PocketMarkupRate = input.ReadInt32();
          break;
        }
        case 296: {
          DefaultIntroducingBrokerCommissionRate = input.ReadInt32();
          break;
        }
        case 304: {
          DefaultPocketCommissionRate = input.ReadInt32();
          break;
        }
        case 312: {
          DefaultPocketMarkupRate = input.ReadInt32();
          break;
        }
        case 344: {
          DefaultRebateRate = input.ReadInt32();
          break;
        }
        case 352: {
          DefaultIbCommissionsType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
        case 360: {
          IbCommissionsType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
        case 376: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 384: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 392: {
          ShowPersonalData = input.ReadBool();
          break;
        }
        case 400: {
          SplitRevenue = input.ReadBool();
          break;
        }
        case 408: {
          RankIdIsNull = input.ReadBool();
          break;
        }
        case 416: {
          RankId = input.ReadInt32();
          break;
        }
        case 424: {
          HasRank = input.ReadBool();
          break;
        }
        case 434: {
          rank_.AddEntriesFrom(ref input, _repeated_rank_codec);
          break;
        }
        case 440: {
          ParentIntroducingBrokerIdIsNull = input.ReadBool();
          break;
        }
        case 450: {
          LastName = input.ReadString();
          break;
        }
        case 456: {
          DefaultSplitRevenue = input.ReadBool();
          break;
        }
        case 472: {
          AccessRights = (global::ProtoAccessRights) input.ReadEnum();
          break;
        }
        case 480: {
          SendOwnStatement = input.ReadBool();
          break;
        }
        case 488: {
          DepositAssetId = input.ReadInt64();
          break;
        }
        case 512: {
          SwapFree = input.ReadBool();
          break;
        }
        case 520: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 528: {
          LeverageInCents = input.ReadUInt32();
          break;
        }
        case 536: {
          MoveToIBGroup = input.ReadBool();
          break;
        }
        case 544: {
          TotalMarginCalculationType = (global::ProtoTotalMarginCalculationType) input.ReadEnum();
          break;
        }
        case 554: {
          BrokerName = input.ReadString();
          break;
        }
        case 560: {
          MaxLeverage = input.ReadUInt32();
          break;
        }
        case 568: {
          FreeTrades = input.ReadBool();
          break;
        }
        case 592: {
          Version = input.ReadInt64();
          break;
        }
        case 600: {
          SubAccountOf = input.ReadInt64();
          break;
        }
        case 608: {
          MaxNOP = input.ReadUInt32();
          break;
        }
        case 616: {
          DisablePasswordLogin = input.ReadBool();
          break;
        }
        case 624: {
          IsLimitedRisk = input.ReadBool();
          break;
        }
        case 632: {
          LimitedRiskMarginCalculationStrategy = (global::ProtoLimitedRiskMarginCalculationStrategy) input.ReadEnum();
          break;
        }
        case 640: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 648: {
          ManagementFee = input.ReadInt64();
          break;
        }
        case 656: {
          SendStatementToBroker = input.ReadBool();
          break;
        }
        case 666: {
          defaultIbCommissionSymbolCategory_.AddEntriesFrom(ref input, _repeated_defaultIbCommissionSymbolCategory_codec);
          break;
        }
        case 674: {
          ibCommissionSymbolCategory_.AddEntriesFrom(ref input, _repeated_ibCommissionSymbolCategory_codec);
          break;
        }
        case 680: {
          FairStopOut = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// IB Rank entity. Higher Rank gives more Bonuses to IB
/// </summary>
public sealed partial class ProtoTraderRank : pb::IMessage<ProtoTraderRank>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoTraderRank> _parser = new pb::MessageParser<ProtoTraderRank>(() => new ProtoTraderRank());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoTraderRank> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTraderRank() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTraderRank(ProtoTraderRank other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    volume_ = other.volume_;
    parentIbPercentage_ = other.parentIbPercentage_;
    brokerPercentage_ = other.brokerPercentage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTraderRank Clone() {
    return new ProtoTraderRank(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  /// <summary>
  /// ID of Rank entity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Rank name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 3;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume which is necessary to get this rank in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 2) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "parentIbPercentage" field.</summary>
  public const int ParentIbPercentageFieldNumber = 4;
  private readonly static int ParentIbPercentageDefaultValue = 0;

  private int parentIbPercentage_;
  /// <summary>
  /// How much IB will pay to their Parent IB in %, 35 means 35%
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ParentIbPercentage {
    get { if ((_hasBits0 & 4) != 0) { return parentIbPercentage_; } else { return ParentIbPercentageDefaultValue; } }
    set {
      _hasBits0 |= 4;
      parentIbPercentage_ = value;
    }
  }
  /// <summary>Gets whether the "parentIbPercentage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasParentIbPercentage {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "parentIbPercentage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearParentIbPercentage() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "brokerPercentage" field.</summary>
  public const int BrokerPercentageFieldNumber = 5;
  private readonly static int BrokerPercentageDefaultValue = 0;

  private int brokerPercentage_;
  /// <summary>
  /// How much IB will pay to Broker in %, 30 means 30%
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BrokerPercentage {
    get { if ((_hasBits0 & 8) != 0) { return brokerPercentage_; } else { return BrokerPercentageDefaultValue; } }
    set {
      _hasBits0 |= 8;
      brokerPercentage_ = value;
    }
  }
  /// <summary>Gets whether the "brokerPercentage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBrokerPercentage {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "brokerPercentage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBrokerPercentage() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoTraderRank);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoTraderRank other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Volume != other.Volume) return false;
    if (ParentIbPercentage != other.ParentIbPercentage) return false;
    if (BrokerPercentage != other.BrokerPercentage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasParentIbPercentage) hash ^= ParentIbPercentage.GetHashCode();
    if (HasBrokerPercentage) hash ^= BrokerPercentage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasVolume) {
      output.WriteRawTag(24);
      output.WriteInt64(Volume);
    }
    if (HasParentIbPercentage) {
      output.WriteRawTag(32);
      output.WriteInt32(ParentIbPercentage);
    }
    if (HasBrokerPercentage) {
      output.WriteRawTag(40);
      output.WriteInt32(BrokerPercentage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasVolume) {
      output.WriteRawTag(24);
      output.WriteInt64(Volume);
    }
    if (HasParentIbPercentage) {
      output.WriteRawTag(32);
      output.WriteInt32(ParentIbPercentage);
    }
    if (HasBrokerPercentage) {
      output.WriteRawTag(40);
      output.WriteInt32(BrokerPercentage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasParentIbPercentage) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentIbPercentage);
    }
    if (HasBrokerPercentage) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrokerPercentage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoTraderRank other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasParentIbPercentage) {
      ParentIbPercentage = other.ParentIbPercentage;
    }
    if (other.HasBrokerPercentage) {
      BrokerPercentage = other.BrokerPercentage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Volume = input.ReadInt64();
          break;
        }
        case 32: {
          ParentIbPercentage = input.ReadInt32();
          break;
        }
        case 40: {
          BrokerPercentage = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Volume = input.ReadInt64();
          break;
        }
        case 32: {
          ParentIbPercentage = input.ReadInt32();
          break;
        }
        case 40: {
          BrokerPercentage = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Spread Constraint entity - spread limit settings for quotes from LP
/// </summary>
public sealed partial class ProtoMinimumSpreadConstraint : pb::IMessage<ProtoMinimumSpreadConstraint>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoMinimumSpreadConstraint> _parser = new pb::MessageParser<ProtoMinimumSpreadConstraint>(() => new ProtoMinimumSpreadConstraint());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoMinimumSpreadConstraint> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMinimumSpreadConstraint() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMinimumSpreadConstraint(ProtoMinimumSpreadConstraint other) : this() {
    _hasBits0 = other._hasBits0;
    enabled_ = other.enabled_;
    thresholdDigits_ = other.thresholdDigits_;
    bias_ = other.bias_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMinimumSpreadConstraint Clone() {
    return new ProtoMinimumSpreadConstraint(this);
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 1;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// Enables functionality
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 1) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 1;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "thresholdDigits" field.</summary>
  public const int ThresholdDigitsFieldNumber = 2;
  private readonly static uint ThresholdDigitsDefaultValue = 0;

  private uint thresholdDigits_;
  /// <summary>
  /// Determines minimum spread (in Symbol.digits, from 0 to 1000), quotes with smaller spread will be ignored
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ThresholdDigits {
    get { if ((_hasBits0 & 2) != 0) { return thresholdDigits_; } else { return ThresholdDigitsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      thresholdDigits_ = value;
    }
  }
  /// <summary>Gets whether the "thresholdDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasThresholdDigits {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "thresholdDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearThresholdDigits() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "bias" field.</summary>
  public const int BiasFieldNumber = 3;
  private readonly static global::ProtoQuoteType BiasDefaultValue = global::ProtoQuoteType.Bid;

  private global::ProtoQuoteType bias_;
  /// <summary>
  /// Bid/Ask
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoQuoteType Bias {
    get { if ((_hasBits0 & 4) != 0) { return bias_; } else { return BiasDefaultValue; } }
    set {
      _hasBits0 |= 4;
      bias_ = value;
    }
  }
  /// <summary>Gets whether the "bias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBias {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "bias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBias() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoMinimumSpreadConstraint);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoMinimumSpreadConstraint other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enabled != other.Enabled) return false;
    if (ThresholdDigits != other.ThresholdDigits) return false;
    if (Bias != other.Bias) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasThresholdDigits) hash ^= ThresholdDigits.GetHashCode();
    if (HasBias) hash ^= Bias.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasEnabled) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (HasThresholdDigits) {
      output.WriteRawTag(16);
      output.WriteUInt32(ThresholdDigits);
    }
    if (HasBias) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Bias);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasEnabled) {
      output.WriteRawTag(8);
      output.WriteBool(Enabled);
    }
    if (HasThresholdDigits) {
      output.WriteRawTag(16);
      output.WriteUInt32(ThresholdDigits);
    }
    if (HasBias) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Bias);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasThresholdDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThresholdDigits);
    }
    if (HasBias) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Bias);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoMinimumSpreadConstraint other) {
    if (other == null) {
      return;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasThresholdDigits) {
      ThresholdDigits = other.ThresholdDigits;
    }
    if (other.HasBias) {
      Bias = other.Bias;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
        case 16: {
          ThresholdDigits = input.ReadUInt32();
          break;
        }
        case 24: {
          Bias = (global::ProtoQuoteType) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Enabled = input.ReadBool();
          break;
        }
        case 16: {
          ThresholdDigits = input.ReadUInt32();
          break;
        }
        case 24: {
          Bias = (global::ProtoQuoteType) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Symbol entity which is available to manager (Trader gets ProtoSymbolEntity with fewer fields)
/// </summary>
public sealed partial class ProtoManagerSymbol : pb::IMessage<ProtoManagerSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoManagerSymbol> _parser = new pb::MessageParser<ProtoManagerSymbol>(() => new ProtoManagerSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  private int _hasBits1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoManagerSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManagerSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManagerSymbol(ProtoManagerSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    _hasBits1 = other._hasBits1;
    symbolId_ = other.symbolId_;
    name_ = other.name_;
    digits_ = other.digits_;
    pipPosition_ = other.pipPosition_;
    lpEnabled_ = other.lpEnabled_;
    enabled_ = other.enabled_;
    bidMarkUp_ = other.bidMarkUp_;
    askMarkUp_ = other.askMarkUp_;
    description_ = other.description_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    sortingNumber_ = other.sortingNumber_;
    measurementUnits_ = other.measurementUnits_;
    quoteExpirationTimeout_ = other.quoteExpirationTimeout_;
    minimumSpreadConstraint_ = other.minimumSpreadConstraint_ != null ? other.minimumSpreadConstraint_.Clone() : null;
    lotSize_ = other.lotSize_;
    enableShortSelling_ = other.enableShortSelling_;
    symbolCategoryId_ = other.symbolCategoryId_;
    favorite_ = other.favorite_;
    tags_ = other.tags_;
    baseAssetId_ = other.baseAssetId_;
    quoteAssetId_ = other.quoteAssetId_;
    tradingMode_ = other.tradingMode_;
    defaultSwapRollover3Days_ = other.defaultSwapRollover3Days_;
    defaultSwapLong_ = other.defaultSwapLong_;
    defaultSwapShort_ = other.defaultSwapShort_;
    defaultLeverageId_ = other.defaultLeverageId_;
    priceLiquidityFeedId_ = other.priceLiquidityFeedId_;
    tradeLiquidityFeedId_ = other.tradeLiquidityFeedId_;
    defaultDividendTime_ = other.defaultDividendTime_;
    translation_ = other.translation_.Clone();
    scheduleProfileId_ = other.scheduleProfileId_;
    defaultCommissionProfileId_ = other.defaultCommissionProfileId_;
    defaultVolumeProfileId_ = other.defaultVolumeProfileId_;
    defaultExecutionProfileId_ = other.defaultExecutionProfileId_;
    autochartistAlias_ = other.autochartistAlias_;
    tradingCentralAlias_ = other.tradingCentralAlias_;
    defaultProtectionProfileId_ = other.defaultProtectionProfileId_;
    defaultSwapFreeProfileId_ = other.defaultSwapFreeProfileId_;
    defaultGSLScheduleId_ = other.defaultGSLScheduleId_;
    holidayProfileId_ = other.holidayProfileId_;
    bbspAlias_ = other.bbspAlias_;
    futuresSettings_ = other.futuresSettings_ != null ? other.futuresSettings_.Clone() : null;
    defaultTradeNotificationProfileId_ = other.defaultTradeNotificationProfileId_;
    defaultSwapTime_ = other.defaultSwapTime_;
    defaultSwapPeriod_ = other.defaultSwapPeriod_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManagerSymbol Clone() {
    return new ProtoManagerSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// ID of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "digits" field.</summary>
  public const int DigitsFieldNumber = 4;
  private readonly static int DigitsDefaultValue = 0;

  private int digits_;
  /// <summary>
  /// Amount of available digits after comma in the price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Digits {
    get { if ((_hasBits0 & 2) != 0) { return digits_; } else { return DigitsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      digits_ = value;
    }
  }
  /// <summary>Gets whether the "digits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDigits {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "digits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDigits() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "pipPosition" field.</summary>
  public const int PipPositionFieldNumber = 5;
  private readonly static int PipPositionDefaultValue = 0;

  private int pipPosition_;
  /// <summary>
  /// Specifies digit which is used for determining of Pip Position. WARNING: changing this parameter is not recommended as it will result in changing all future swaps (if they are calculated in pips), Renko bars and Range bars.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PipPosition {
    get { if ((_hasBits0 & 4) != 0) { return pipPosition_; } else { return PipPositionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      pipPosition_ = value;
    }
  }
  /// <summary>Gets whether the "pipPosition" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPipPosition {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "pipPosition" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPipPosition() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "lpEnabled" field.</summary>
  public const int LpEnabledFieldNumber = 7;
  private readonly static bool LpEnabledDefaultValue = false;

  private bool lpEnabled_;
  /// <summary>
  /// Specifies whether Symbol is turned on for price streaming or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool LpEnabled {
    get { if ((_hasBits0 & 8) != 0) { return lpEnabled_; } else { return LpEnabledDefaultValue; } }
    set {
      _hasBits0 |= 8;
      lpEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "lpEnabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLpEnabled {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "lpEnabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLpEnabled() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 8;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// Specifies ether Symbol is visible in cTrader or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 16) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 16;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "bidMarkUp" field.</summary>
  public const int BidMarkUpFieldNumber = 12;
  private readonly static int BidMarkUpDefaultValue = 0;

  private int bidMarkUp_;
  /// <summary>
  /// Bid markup value
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BidMarkUp {
    get { if ((_hasBits0 & 256) != 0) { return bidMarkUp_; } else { return BidMarkUpDefaultValue; } }
    set {
      _hasBits0 |= 256;
      bidMarkUp_ = value;
    }
  }
  /// <summary>Gets whether the "bidMarkUp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBidMarkUp {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "bidMarkUp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBidMarkUp() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "askMarkUp" field.</summary>
  public const int AskMarkUpFieldNumber = 13;
  private readonly static int AskMarkUpDefaultValue = 0;

  private int askMarkUp_;
  /// <summary>
  /// Ask markup value
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AskMarkUp {
    get { if ((_hasBits0 & 512) != 0) { return askMarkUp_; } else { return AskMarkUpDefaultValue; } }
    set {
      _hasBits0 |= 512;
      askMarkUp_ = value;
    }
  }
  /// <summary>Gets whether the "askMarkUp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAskMarkUp {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "askMarkUp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAskMarkUp() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 15;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description for the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 16;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the last update of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 1024) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "sortingNumber" field.</summary>
  public const int SortingNumberFieldNumber = 23;
  private readonly static double SortingNumberDefaultValue = 0D;

  private double sortingNumber_;
  /// <summary>
  /// Number used to sort Symbols in Symbol Lists responses
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SortingNumber {
    get { if ((_hasBits0 & 2048) != 0) { return sortingNumber_; } else { return SortingNumberDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      sortingNumber_ = value;
    }
  }
  /// <summary>Gets whether the "sortingNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSortingNumber {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "sortingNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSortingNumber() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "measurementUnits" field.</summary>
  public const int MeasurementUnitsFieldNumber = 24;
  private readonly static string MeasurementUnitsDefaultValue = "";

  private string measurementUnits_;
  /// <summary>
  /// Specifies which unit is traded under base Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MeasurementUnits {
    get { return measurementUnits_ ?? MeasurementUnitsDefaultValue; }
    set {
      measurementUnits_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "measurementUnits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMeasurementUnits {
    get { return measurementUnits_ != null; }
  }
  /// <summary>Clears the value of the "measurementUnits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMeasurementUnits() {
    measurementUnits_ = null;
  }

  /// <summary>Field number for the "quoteExpirationTimeout" field.</summary>
  public const int QuoteExpirationTimeoutFieldNumber = 27;
  private readonly static int QuoteExpirationTimeoutDefaultValue = 0;

  private int quoteExpirationTimeout_;
  /// <summary>
  /// Timeout for last quote expiration
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int QuoteExpirationTimeout {
    get { if ((_hasBits0 & 4096) != 0) { return quoteExpirationTimeout_; } else { return QuoteExpirationTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      quoteExpirationTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "quoteExpirationTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuoteExpirationTimeout {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "quoteExpirationTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuoteExpirationTimeout() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "minimumSpreadConstraint" field.</summary>
  public const int MinimumSpreadConstraintFieldNumber = 30;
  private global::ProtoMinimumSpreadConstraint minimumSpreadConstraint_;
  /// <summary>
  /// Refers to the applicable Spread Constraint entity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoMinimumSpreadConstraint MinimumSpreadConstraint {
    get { return minimumSpreadConstraint_; }
    set {
      minimumSpreadConstraint_ = value;
    }
  }

  /// <summary>Field number for the "lotSize" field.</summary>
  public const int LotSizeFieldNumber = 32;
  private readonly static long LotSizeDefaultValue = 0L;

  private long lotSize_;
  /// <summary>
  /// Amount of units of the base Asset in one lot. WARNING: changing of parameter is not recommended as it will result in changing all future commissions (if they are set in USD_PER_LOT) and rollover commissions.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LotSize {
    get { if ((_hasBits0 & 8192) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      lotSize_ = value;
    }
  }
  /// <summary>Gets whether the "lotSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLotSize {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "lotSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLotSize() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "enableShortSelling" field.</summary>
  public const int EnableShortSellingFieldNumber = 33;
  private readonly static bool EnableShortSellingDefaultValue = false;

  private bool enableShortSelling_;
  /// <summary>
  /// Specifies whether short selling is allowed or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableShortSelling {
    get { if ((_hasBits0 & 16384) != 0) { return enableShortSelling_; } else { return EnableShortSellingDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      enableShortSelling_ = value;
    }
  }
  /// <summary>Gets whether the "enableShortSelling" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableShortSelling {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "enableShortSelling" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableShortSelling() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "symbolCategoryId" field.</summary>
  public const int SymbolCategoryIdFieldNumber = 35;
  private readonly static long SymbolCategoryIdDefaultValue = 0L;

  private long symbolCategoryId_;
  /// <summary>
  /// ID of the Symbol Category where Symbol is located
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolCategoryId {
    get { if ((_hasBits0 & 32768) != 0) { return symbolCategoryId_; } else { return SymbolCategoryIdDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      symbolCategoryId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolCategoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolCategoryId {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "symbolCategoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolCategoryId() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 37;
  private readonly static bool FavoriteDefaultValue = false;

  private bool favorite_;
  /// <summary>
  /// Specifies whether Symbol is favorite
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Favorite {
    get { if ((_hasBits0 & 65536) != 0) { return favorite_; } else { return FavoriteDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      favorite_ = value;
    }
  }
  /// <summary>Gets whether the "favorite" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFavorite {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "favorite" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFavorite() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "tags" field.</summary>
  public const int TagsFieldNumber = 49;
  private readonly static string TagsDefaultValue = "";

  private string tags_;
  /// <summary>
  /// Custom tags. Used for searching Symbols
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Tags {
    get { return tags_ ?? TagsDefaultValue; }
    set {
      tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "tags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTags {
    get { return tags_ != null; }
  }
  /// <summary>Clears the value of the "tags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTags() {
    tags_ = null;
  }

  /// <summary>Field number for the "baseAssetId" field.</summary>
  public const int BaseAssetIdFieldNumber = 53;
  private readonly static long BaseAssetIdDefaultValue = 0L;

  private long baseAssetId_;
  /// <summary>
  /// ID of the base Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BaseAssetId {
    get { if ((_hasBits0 & 131072) != 0) { return baseAssetId_; } else { return BaseAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      baseAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "baseAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseAssetId {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "baseAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseAssetId() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "quoteAssetId" field.</summary>
  public const int QuoteAssetIdFieldNumber = 54;
  private readonly static long QuoteAssetIdDefaultValue = 0L;

  private long quoteAssetId_;
  /// <summary>
  /// ID of the quote Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long QuoteAssetId {
    get { if ((_hasBits0 & 262144) != 0) { return quoteAssetId_; } else { return QuoteAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      quoteAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "quoteAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuoteAssetId {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "quoteAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuoteAssetId() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "tradingMode" field.</summary>
  public const int TradingModeFieldNumber = 58;
  private readonly static global::ProtoTradingMode TradingModeDefaultValue = global::ProtoTradingMode.Enabled;

  private global::ProtoTradingMode tradingMode_;
  /// <summary>
  /// Specified trading mode for the Symbol that limits scope of trading operations Default: ENABLED
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTradingMode TradingMode {
    get { if ((_hasBits0 & 1048576) != 0) { return tradingMode_; } else { return TradingModeDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      tradingMode_ = value;
    }
  }
  /// <summary>Gets whether the "tradingMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradingMode {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "tradingMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradingMode() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "defaultSwapRollover3Days" field.</summary>
  public const int DefaultSwapRollover3DaysFieldNumber = 9;
  private readonly static global::ProtoDayOfWeek DefaultSwapRollover3DaysDefaultValue = global::ProtoDayOfWeek.Monday;

  private global::ProtoDayOfWeek defaultSwapRollover3Days_;
  /// <summary>
  /// Default day of 3x Swap
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDayOfWeek DefaultSwapRollover3Days {
    get { if ((_hasBits0 & 32) != 0) { return defaultSwapRollover3Days_; } else { return DefaultSwapRollover3DaysDefaultValue; } }
    set {
      _hasBits0 |= 32;
      defaultSwapRollover3Days_ = value;
    }
  }
  /// <summary>Gets whether the "defaultSwapRollover3Days" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultSwapRollover3Days {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "defaultSwapRollover3Days" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultSwapRollover3Days() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "defaultSwapLong" field.</summary>
  public const int DefaultSwapLongFieldNumber = 10;
  private readonly static double DefaultSwapLongDefaultValue = 0D;

  private double defaultSwapLong_;
  /// <summary>
  /// Default value of Swap for long Positions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double DefaultSwapLong {
    get { if ((_hasBits0 & 64) != 0) { return defaultSwapLong_; } else { return DefaultSwapLongDefaultValue; } }
    set {
      _hasBits0 |= 64;
      defaultSwapLong_ = value;
    }
  }
  /// <summary>Gets whether the "defaultSwapLong" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultSwapLong {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "defaultSwapLong" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultSwapLong() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "defaultSwapShort" field.</summary>
  public const int DefaultSwapShortFieldNumber = 11;
  private readonly static double DefaultSwapShortDefaultValue = 0D;

  private double defaultSwapShort_;
  /// <summary>
  /// Default value of Swap for short Positions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double DefaultSwapShort {
    get { if ((_hasBits0 & 128) != 0) { return defaultSwapShort_; } else { return DefaultSwapShortDefaultValue; } }
    set {
      _hasBits0 |= 128;
      defaultSwapShort_ = value;
    }
  }
  /// <summary>Gets whether the "defaultSwapShort" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultSwapShort {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "defaultSwapShort" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultSwapShort() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "defaultLeverageId" field.</summary>
  public const int DefaultLeverageIdFieldNumber = 56;
  private readonly static long DefaultLeverageIdDefaultValue = 0L;

  private long defaultLeverageId_;
  /// <summary>
  /// Refers to default Dynamic Leverage entity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultLeverageId {
    get { if ((_hasBits0 & 524288) != 0) { return defaultLeverageId_; } else { return DefaultLeverageIdDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      defaultLeverageId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultLeverageId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultLeverageId {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "defaultLeverageId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultLeverageId() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "priceLiquidityFeedId" field.</summary>
  public const int PriceLiquidityFeedIdFieldNumber = 59;
  private readonly static uint PriceLiquidityFeedIdDefaultValue = 0;

  private uint priceLiquidityFeedId_;
  /// <summary>
  /// ID of Liquidity Feed for market data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PriceLiquidityFeedId {
    get { if ((_hasBits0 & 2097152) != 0) { return priceLiquidityFeedId_; } else { return PriceLiquidityFeedIdDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      priceLiquidityFeedId_ = value;
    }
  }
  /// <summary>Gets whether the "priceLiquidityFeedId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPriceLiquidityFeedId {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "priceLiquidityFeedId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPriceLiquidityFeedId() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "tradeLiquidityFeedId" field.</summary>
  public const int TradeLiquidityFeedIdFieldNumber = 60;
  private readonly static uint TradeLiquidityFeedIdDefaultValue = 0;

  private uint tradeLiquidityFeedId_;
  /// <summary>
  /// ID of Liquidity Feed for trading
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TradeLiquidityFeedId {
    get { if ((_hasBits0 & 4194304) != 0) { return tradeLiquidityFeedId_; } else { return TradeLiquidityFeedIdDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      tradeLiquidityFeedId_ = value;
    }
  }
  /// <summary>Gets whether the "tradeLiquidityFeedId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeLiquidityFeedId {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "tradeLiquidityFeedId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeLiquidityFeedId() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "defaultDividendTime" field.</summary>
  public const int DefaultDividendTimeFieldNumber = 61;
  private readonly static long DefaultDividendTimeDefaultValue = 0L;

  private long defaultDividendTime_;
  /// <summary>
  /// Default time for paying dividends
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultDividendTime {
    get { if ((_hasBits0 & 8388608) != 0) { return defaultDividendTime_; } else { return DefaultDividendTimeDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      defaultDividendTime_ = value;
    }
  }
  /// <summary>Gets whether the "defaultDividendTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultDividendTime {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "defaultDividendTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultDividendTime() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "translation" field.</summary>
  public const int TranslationFieldNumber = 62;
  private static readonly pb::FieldCodec<global::ProtoLocalization> _repeated_translation_codec
      = pb::FieldCodec.ForMessage(498, global::ProtoLocalization.Parser);
  private readonly pbc::RepeatedField<global::ProtoLocalization> translation_ = new pbc::RepeatedField<global::ProtoLocalization>();
  /// <summary>
  /// Localisation setting for Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoLocalization> Translation {
    get { return translation_; }
  }

  /// <summary>Field number for the "scheduleProfileId" field.</summary>
  public const int ScheduleProfileIdFieldNumber = 66;
  private readonly static long ScheduleProfileIdDefaultValue = 0L;

  private long scheduleProfileId_;
  /// <summary>
  /// Schedule Profile for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ScheduleProfileId {
    get { if ((_hasBits0 & 16777216) != 0) { return scheduleProfileId_; } else { return ScheduleProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      scheduleProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "scheduleProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScheduleProfileId {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "scheduleProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScheduleProfileId() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "defaultCommissionProfileId" field.</summary>
  public const int DefaultCommissionProfileIdFieldNumber = 67;
  private readonly static long DefaultCommissionProfileIdDefaultValue = 0L;

  private long defaultCommissionProfileId_;
  /// <summary>
  /// Default Commission Profile for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultCommissionProfileId {
    get { if ((_hasBits0 & 33554432) != 0) { return defaultCommissionProfileId_; } else { return DefaultCommissionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      defaultCommissionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultCommissionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultCommissionProfileId {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "defaultCommissionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultCommissionProfileId() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "defaultVolumeProfileId" field.</summary>
  public const int DefaultVolumeProfileIdFieldNumber = 68;
  private readonly static long DefaultVolumeProfileIdDefaultValue = 0L;

  private long defaultVolumeProfileId_;
  /// <summary>
  /// Default Volume Profile for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultVolumeProfileId {
    get { if ((_hasBits0 & 67108864) != 0) { return defaultVolumeProfileId_; } else { return DefaultVolumeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      defaultVolumeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultVolumeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultVolumeProfileId {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "defaultVolumeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultVolumeProfileId() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "defaultExecutionProfileId" field.</summary>
  public const int DefaultExecutionProfileIdFieldNumber = 69;
  private readonly static long DefaultExecutionProfileIdDefaultValue = 0L;

  private long defaultExecutionProfileId_;
  /// <summary>
  /// Default Execution Profile for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultExecutionProfileId {
    get { if ((_hasBits0 & 134217728) != 0) { return defaultExecutionProfileId_; } else { return DefaultExecutionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      defaultExecutionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultExecutionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultExecutionProfileId {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "defaultExecutionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultExecutionProfileId() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "autochartistAlias" field.</summary>
  public const int AutochartistAliasFieldNumber = 70;
  private readonly static string AutochartistAliasDefaultValue = "";

  private string autochartistAlias_;
  /// <summary>
  /// Name of the Symbol in Autochartist service. Used if Autochartist is enabled
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AutochartistAlias {
    get { return autochartistAlias_ ?? AutochartistAliasDefaultValue; }
    set {
      autochartistAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "autochartistAlias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAutochartistAlias {
    get { return autochartistAlias_ != null; }
  }
  /// <summary>Clears the value of the "autochartistAlias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAutochartistAlias() {
    autochartistAlias_ = null;
  }

  /// <summary>Field number for the "tradingCentralAlias" field.</summary>
  public const int TradingCentralAliasFieldNumber = 71;
  private readonly static string TradingCentralAliasDefaultValue = "";

  private string tradingCentralAlias_;
  /// <summary>
  /// Name of the Symbol in Trading Central service. Used if Trading Central is enabled
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TradingCentralAlias {
    get { return tradingCentralAlias_ ?? TradingCentralAliasDefaultValue; }
    set {
      tradingCentralAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "tradingCentralAlias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradingCentralAlias {
    get { return tradingCentralAlias_ != null; }
  }
  /// <summary>Clears the value of the "tradingCentralAlias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradingCentralAlias() {
    tradingCentralAlias_ = null;
  }

  /// <summary>Field number for the "defaultProtectionProfileId" field.</summary>
  public const int DefaultProtectionProfileIdFieldNumber = 72;
  private readonly static long DefaultProtectionProfileIdDefaultValue = 0L;

  private long defaultProtectionProfileId_;
  /// <summary>
  /// Default Protection Profile for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultProtectionProfileId {
    get { if ((_hasBits0 & 268435456) != 0) { return defaultProtectionProfileId_; } else { return DefaultProtectionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      defaultProtectionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultProtectionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultProtectionProfileId {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "defaultProtectionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultProtectionProfileId() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "defaultSwapFreeProfileId" field.</summary>
  public const int DefaultSwapFreeProfileIdFieldNumber = 73;
  private readonly static long DefaultSwapFreeProfileIdDefaultValue = 0L;

  private long defaultSwapFreeProfileId_;
  /// <summary>
  /// Default Swap Free Profile for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultSwapFreeProfileId {
    get { if ((_hasBits0 & 536870912) != 0) { return defaultSwapFreeProfileId_; } else { return DefaultSwapFreeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      defaultSwapFreeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultSwapFreeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultSwapFreeProfileId {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "defaultSwapFreeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultSwapFreeProfileId() {
    _hasBits0 &= ~536870912;
  }

  /// <summary>Field number for the "defaultGSLScheduleId" field.</summary>
  public const int DefaultGSLScheduleIdFieldNumber = 74;
  private readonly static long DefaultGSLScheduleIdDefaultValue = 0L;

  private long defaultGSLScheduleId_;
  /// <summary>
  /// Default GSL (Guaranteed Stop Loss) Schedule ID for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultGSLScheduleId {
    get { if ((_hasBits0 & 1073741824) != 0) { return defaultGSLScheduleId_; } else { return DefaultGSLScheduleIdDefaultValue; } }
    set {
      _hasBits0 |= 1073741824;
      defaultGSLScheduleId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultGSLScheduleId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultGSLScheduleId {
    get { return (_hasBits0 & 1073741824) != 0; }
  }
  /// <summary>Clears the value of the "defaultGSLScheduleId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultGSLScheduleId() {
    _hasBits0 &= ~1073741824;
  }

  /// <summary>Field number for the "holidayProfileId" field.</summary>
  public const int HolidayProfileIdFieldNumber = 75;
  private readonly static long HolidayProfileIdDefaultValue = 0L;

  private long holidayProfileId_;
  /// <summary>
  /// Symbol Holiday Profile ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long HolidayProfileId {
    get { if ((_hasBits0 & -2147483648) != 0) { return holidayProfileId_; } else { return HolidayProfileIdDefaultValue; } }
    set {
      _hasBits0 |= -2147483648;
      holidayProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "holidayProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHolidayProfileId {
    get { return (_hasBits0 & -2147483648) != 0; }
  }
  /// <summary>Clears the value of the "holidayProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHolidayProfileId() {
    _hasBits0 &= ~-2147483648;
  }

  /// <summary>Field number for the "bbspAlias" field.</summary>
  public const int BbspAliasFieldNumber = 76;
  private readonly static string BbspAliasDefaultValue = "";

  private string bbspAlias_;
  /// <summary>
  /// Name for the Symbol for integration with BBSP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BbspAlias {
    get { return bbspAlias_ ?? BbspAliasDefaultValue; }
    set {
      bbspAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "bbspAlias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBbspAlias {
    get { return bbspAlias_ != null; }
  }
  /// <summary>Clears the value of the "bbspAlias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBbspAlias() {
    bbspAlias_ = null;
  }

  /// <summary>Field number for the "futuresSettings" field.</summary>
  public const int FuturesSettingsFieldNumber = 77;
  private global::ProtoFuturesSettings futuresSettings_;
  /// <summary>
  /// Settings for futures
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoFuturesSettings FuturesSettings {
    get { return futuresSettings_; }
    set {
      futuresSettings_ = value;
    }
  }

  /// <summary>Field number for the "defaultTradeNotificationProfileId" field.</summary>
  public const int DefaultTradeNotificationProfileIdFieldNumber = 78;
  private readonly static long DefaultTradeNotificationProfileIdDefaultValue = 0L;

  private long defaultTradeNotificationProfileId_;
  /// <summary>
  /// Default Trade Notification Profile for Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DefaultTradeNotificationProfileId {
    get { if ((_hasBits1 & 1) != 0) { return defaultTradeNotificationProfileId_; } else { return DefaultTradeNotificationProfileIdDefaultValue; } }
    set {
      _hasBits1 |= 1;
      defaultTradeNotificationProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "defaultTradeNotificationProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultTradeNotificationProfileId {
    get { return (_hasBits1 & 1) != 0; }
  }
  /// <summary>Clears the value of the "defaultTradeNotificationProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultTradeNotificationProfileId() {
    _hasBits1 &= ~1;
  }

  /// <summary>Field number for the "defaultSwapTime" field.</summary>
  public const int DefaultSwapTimeFieldNumber = 79;
  private readonly static int DefaultSwapTimeDefaultValue = 0;

  private int defaultSwapTime_;
  /// <summary>
  /// Time in minutes from 00:00 (UTC) from which Swap Period is calculated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DefaultSwapTime {
    get { if ((_hasBits1 & 2) != 0) { return defaultSwapTime_; } else { return DefaultSwapTimeDefaultValue; } }
    set {
      _hasBits1 |= 2;
      defaultSwapTime_ = value;
    }
  }
  /// <summary>Gets whether the "defaultSwapTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultSwapTime {
    get { return (_hasBits1 & 2) != 0; }
  }
  /// <summary>Clears the value of the "defaultSwapTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultSwapTime() {
    _hasBits1 &= ~2;
  }

  /// <summary>Field number for the "defaultSwapPeriod" field.</summary>
  public const int DefaultSwapPeriodFieldNumber = 80;
  private readonly static int DefaultSwapPeriodDefaultValue = 0;

  private int defaultSwapPeriod_;
  /// <summary>
  /// Swap is calculated every Swap Period (in hours)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DefaultSwapPeriod {
    get { if ((_hasBits1 & 4) != 0) { return defaultSwapPeriod_; } else { return DefaultSwapPeriodDefaultValue; } }
    set {
      _hasBits1 |= 4;
      defaultSwapPeriod_ = value;
    }
  }
  /// <summary>Gets whether the "defaultSwapPeriod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultSwapPeriod {
    get { return (_hasBits1 & 4) != 0; }
  }
  /// <summary>Clears the value of the "defaultSwapPeriod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultSwapPeriod() {
    _hasBits1 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoManagerSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoManagerSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (Name != other.Name) return false;
    if (Digits != other.Digits) return false;
    if (PipPosition != other.PipPosition) return false;
    if (LpEnabled != other.LpEnabled) return false;
    if (Enabled != other.Enabled) return false;
    if (BidMarkUp != other.BidMarkUp) return false;
    if (AskMarkUp != other.AskMarkUp) return false;
    if (Description != other.Description) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SortingNumber, other.SortingNumber)) return false;
    if (MeasurementUnits != other.MeasurementUnits) return false;
    if (QuoteExpirationTimeout != other.QuoteExpirationTimeout) return false;
    if (!object.Equals(MinimumSpreadConstraint, other.MinimumSpreadConstraint)) return false;
    if (LotSize != other.LotSize) return false;
    if (EnableShortSelling != other.EnableShortSelling) return false;
    if (SymbolCategoryId != other.SymbolCategoryId) return false;
    if (Favorite != other.Favorite) return false;
    if (Tags != other.Tags) return false;
    if (BaseAssetId != other.BaseAssetId) return false;
    if (QuoteAssetId != other.QuoteAssetId) return false;
    if (TradingMode != other.TradingMode) return false;
    if (DefaultSwapRollover3Days != other.DefaultSwapRollover3Days) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DefaultSwapLong, other.DefaultSwapLong)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DefaultSwapShort, other.DefaultSwapShort)) return false;
    if (DefaultLeverageId != other.DefaultLeverageId) return false;
    if (PriceLiquidityFeedId != other.PriceLiquidityFeedId) return false;
    if (TradeLiquidityFeedId != other.TradeLiquidityFeedId) return false;
    if (DefaultDividendTime != other.DefaultDividendTime) return false;
    if(!translation_.Equals(other.translation_)) return false;
    if (ScheduleProfileId != other.ScheduleProfileId) return false;
    if (DefaultCommissionProfileId != other.DefaultCommissionProfileId) return false;
    if (DefaultVolumeProfileId != other.DefaultVolumeProfileId) return false;
    if (DefaultExecutionProfileId != other.DefaultExecutionProfileId) return false;
    if (AutochartistAlias != other.AutochartistAlias) return false;
    if (TradingCentralAlias != other.TradingCentralAlias) return false;
    if (DefaultProtectionProfileId != other.DefaultProtectionProfileId) return false;
    if (DefaultSwapFreeProfileId != other.DefaultSwapFreeProfileId) return false;
    if (DefaultGSLScheduleId != other.DefaultGSLScheduleId) return false;
    if (HolidayProfileId != other.HolidayProfileId) return false;
    if (BbspAlias != other.BbspAlias) return false;
    if (!object.Equals(FuturesSettings, other.FuturesSettings)) return false;
    if (DefaultTradeNotificationProfileId != other.DefaultTradeNotificationProfileId) return false;
    if (DefaultSwapTime != other.DefaultSwapTime) return false;
    if (DefaultSwapPeriod != other.DefaultSwapPeriod) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDigits) hash ^= Digits.GetHashCode();
    if (HasPipPosition) hash ^= PipPosition.GetHashCode();
    if (HasLpEnabled) hash ^= LpEnabled.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasBidMarkUp) hash ^= BidMarkUp.GetHashCode();
    if (HasAskMarkUp) hash ^= AskMarkUp.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasSortingNumber) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SortingNumber);
    if (HasMeasurementUnits) hash ^= MeasurementUnits.GetHashCode();
    if (HasQuoteExpirationTimeout) hash ^= QuoteExpirationTimeout.GetHashCode();
    if (minimumSpreadConstraint_ != null) hash ^= MinimumSpreadConstraint.GetHashCode();
    if (HasLotSize) hash ^= LotSize.GetHashCode();
    if (HasEnableShortSelling) hash ^= EnableShortSelling.GetHashCode();
    if (HasSymbolCategoryId) hash ^= SymbolCategoryId.GetHashCode();
    if (HasFavorite) hash ^= Favorite.GetHashCode();
    if (HasTags) hash ^= Tags.GetHashCode();
    if (HasBaseAssetId) hash ^= BaseAssetId.GetHashCode();
    if (HasQuoteAssetId) hash ^= QuoteAssetId.GetHashCode();
    if (HasTradingMode) hash ^= TradingMode.GetHashCode();
    if (HasDefaultSwapRollover3Days) hash ^= DefaultSwapRollover3Days.GetHashCode();
    if (HasDefaultSwapLong) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DefaultSwapLong);
    if (HasDefaultSwapShort) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DefaultSwapShort);
    if (HasDefaultLeverageId) hash ^= DefaultLeverageId.GetHashCode();
    if (HasPriceLiquidityFeedId) hash ^= PriceLiquidityFeedId.GetHashCode();
    if (HasTradeLiquidityFeedId) hash ^= TradeLiquidityFeedId.GetHashCode();
    if (HasDefaultDividendTime) hash ^= DefaultDividendTime.GetHashCode();
    hash ^= translation_.GetHashCode();
    if (HasScheduleProfileId) hash ^= ScheduleProfileId.GetHashCode();
    if (HasDefaultCommissionProfileId) hash ^= DefaultCommissionProfileId.GetHashCode();
    if (HasDefaultVolumeProfileId) hash ^= DefaultVolumeProfileId.GetHashCode();
    if (HasDefaultExecutionProfileId) hash ^= DefaultExecutionProfileId.GetHashCode();
    if (HasAutochartistAlias) hash ^= AutochartistAlias.GetHashCode();
    if (HasTradingCentralAlias) hash ^= TradingCentralAlias.GetHashCode();
    if (HasDefaultProtectionProfileId) hash ^= DefaultProtectionProfileId.GetHashCode();
    if (HasDefaultSwapFreeProfileId) hash ^= DefaultSwapFreeProfileId.GetHashCode();
    if (HasDefaultGSLScheduleId) hash ^= DefaultGSLScheduleId.GetHashCode();
    if (HasHolidayProfileId) hash ^= HolidayProfileId.GetHashCode();
    if (HasBbspAlias) hash ^= BbspAlias.GetHashCode();
    if (futuresSettings_ != null) hash ^= FuturesSettings.GetHashCode();
    if (HasDefaultTradeNotificationProfileId) hash ^= DefaultTradeNotificationProfileId.GetHashCode();
    if (HasDefaultSwapTime) hash ^= DefaultSwapTime.GetHashCode();
    if (HasDefaultSwapPeriod) hash ^= DefaultSwapPeriod.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDigits) {
      output.WriteRawTag(32);
      output.WriteInt32(Digits);
    }
    if (HasPipPosition) {
      output.WriteRawTag(40);
      output.WriteInt32(PipPosition);
    }
    if (HasLpEnabled) {
      output.WriteRawTag(56);
      output.WriteBool(LpEnabled);
    }
    if (HasEnabled) {
      output.WriteRawTag(64);
      output.WriteBool(Enabled);
    }
    if (HasDefaultSwapRollover3Days) {
      output.WriteRawTag(72);
      output.WriteEnum((int) DefaultSwapRollover3Days);
    }
    if (HasDefaultSwapLong) {
      output.WriteRawTag(81);
      output.WriteDouble(DefaultSwapLong);
    }
    if (HasDefaultSwapShort) {
      output.WriteRawTag(89);
      output.WriteDouble(DefaultSwapShort);
    }
    if (HasBidMarkUp) {
      output.WriteRawTag(96);
      output.WriteInt32(BidMarkUp);
    }
    if (HasAskMarkUp) {
      output.WriteRawTag(104);
      output.WriteInt32(AskMarkUp);
    }
    if (HasDescription) {
      output.WriteRawTag(122);
      output.WriteString(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(185, 1);
      output.WriteDouble(SortingNumber);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(194, 1);
      output.WriteString(MeasurementUnits);
    }
    if (HasQuoteExpirationTimeout) {
      output.WriteRawTag(216, 1);
      output.WriteInt32(QuoteExpirationTimeout);
    }
    if (minimumSpreadConstraint_ != null) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(MinimumSpreadConstraint);
    }
    if (HasLotSize) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(LotSize);
    }
    if (HasEnableShortSelling) {
      output.WriteRawTag(136, 2);
      output.WriteBool(EnableShortSelling);
    }
    if (HasSymbolCategoryId) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasFavorite) {
      output.WriteRawTag(168, 2);
      output.WriteBool(Favorite);
    }
    if (HasTags) {
      output.WriteRawTag(138, 3);
      output.WriteString(Tags);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(168, 3);
      output.WriteInt64(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      output.WriteRawTag(176, 3);
      output.WriteInt64(QuoteAssetId);
    }
    if (HasDefaultLeverageId) {
      output.WriteRawTag(192, 3);
      output.WriteInt64(DefaultLeverageId);
    }
    if (HasTradingMode) {
      output.WriteRawTag(208, 3);
      output.WriteEnum((int) TradingMode);
    }
    if (HasPriceLiquidityFeedId) {
      output.WriteRawTag(216, 3);
      output.WriteUInt32(PriceLiquidityFeedId);
    }
    if (HasTradeLiquidityFeedId) {
      output.WriteRawTag(224, 3);
      output.WriteUInt32(TradeLiquidityFeedId);
    }
    if (HasDefaultDividendTime) {
      output.WriteRawTag(232, 3);
      output.WriteInt64(DefaultDividendTime);
    }
    translation_.WriteTo(output, _repeated_translation_codec);
    if (HasScheduleProfileId) {
      output.WriteRawTag(144, 4);
      output.WriteInt64(ScheduleProfileId);
    }
    if (HasDefaultCommissionProfileId) {
      output.WriteRawTag(152, 4);
      output.WriteInt64(DefaultCommissionProfileId);
    }
    if (HasDefaultVolumeProfileId) {
      output.WriteRawTag(160, 4);
      output.WriteInt64(DefaultVolumeProfileId);
    }
    if (HasDefaultExecutionProfileId) {
      output.WriteRawTag(168, 4);
      output.WriteInt64(DefaultExecutionProfileId);
    }
    if (HasAutochartistAlias) {
      output.WriteRawTag(178, 4);
      output.WriteString(AutochartistAlias);
    }
    if (HasTradingCentralAlias) {
      output.WriteRawTag(186, 4);
      output.WriteString(TradingCentralAlias);
    }
    if (HasDefaultProtectionProfileId) {
      output.WriteRawTag(192, 4);
      output.WriteInt64(DefaultProtectionProfileId);
    }
    if (HasDefaultSwapFreeProfileId) {
      output.WriteRawTag(200, 4);
      output.WriteInt64(DefaultSwapFreeProfileId);
    }
    if (HasDefaultGSLScheduleId) {
      output.WriteRawTag(208, 4);
      output.WriteInt64(DefaultGSLScheduleId);
    }
    if (HasHolidayProfileId) {
      output.WriteRawTag(216, 4);
      output.WriteInt64(HolidayProfileId);
    }
    if (HasBbspAlias) {
      output.WriteRawTag(226, 4);
      output.WriteString(BbspAlias);
    }
    if (futuresSettings_ != null) {
      output.WriteRawTag(234, 4);
      output.WriteMessage(FuturesSettings);
    }
    if (HasDefaultTradeNotificationProfileId) {
      output.WriteRawTag(240, 4);
      output.WriteInt64(DefaultTradeNotificationProfileId);
    }
    if (HasDefaultSwapTime) {
      output.WriteRawTag(248, 4);
      output.WriteInt32(DefaultSwapTime);
    }
    if (HasDefaultSwapPeriod) {
      output.WriteRawTag(128, 5);
      output.WriteInt32(DefaultSwapPeriod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDigits) {
      output.WriteRawTag(32);
      output.WriteInt32(Digits);
    }
    if (HasPipPosition) {
      output.WriteRawTag(40);
      output.WriteInt32(PipPosition);
    }
    if (HasLpEnabled) {
      output.WriteRawTag(56);
      output.WriteBool(LpEnabled);
    }
    if (HasEnabled) {
      output.WriteRawTag(64);
      output.WriteBool(Enabled);
    }
    if (HasDefaultSwapRollover3Days) {
      output.WriteRawTag(72);
      output.WriteEnum((int) DefaultSwapRollover3Days);
    }
    if (HasDefaultSwapLong) {
      output.WriteRawTag(81);
      output.WriteDouble(DefaultSwapLong);
    }
    if (HasDefaultSwapShort) {
      output.WriteRawTag(89);
      output.WriteDouble(DefaultSwapShort);
    }
    if (HasBidMarkUp) {
      output.WriteRawTag(96);
      output.WriteInt32(BidMarkUp);
    }
    if (HasAskMarkUp) {
      output.WriteRawTag(104);
      output.WriteInt32(AskMarkUp);
    }
    if (HasDescription) {
      output.WriteRawTag(122);
      output.WriteString(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(185, 1);
      output.WriteDouble(SortingNumber);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(194, 1);
      output.WriteString(MeasurementUnits);
    }
    if (HasQuoteExpirationTimeout) {
      output.WriteRawTag(216, 1);
      output.WriteInt32(QuoteExpirationTimeout);
    }
    if (minimumSpreadConstraint_ != null) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(MinimumSpreadConstraint);
    }
    if (HasLotSize) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(LotSize);
    }
    if (HasEnableShortSelling) {
      output.WriteRawTag(136, 2);
      output.WriteBool(EnableShortSelling);
    }
    if (HasSymbolCategoryId) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasFavorite) {
      output.WriteRawTag(168, 2);
      output.WriteBool(Favorite);
    }
    if (HasTags) {
      output.WriteRawTag(138, 3);
      output.WriteString(Tags);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(168, 3);
      output.WriteInt64(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      output.WriteRawTag(176, 3);
      output.WriteInt64(QuoteAssetId);
    }
    if (HasDefaultLeverageId) {
      output.WriteRawTag(192, 3);
      output.WriteInt64(DefaultLeverageId);
    }
    if (HasTradingMode) {
      output.WriteRawTag(208, 3);
      output.WriteEnum((int) TradingMode);
    }
    if (HasPriceLiquidityFeedId) {
      output.WriteRawTag(216, 3);
      output.WriteUInt32(PriceLiquidityFeedId);
    }
    if (HasTradeLiquidityFeedId) {
      output.WriteRawTag(224, 3);
      output.WriteUInt32(TradeLiquidityFeedId);
    }
    if (HasDefaultDividendTime) {
      output.WriteRawTag(232, 3);
      output.WriteInt64(DefaultDividendTime);
    }
    translation_.WriteTo(ref output, _repeated_translation_codec);
    if (HasScheduleProfileId) {
      output.WriteRawTag(144, 4);
      output.WriteInt64(ScheduleProfileId);
    }
    if (HasDefaultCommissionProfileId) {
      output.WriteRawTag(152, 4);
      output.WriteInt64(DefaultCommissionProfileId);
    }
    if (HasDefaultVolumeProfileId) {
      output.WriteRawTag(160, 4);
      output.WriteInt64(DefaultVolumeProfileId);
    }
    if (HasDefaultExecutionProfileId) {
      output.WriteRawTag(168, 4);
      output.WriteInt64(DefaultExecutionProfileId);
    }
    if (HasAutochartistAlias) {
      output.WriteRawTag(178, 4);
      output.WriteString(AutochartistAlias);
    }
    if (HasTradingCentralAlias) {
      output.WriteRawTag(186, 4);
      output.WriteString(TradingCentralAlias);
    }
    if (HasDefaultProtectionProfileId) {
      output.WriteRawTag(192, 4);
      output.WriteInt64(DefaultProtectionProfileId);
    }
    if (HasDefaultSwapFreeProfileId) {
      output.WriteRawTag(200, 4);
      output.WriteInt64(DefaultSwapFreeProfileId);
    }
    if (HasDefaultGSLScheduleId) {
      output.WriteRawTag(208, 4);
      output.WriteInt64(DefaultGSLScheduleId);
    }
    if (HasHolidayProfileId) {
      output.WriteRawTag(216, 4);
      output.WriteInt64(HolidayProfileId);
    }
    if (HasBbspAlias) {
      output.WriteRawTag(226, 4);
      output.WriteString(BbspAlias);
    }
    if (futuresSettings_ != null) {
      output.WriteRawTag(234, 4);
      output.WriteMessage(FuturesSettings);
    }
    if (HasDefaultTradeNotificationProfileId) {
      output.WriteRawTag(240, 4);
      output.WriteInt64(DefaultTradeNotificationProfileId);
    }
    if (HasDefaultSwapTime) {
      output.WriteRawTag(248, 4);
      output.WriteInt32(DefaultSwapTime);
    }
    if (HasDefaultSwapPeriod) {
      output.WriteRawTag(128, 5);
      output.WriteInt32(DefaultSwapPeriod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDigits) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
    }
    if (HasPipPosition) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PipPosition);
    }
    if (HasLpEnabled) {
      size += 1 + 1;
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasBidMarkUp) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidMarkUp);
    }
    if (HasAskMarkUp) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskMarkUp);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasSortingNumber) {
      size += 2 + 8;
    }
    if (HasMeasurementUnits) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(MeasurementUnits);
    }
    if (HasQuoteExpirationTimeout) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(QuoteExpirationTimeout);
    }
    if (minimumSpreadConstraint_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinimumSpreadConstraint);
    }
    if (HasLotSize) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LotSize);
    }
    if (HasEnableShortSelling) {
      size += 2 + 1;
    }
    if (HasSymbolCategoryId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(SymbolCategoryId);
    }
    if (HasFavorite) {
      size += 2 + 1;
    }
    if (HasTags) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Tags);
    }
    if (HasBaseAssetId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(QuoteAssetId);
    }
    if (HasTradingMode) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingMode);
    }
    if (HasDefaultSwapRollover3Days) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultSwapRollover3Days);
    }
    if (HasDefaultSwapLong) {
      size += 1 + 8;
    }
    if (HasDefaultSwapShort) {
      size += 1 + 8;
    }
    if (HasDefaultLeverageId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultLeverageId);
    }
    if (HasPriceLiquidityFeedId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PriceLiquidityFeedId);
    }
    if (HasTradeLiquidityFeedId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TradeLiquidityFeedId);
    }
    if (HasDefaultDividendTime) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultDividendTime);
    }
    size += translation_.CalculateSize(_repeated_translation_codec);
    if (HasScheduleProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ScheduleProfileId);
    }
    if (HasDefaultCommissionProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultCommissionProfileId);
    }
    if (HasDefaultVolumeProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultVolumeProfileId);
    }
    if (HasDefaultExecutionProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultExecutionProfileId);
    }
    if (HasAutochartistAlias) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(AutochartistAlias);
    }
    if (HasTradingCentralAlias) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(TradingCentralAlias);
    }
    if (HasDefaultProtectionProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultProtectionProfileId);
    }
    if (HasDefaultSwapFreeProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultSwapFreeProfileId);
    }
    if (HasDefaultGSLScheduleId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultGSLScheduleId);
    }
    if (HasHolidayProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(HolidayProfileId);
    }
    if (HasBbspAlias) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BbspAlias);
    }
    if (futuresSettings_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(FuturesSettings);
    }
    if (HasDefaultTradeNotificationProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultTradeNotificationProfileId);
    }
    if (HasDefaultSwapTime) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultSwapTime);
    }
    if (HasDefaultSwapPeriod) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultSwapPeriod);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoManagerSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDigits) {
      Digits = other.Digits;
    }
    if (other.HasPipPosition) {
      PipPosition = other.PipPosition;
    }
    if (other.HasLpEnabled) {
      LpEnabled = other.LpEnabled;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasBidMarkUp) {
      BidMarkUp = other.BidMarkUp;
    }
    if (other.HasAskMarkUp) {
      AskMarkUp = other.AskMarkUp;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasSortingNumber) {
      SortingNumber = other.SortingNumber;
    }
    if (other.HasMeasurementUnits) {
      MeasurementUnits = other.MeasurementUnits;
    }
    if (other.HasQuoteExpirationTimeout) {
      QuoteExpirationTimeout = other.QuoteExpirationTimeout;
    }
    if (other.minimumSpreadConstraint_ != null) {
      if (minimumSpreadConstraint_ == null) {
        MinimumSpreadConstraint = new global::ProtoMinimumSpreadConstraint();
      }
      MinimumSpreadConstraint.MergeFrom(other.MinimumSpreadConstraint);
    }
    if (other.HasLotSize) {
      LotSize = other.LotSize;
    }
    if (other.HasEnableShortSelling) {
      EnableShortSelling = other.EnableShortSelling;
    }
    if (other.HasSymbolCategoryId) {
      SymbolCategoryId = other.SymbolCategoryId;
    }
    if (other.HasFavorite) {
      Favorite = other.Favorite;
    }
    if (other.HasTags) {
      Tags = other.Tags;
    }
    if (other.HasBaseAssetId) {
      BaseAssetId = other.BaseAssetId;
    }
    if (other.HasQuoteAssetId) {
      QuoteAssetId = other.QuoteAssetId;
    }
    if (other.HasTradingMode) {
      TradingMode = other.TradingMode;
    }
    if (other.HasDefaultSwapRollover3Days) {
      DefaultSwapRollover3Days = other.DefaultSwapRollover3Days;
    }
    if (other.HasDefaultSwapLong) {
      DefaultSwapLong = other.DefaultSwapLong;
    }
    if (other.HasDefaultSwapShort) {
      DefaultSwapShort = other.DefaultSwapShort;
    }
    if (other.HasDefaultLeverageId) {
      DefaultLeverageId = other.DefaultLeverageId;
    }
    if (other.HasPriceLiquidityFeedId) {
      PriceLiquidityFeedId = other.PriceLiquidityFeedId;
    }
    if (other.HasTradeLiquidityFeedId) {
      TradeLiquidityFeedId = other.TradeLiquidityFeedId;
    }
    if (other.HasDefaultDividendTime) {
      DefaultDividendTime = other.DefaultDividendTime;
    }
    translation_.Add(other.translation_);
    if (other.HasScheduleProfileId) {
      ScheduleProfileId = other.ScheduleProfileId;
    }
    if (other.HasDefaultCommissionProfileId) {
      DefaultCommissionProfileId = other.DefaultCommissionProfileId;
    }
    if (other.HasDefaultVolumeProfileId) {
      DefaultVolumeProfileId = other.DefaultVolumeProfileId;
    }
    if (other.HasDefaultExecutionProfileId) {
      DefaultExecutionProfileId = other.DefaultExecutionProfileId;
    }
    if (other.HasAutochartistAlias) {
      AutochartistAlias = other.AutochartistAlias;
    }
    if (other.HasTradingCentralAlias) {
      TradingCentralAlias = other.TradingCentralAlias;
    }
    if (other.HasDefaultProtectionProfileId) {
      DefaultProtectionProfileId = other.DefaultProtectionProfileId;
    }
    if (other.HasDefaultSwapFreeProfileId) {
      DefaultSwapFreeProfileId = other.DefaultSwapFreeProfileId;
    }
    if (other.HasDefaultGSLScheduleId) {
      DefaultGSLScheduleId = other.DefaultGSLScheduleId;
    }
    if (other.HasHolidayProfileId) {
      HolidayProfileId = other.HolidayProfileId;
    }
    if (other.HasBbspAlias) {
      BbspAlias = other.BbspAlias;
    }
    if (other.futuresSettings_ != null) {
      if (futuresSettings_ == null) {
        FuturesSettings = new global::ProtoFuturesSettings();
      }
      FuturesSettings.MergeFrom(other.FuturesSettings);
    }
    if (other.HasDefaultTradeNotificationProfileId) {
      DefaultTradeNotificationProfileId = other.DefaultTradeNotificationProfileId;
    }
    if (other.HasDefaultSwapTime) {
      DefaultSwapTime = other.DefaultSwapTime;
    }
    if (other.HasDefaultSwapPeriod) {
      DefaultSwapPeriod = other.DefaultSwapPeriod;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Digits = input.ReadInt32();
          break;
        }
        case 40: {
          PipPosition = input.ReadInt32();
          break;
        }
        case 56: {
          LpEnabled = input.ReadBool();
          break;
        }
        case 64: {
          Enabled = input.ReadBool();
          break;
        }
        case 72: {
          DefaultSwapRollover3Days = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 81: {
          DefaultSwapLong = input.ReadDouble();
          break;
        }
        case 89: {
          DefaultSwapShort = input.ReadDouble();
          break;
        }
        case 96: {
          BidMarkUp = input.ReadInt32();
          break;
        }
        case 104: {
          AskMarkUp = input.ReadInt32();
          break;
        }
        case 122: {
          Description = input.ReadString();
          break;
        }
        case 128: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 185: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 194: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 216: {
          QuoteExpirationTimeout = input.ReadInt32();
          break;
        }
        case 242: {
          if (minimumSpreadConstraint_ == null) {
            MinimumSpreadConstraint = new global::ProtoMinimumSpreadConstraint();
          }
          input.ReadMessage(MinimumSpreadConstraint);
          break;
        }
        case 256: {
          LotSize = input.ReadInt64();
          break;
        }
        case 264: {
          EnableShortSelling = input.ReadBool();
          break;
        }
        case 280: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 296: {
          Favorite = input.ReadBool();
          break;
        }
        case 394: {
          Tags = input.ReadString();
          break;
        }
        case 424: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 432: {
          QuoteAssetId = input.ReadInt64();
          break;
        }
        case 448: {
          DefaultLeverageId = input.ReadInt64();
          break;
        }
        case 464: {
          TradingMode = (global::ProtoTradingMode) input.ReadEnum();
          break;
        }
        case 472: {
          PriceLiquidityFeedId = input.ReadUInt32();
          break;
        }
        case 480: {
          TradeLiquidityFeedId = input.ReadUInt32();
          break;
        }
        case 488: {
          DefaultDividendTime = input.ReadInt64();
          break;
        }
        case 498: {
          translation_.AddEntriesFrom(input, _repeated_translation_codec);
          break;
        }
        case 528: {
          ScheduleProfileId = input.ReadInt64();
          break;
        }
        case 536: {
          DefaultCommissionProfileId = input.ReadInt64();
          break;
        }
        case 544: {
          DefaultVolumeProfileId = input.ReadInt64();
          break;
        }
        case 552: {
          DefaultExecutionProfileId = input.ReadInt64();
          break;
        }
        case 562: {
          AutochartistAlias = input.ReadString();
          break;
        }
        case 570: {
          TradingCentralAlias = input.ReadString();
          break;
        }
        case 576: {
          DefaultProtectionProfileId = input.ReadInt64();
          break;
        }
        case 584: {
          DefaultSwapFreeProfileId = input.ReadInt64();
          break;
        }
        case 592: {
          DefaultGSLScheduleId = input.ReadInt64();
          break;
        }
        case 600: {
          HolidayProfileId = input.ReadInt64();
          break;
        }
        case 610: {
          BbspAlias = input.ReadString();
          break;
        }
        case 618: {
          if (futuresSettings_ == null) {
            FuturesSettings = new global::ProtoFuturesSettings();
          }
          input.ReadMessage(FuturesSettings);
          break;
        }
        case 624: {
          DefaultTradeNotificationProfileId = input.ReadInt64();
          break;
        }
        case 632: {
          DefaultSwapTime = input.ReadInt32();
          break;
        }
        case 640: {
          DefaultSwapPeriod = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Digits = input.ReadInt32();
          break;
        }
        case 40: {
          PipPosition = input.ReadInt32();
          break;
        }
        case 56: {
          LpEnabled = input.ReadBool();
          break;
        }
        case 64: {
          Enabled = input.ReadBool();
          break;
        }
        case 72: {
          DefaultSwapRollover3Days = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 81: {
          DefaultSwapLong = input.ReadDouble();
          break;
        }
        case 89: {
          DefaultSwapShort = input.ReadDouble();
          break;
        }
        case 96: {
          BidMarkUp = input.ReadInt32();
          break;
        }
        case 104: {
          AskMarkUp = input.ReadInt32();
          break;
        }
        case 122: {
          Description = input.ReadString();
          break;
        }
        case 128: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 185: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 194: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 216: {
          QuoteExpirationTimeout = input.ReadInt32();
          break;
        }
        case 242: {
          if (minimumSpreadConstraint_ == null) {
            MinimumSpreadConstraint = new global::ProtoMinimumSpreadConstraint();
          }
          input.ReadMessage(MinimumSpreadConstraint);
          break;
        }
        case 256: {
          LotSize = input.ReadInt64();
          break;
        }
        case 264: {
          EnableShortSelling = input.ReadBool();
          break;
        }
        case 280: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 296: {
          Favorite = input.ReadBool();
          break;
        }
        case 394: {
          Tags = input.ReadString();
          break;
        }
        case 424: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 432: {
          QuoteAssetId = input.ReadInt64();
          break;
        }
        case 448: {
          DefaultLeverageId = input.ReadInt64();
          break;
        }
        case 464: {
          TradingMode = (global::ProtoTradingMode) input.ReadEnum();
          break;
        }
        case 472: {
          PriceLiquidityFeedId = input.ReadUInt32();
          break;
        }
        case 480: {
          TradeLiquidityFeedId = input.ReadUInt32();
          break;
        }
        case 488: {
          DefaultDividendTime = input.ReadInt64();
          break;
        }
        case 498: {
          translation_.AddEntriesFrom(ref input, _repeated_translation_codec);
          break;
        }
        case 528: {
          ScheduleProfileId = input.ReadInt64();
          break;
        }
        case 536: {
          DefaultCommissionProfileId = input.ReadInt64();
          break;
        }
        case 544: {
          DefaultVolumeProfileId = input.ReadInt64();
          break;
        }
        case 552: {
          DefaultExecutionProfileId = input.ReadInt64();
          break;
        }
        case 562: {
          AutochartistAlias = input.ReadString();
          break;
        }
        case 570: {
          TradingCentralAlias = input.ReadString();
          break;
        }
        case 576: {
          DefaultProtectionProfileId = input.ReadInt64();
          break;
        }
        case 584: {
          DefaultSwapFreeProfileId = input.ReadInt64();
          break;
        }
        case 592: {
          DefaultGSLScheduleId = input.ReadInt64();
          break;
        }
        case 600: {
          HolidayProfileId = input.ReadInt64();
          break;
        }
        case 610: {
          BbspAlias = input.ReadString();
          break;
        }
        case 618: {
          if (futuresSettings_ == null) {
            FuturesSettings = new global::ProtoFuturesSettings();
          }
          input.ReadMessage(FuturesSettings);
          break;
        }
        case 624: {
          DefaultTradeNotificationProfileId = input.ReadInt64();
          break;
        }
        case 632: {
          DefaultSwapTime = input.ReadInt32();
          break;
        }
        case 640: {
          DefaultSwapPeriod = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Archived Symbol entity
/// </summary>
public sealed partial class ProtoArchivedSymbol : pb::IMessage<ProtoArchivedSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoArchivedSymbol> _parser = new pb::MessageParser<ProtoArchivedSymbol>(() => new ProtoArchivedSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoArchivedSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoArchivedSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoArchivedSymbol(ProtoArchivedSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    name_ = other.name_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    description_ = other.description_;
    digits_ = other.digits_;
    pipPosition_ = other.pipPosition_;
    lotSize_ = other.lotSize_;
    measurementUnits_ = other.measurementUnits_;
    baseAssetId_ = other.baseAssetId_;
    unifiedSymbolId_ = other.unifiedSymbolId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoArchivedSymbol Clone() {
    return new ProtoArchivedSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Symbol name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 3;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the last update of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 2) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Symbol description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "digits" field.</summary>
  public const int DigitsFieldNumber = 5;
  private readonly static int DigitsDefaultValue = 0;

  private int digits_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Digits {
    get { if ((_hasBits0 & 4) != 0) { return digits_; } else { return DigitsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      digits_ = value;
    }
  }
  /// <summary>Gets whether the "digits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDigits {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "digits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDigits() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "pipPosition" field.</summary>
  public const int PipPositionFieldNumber = 6;
  private readonly static int PipPositionDefaultValue = 0;

  private int pipPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PipPosition {
    get { if ((_hasBits0 & 8) != 0) { return pipPosition_; } else { return PipPositionDefaultValue; } }
    set {
      _hasBits0 |= 8;
      pipPosition_ = value;
    }
  }
  /// <summary>Gets whether the "pipPosition" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPipPosition {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "pipPosition" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPipPosition() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "lotSize" field.</summary>
  public const int LotSizeFieldNumber = 7;
  private readonly static long LotSizeDefaultValue = 0L;

  private long lotSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LotSize {
    get { if ((_hasBits0 & 16) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      lotSize_ = value;
    }
  }
  /// <summary>Gets whether the "lotSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLotSize {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "lotSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLotSize() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "measurementUnits" field.</summary>
  public const int MeasurementUnitsFieldNumber = 8;
  private readonly static string MeasurementUnitsDefaultValue = "";

  private string measurementUnits_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MeasurementUnits {
    get { return measurementUnits_ ?? MeasurementUnitsDefaultValue; }
    set {
      measurementUnits_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "measurementUnits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMeasurementUnits {
    get { return measurementUnits_ != null; }
  }
  /// <summary>Clears the value of the "measurementUnits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMeasurementUnits() {
    measurementUnits_ = null;
  }

  /// <summary>Field number for the "baseAssetId" field.</summary>
  public const int BaseAssetIdFieldNumber = 9;
  private readonly static long BaseAssetIdDefaultValue = 0L;

  private long baseAssetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BaseAssetId {
    get { if ((_hasBits0 & 32) != 0) { return baseAssetId_; } else { return BaseAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      baseAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "baseAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseAssetId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "baseAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseAssetId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "unifiedSymbolId" field.</summary>
  public const int UnifiedSymbolIdFieldNumber = 10;
  private readonly static int UnifiedSymbolIdDefaultValue = 0;

  private int unifiedSymbolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int UnifiedSymbolId {
    get { if ((_hasBits0 & 64) != 0) { return unifiedSymbolId_; } else { return UnifiedSymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      unifiedSymbolId_ = value;
    }
  }
  /// <summary>Gets whether the "unifiedSymbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUnifiedSymbolId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "unifiedSymbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUnifiedSymbolId() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoArchivedSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoArchivedSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (Name != other.Name) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (Description != other.Description) return false;
    if (Digits != other.Digits) return false;
    if (PipPosition != other.PipPosition) return false;
    if (LotSize != other.LotSize) return false;
    if (MeasurementUnits != other.MeasurementUnits) return false;
    if (BaseAssetId != other.BaseAssetId) return false;
    if (UnifiedSymbolId != other.UnifiedSymbolId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasDigits) hash ^= Digits.GetHashCode();
    if (HasPipPosition) hash ^= PipPosition.GetHashCode();
    if (HasLotSize) hash ^= LotSize.GetHashCode();
    if (HasMeasurementUnits) hash ^= MeasurementUnits.GetHashCode();
    if (HasBaseAssetId) hash ^= BaseAssetId.GetHashCode();
    if (HasUnifiedSymbolId) hash ^= UnifiedSymbolId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasDescription) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (HasDigits) {
      output.WriteRawTag(40);
      output.WriteInt32(Digits);
    }
    if (HasPipPosition) {
      output.WriteRawTag(48);
      output.WriteInt32(PipPosition);
    }
    if (HasLotSize) {
      output.WriteRawTag(56);
      output.WriteInt64(LotSize);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(66);
      output.WriteString(MeasurementUnits);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(72);
      output.WriteInt64(BaseAssetId);
    }
    if (HasUnifiedSymbolId) {
      output.WriteRawTag(80);
      output.WriteInt32(UnifiedSymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasDescription) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (HasDigits) {
      output.WriteRawTag(40);
      output.WriteInt32(Digits);
    }
    if (HasPipPosition) {
      output.WriteRawTag(48);
      output.WriteInt32(PipPosition);
    }
    if (HasLotSize) {
      output.WriteRawTag(56);
      output.WriteInt64(LotSize);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(66);
      output.WriteString(MeasurementUnits);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(72);
      output.WriteInt64(BaseAssetId);
    }
    if (HasUnifiedSymbolId) {
      output.WriteRawTag(80);
      output.WriteInt32(UnifiedSymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasDigits) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
    }
    if (HasPipPosition) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PipPosition);
    }
    if (HasLotSize) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LotSize);
    }
    if (HasMeasurementUnits) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementUnits);
    }
    if (HasBaseAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseAssetId);
    }
    if (HasUnifiedSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnifiedSymbolId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoArchivedSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasDigits) {
      Digits = other.Digits;
    }
    if (other.HasPipPosition) {
      PipPosition = other.PipPosition;
    }
    if (other.HasLotSize) {
      LotSize = other.LotSize;
    }
    if (other.HasMeasurementUnits) {
      MeasurementUnits = other.MeasurementUnits;
    }
    if (other.HasBaseAssetId) {
      BaseAssetId = other.BaseAssetId;
    }
    if (other.HasUnifiedSymbolId) {
      UnifiedSymbolId = other.UnifiedSymbolId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          Digits = input.ReadInt32();
          break;
        }
        case 48: {
          PipPosition = input.ReadInt32();
          break;
        }
        case 56: {
          LotSize = input.ReadInt64();
          break;
        }
        case 66: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 72: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 80: {
          UnifiedSymbolId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          Digits = input.ReadInt32();
          break;
        }
        case 48: {
          PipPosition = input.ReadInt32();
          break;
        }
        case 56: {
          LotSize = input.ReadInt64();
          break;
        }
        case 66: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 72: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 80: {
          UnifiedSymbolId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Localisation settings entity
/// </summary>
public sealed partial class ProtoLocalization : pb::IMessage<ProtoLocalization>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLocalization> _parser = new pb::MessageParser<ProtoLocalization>(() => new ProtoLocalization());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLocalization> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLocalization() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLocalization(ProtoLocalization other) : this() {
    locale_ = other.locale_;
    title_ = other.title_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLocalization Clone() {
    return new ProtoLocalization(this);
  }

  /// <summary>Field number for the "locale" field.</summary>
  public const int LocaleFieldNumber = 1;
  private readonly static string LocaleDefaultValue = "";

  private string locale_;
  /// <summary>
  /// Localisation short name (up to 8 characters)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Locale {
    get { return locale_ ?? LocaleDefaultValue; }
    set {
      locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "locale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLocale {
    get { return locale_ != null; }
  }
  /// <summary>Clears the value of the "locale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLocale() {
    locale_ = null;
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 2;
  private readonly static string TitleDefaultValue = "";

  private string title_;
  /// <summary>
  /// Localisation descriptive name (up to 128 characters)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Title {
    get { return title_ ?? TitleDefaultValue; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "title" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTitle {
    get { return title_ != null; }
  }
  /// <summary>Clears the value of the "title" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTitle() {
    title_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLocalization);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLocalization other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Locale != other.Locale) return false;
    if (Title != other.Title) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLocale) hash ^= Locale.GetHashCode();
    if (HasTitle) hash ^= Title.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLocale) {
      output.WriteRawTag(10);
      output.WriteString(Locale);
    }
    if (HasTitle) {
      output.WriteRawTag(18);
      output.WriteString(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLocale) {
      output.WriteRawTag(10);
      output.WriteString(Locale);
    }
    if (HasTitle) {
      output.WriteRawTag(18);
      output.WriteString(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLocale) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
    }
    if (HasTitle) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLocalization other) {
    if (other == null) {
      return;
    }
    if (other.HasLocale) {
      Locale = other.Locale;
    }
    if (other.HasTitle) {
      Title = other.Title;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Locale = input.ReadString();
          break;
        }
        case 18: {
          Title = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Locale = input.ReadString();
          break;
        }
        case 18: {
          Title = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Group entity. Groups are used to manage Trader settings and Manager permission. Each Trader belongs to one Group which determines their trading parameters
/// </summary>
public sealed partial class ProtoGroup : pb::IMessage<ProtoGroup>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoGroup> _parser = new pb::MessageParser<ProtoGroup>(() => new ProtoGroup());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoGroup> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGroup() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGroup(ProtoGroup other) : this() {
    _hasBits0 = other._hasBits0;
    groupId_ = other.groupId_;
    name_ = other.name_;
    enabled_ = other.enabled_;
    swapEnabled_ = other.swapEnabled_;
    swapAndDividendProfileId_ = other.swapAndDividendProfileId_;
    marginStopout_ = other.marginStopout_;
    description_ = other.description_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    priceStreamId_ = other.priceStreamId_;
    deleted_ = other.deleted_;
    hasAccess_ = other.hasAccess_;
    symbol_ = other.symbol_.Clone();
    dynamicCommission_ = other.dynamicCommission_.Clone();
    bonusConversionRate_ = other.bonusConversionRate_;
    bonusConvertLots_ = other.bonusConvertLots_;
    bonusConversionRateLots_ = other.bonusConversionRateLots_;
    isDealingDesk_ = other.isDealingDesk_;
    maxAutoExecutionSizeProfileId_ = other.maxAutoExecutionSizeProfileId_;
    blockedChannels_ = other.blockedChannels_;
    fairStopOut_ = other.fairStopOut_;
    regionId_ = other.regionId_;
    copyDisabled_ = other.copyDisabled_;
    stopoutDisabled_ = other.stopoutDisabled_;
    inactivityGracePeriod_ = other.inactivityGracePeriod_;
    inactivityChargePeriod_ = other.inactivityChargePeriod_;
    inactivityFeeAmount_ = other.inactivityFeeAmount_;
    copyProvidingDisabled_ = other.copyProvidingDisabled_;
    legalEntityId_ = other.legalEntityId_;
    disablePasswordLogin_ = other.disablePasswordLogin_;
    allowWorseGSL_ = other.allowWorseGSL_;
    isFakeSpreadBetting_ = other.isFakeSpreadBetting_;
    negativeBalanceProtection_ = other.negativeBalanceProtection_;
    allowTraderChangeSO_ = other.allowTraderChangeSO_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGroup Clone() {
    return new ProtoGroup(this);
  }

  /// <summary>Field number for the "groupId" field.</summary>
  public const int GroupIdFieldNumber = 1;
  private readonly static long GroupIdDefaultValue = 0L;

  private long groupId_;
  /// <summary>
  /// ID of the Group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GroupId {
    get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      groupId_ = value;
    }
  }
  /// <summary>Gets whether the "groupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGroupId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "groupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGroupId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 3;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// Specifies whether Group is enabled (Trader's login are allowed) or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 2) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "swapEnabled" field.</summary>
  public const int SwapEnabledFieldNumber = 4;
  private readonly static bool SwapEnabledDefaultValue = false;

  private bool swapEnabled_;
  /// <summary>
  /// Specifies whether SWAP charging is enabled or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SwapEnabled {
    get { if ((_hasBits0 & 4) != 0) { return swapEnabled_; } else { return SwapEnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      swapEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "swapEnabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "swapEnabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "swapAndDividendProfileId" field.</summary>
  public const int SwapAndDividendProfileIdFieldNumber = 5;
  private readonly static long SwapAndDividendProfileIdDefaultValue = 0L;

  private long swapAndDividendProfileId_;
  /// <summary>
  /// ID of Swap and Dividend profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SwapAndDividendProfileId {
    get { if ((_hasBits0 & 8) != 0) { return swapAndDividendProfileId_; } else { return SwapAndDividendProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      swapAndDividendProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "swapAndDividendProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapAndDividendProfileId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "swapAndDividendProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapAndDividendProfileId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "marginStopout" field.</summary>
  public const int MarginStopoutFieldNumber = 9;
  private readonly static double MarginStopoutDefaultValue = 0D;

  private double marginStopout_;
  /// <summary>
  /// Margin Stop Out percentage (e.g. 0.50 = 50%)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginStopout {
    get { if ((_hasBits0 & 16) != 0) { return marginStopout_; } else { return MarginStopoutDefaultValue; } }
    set {
      _hasBits0 |= 16;
      marginStopout_ = value;
    }
  }
  /// <summary>Gets whether the "marginStopout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginStopout {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "marginStopout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginStopout() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 11;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Group description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 12;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the last Group modification
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "priceStreamId" field.</summary>
  public const int PriceStreamIdFieldNumber = 13;
  private readonly static long PriceStreamIdDefaultValue = 0L;

  private long priceStreamId_;
  /// <summary>
  /// ID of the related Price Stream
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PriceStreamId {
    get { if ((_hasBits0 & 64) != 0) { return priceStreamId_; } else { return PriceStreamIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      priceStreamId_ = value;
    }
  }
  /// <summary>Gets whether the "priceStreamId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPriceStreamId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "priceStreamId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPriceStreamId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "deleted" field.</summary>
  public const int DeletedFieldNumber = 14;
  private readonly static bool DeletedDefaultValue = false;

  private bool deleted_;
  /// <summary>
  /// Specifies whether Group is deleted or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Deleted {
    get { if ((_hasBits0 & 128) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
    set {
      _hasBits0 |= 128;
      deleted_ = value;
    }
  }
  /// <summary>Gets whether the "deleted" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeleted {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "deleted" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeleted() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "hasAccess" field.</summary>
  public const int HasAccessFieldNumber = 15;
  private readonly static bool HasAccessDefaultValue = false;

  private bool hasAccess_;
  /// <summary>
  /// If TRUE then Manager has access to the Group and if FALSE then Manager doesn't have access to the Group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAccess {
    get { if ((_hasBits0 & 256) != 0) { return hasAccess_; } else { return HasAccessDefaultValue; } }
    set {
      _hasBits0 |= 256;
      hasAccess_ = value;
    }
  }
  /// <summary>Gets whether the "hasAccess" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHasAccess {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "hasAccess" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHasAccess() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "symbol" field.</summary>
  public const int SymbolFieldNumber = 17;
  private static readonly pb::FieldCodec<global::ProtoGroupSymbol> _repeated_symbol_codec
      = pb::FieldCodec.ForMessage(138, global::ProtoGroupSymbol.Parser);
  private readonly pbc::RepeatedField<global::ProtoGroupSymbol> symbol_ = new pbc::RepeatedField<global::ProtoGroupSymbol>();
  /// <summary>
  /// List of per Symbol settings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoGroupSymbol> Symbol {
    get { return symbol_; }
  }

  /// <summary>Field number for the "dynamicCommission" field.</summary>
  public const int DynamicCommissionFieldNumber = 18;
  private static readonly pb::FieldCodec<global::ProtoDynamicCommission> _repeated_dynamicCommission_codec
      = pb::FieldCodec.ForMessage(146, global::ProtoDynamicCommission.Parser);
  private readonly pbc::RepeatedField<global::ProtoDynamicCommission> dynamicCommission_ = new pbc::RepeatedField<global::ProtoDynamicCommission>();
  /// <summary>
  /// Parameters of the related Dynamic Commissions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoDynamicCommission> DynamicCommission {
    get { return dynamicCommission_; }
  }

  /// <summary>Field number for the "bonusConversionRate" field.</summary>
  public const int BonusConversionRateFieldNumber = 19;
  private readonly static long BonusConversionRateDefaultValue = 0L;

  private long bonusConversionRate_;
  /// <summary>
  /// Amount of traded lots to convert one Bonus USD into one deposit USD. Used if bonusConvertLots = 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BonusConversionRate {
    get { if ((_hasBits0 & 512) != 0) { return bonusConversionRate_; } else { return BonusConversionRateDefaultValue; } }
    set {
      _hasBits0 |= 512;
      bonusConversionRate_ = value;
    }
  }
  /// <summary>Gets whether the "bonusConversionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBonusConversionRate {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "bonusConversionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBonusConversionRate() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "bonusConvertLots" field.</summary>
  public const int BonusConvertLotsFieldNumber = 20;
  private readonly static bool BonusConvertLotsDefaultValue = false;

  private bool bonusConvertLots_;
  /// <summary>
  /// Specifies Bonus conversion strategy (1 – Lots into USD; 0 – USD volume into USD) Default: BONUS_CONVERSION_TYPE_USD
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BonusConvertLots {
    get { if ((_hasBits0 & 1024) != 0) { return bonusConvertLots_; } else { return BonusConvertLotsDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      bonusConvertLots_ = value;
    }
  }
  /// <summary>Gets whether the "bonusConvertLots" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBonusConvertLots {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "bonusConvertLots" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBonusConvertLots() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "bonusConversionRateLots" field.</summary>
  public const int BonusConversionRateLotsFieldNumber = 21;
  private readonly static long BonusConversionRateLotsDefaultValue = 0L;

  private long bonusConversionRateLots_;
  /// <summary>
  /// Amount of traded USD volume to convert one Bonus USD into one deposit USD. Used if bonusConvertLots = 0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BonusConversionRateLots {
    get { if ((_hasBits0 & 2048) != 0) { return bonusConversionRateLots_; } else { return BonusConversionRateLotsDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      bonusConversionRateLots_ = value;
    }
  }
  /// <summary>Gets whether the "bonusConversionRateLots" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBonusConversionRateLots {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "bonusConversionRateLots" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBonusConversionRateLots() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "isDealingDesk" field.</summary>
  public const int IsDealingDeskFieldNumber = 23;
  private readonly static bool IsDealingDeskDefaultValue = false;

  private bool isDealingDesk_;
  /// <summary>
  /// Specifies whether Group is Dealing Desk or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDealingDesk {
    get { if ((_hasBits0 & 4096) != 0) { return isDealingDesk_; } else { return IsDealingDeskDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      isDealingDesk_ = value;
    }
  }
  /// <summary>Gets whether the "isDealingDesk" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDealingDesk {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "isDealingDesk" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDealingDesk() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "maxAutoExecutionSizeProfileId" field.</summary>
  public const int MaxAutoExecutionSizeProfileIdFieldNumber = 24;
  private readonly static long MaxAutoExecutionSizeProfileIdDefaultValue = 0L;

  private long maxAutoExecutionSizeProfileId_;
  /// <summary>
  /// ID of Max Auto Execution Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxAutoExecutionSizeProfileId {
    get { if ((_hasBits0 & 8192) != 0) { return maxAutoExecutionSizeProfileId_; } else { return MaxAutoExecutionSizeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      maxAutoExecutionSizeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "maxAutoExecutionSizeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxAutoExecutionSizeProfileId {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "maxAutoExecutionSizeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxAutoExecutionSizeProfileId() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "blockedChannels" field.</summary>
  public const int BlockedChannelsFieldNumber = 25;
  private readonly static string BlockedChannelsDefaultValue = "";

  private string blockedChannels_;
  /// <summary>
  /// List of channels blocked for trading with ';' as a separator. Channel is sent with trading commands
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BlockedChannels {
    get { return blockedChannels_ ?? BlockedChannelsDefaultValue; }
    set {
      blockedChannels_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "blockedChannels" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBlockedChannels {
    get { return blockedChannels_ != null; }
  }
  /// <summary>Clears the value of the "blockedChannels" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBlockedChannels() {
    blockedChannels_ = null;
  }

  /// <summary>Field number for the "fairStopOut" field.</summary>
  public const int FairStopOutFieldNumber = 26;
  private readonly static bool FairStopOutDefaultValue = false;

  private bool fairStopOut_;
  /// <summary>
  /// If TRUE then Position is fully closed on Stop Out
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool FairStopOut {
    get { if ((_hasBits0 & 16384) != 0) { return fairStopOut_; } else { return FairStopOutDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      fairStopOut_ = value;
    }
  }
  /// <summary>Gets whether the "fairStopOut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFairStopOut {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "fairStopOut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFairStopOut() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "regionId" field.</summary>
  public const int RegionIdFieldNumber = 27;
  private readonly static long RegionIdDefaultValue = 0L;

  private long regionId_;
  /// <summary>
  /// ID of Region which will be used for GUI settings of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RegionId {
    get { if ((_hasBits0 & 32768) != 0) { return regionId_; } else { return RegionIdDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      regionId_ = value;
    }
  }
  /// <summary>Gets whether the "regionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRegionId {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "regionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegionId() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "copyDisabled" field.</summary>
  public const int CopyDisabledFieldNumber = 28;
  private readonly static bool CopyDisabledDefaultValue = false;

  private bool copyDisabled_;
  /// <summary>
  /// If TRUE then Traders of the Group are unable to create sub-accounts for Copy service
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CopyDisabled {
    get { if ((_hasBits0 & 65536) != 0) { return copyDisabled_; } else { return CopyDisabledDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      copyDisabled_ = value;
    }
  }
  /// <summary>Gets whether the "copyDisabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCopyDisabled {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "copyDisabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCopyDisabled() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "stopoutDisabled" field.</summary>
  public const int StopoutDisabledFieldNumber = 29;
  private readonly static bool StopoutDisabledDefaultValue = false;

  private bool stopoutDisabled_;
  /// <summary>
  /// If TRUE then Traders is not checked for breaching Stop-Out level
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool StopoutDisabled {
    get { if ((_hasBits0 & 131072) != 0) { return stopoutDisabled_; } else { return StopoutDisabledDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      stopoutDisabled_ = value;
    }
  }
  /// <summary>Gets whether the "stopoutDisabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopoutDisabled {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "stopoutDisabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopoutDisabled() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "inactivityGracePeriod" field.</summary>
  public const int InactivityGracePeriodFieldNumber = 30;
  private readonly static int InactivityGracePeriodDefaultValue = 0;

  private int inactivityGracePeriod_;
  /// <summary>
  /// Grace period in days during which an Inactivity Fee is not charged for an Account since last filled Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int InactivityGracePeriod {
    get { if ((_hasBits0 & 262144) != 0) { return inactivityGracePeriod_; } else { return InactivityGracePeriodDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      inactivityGracePeriod_ = value;
    }
  }
  /// <summary>Gets whether the "inactivityGracePeriod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInactivityGracePeriod {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "inactivityGracePeriod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInactivityGracePeriod() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "inactivityChargePeriod" field.</summary>
  public const int InactivityChargePeriodFieldNumber = 31;
  private readonly static int InactivityChargePeriodDefaultValue = 0;

  private int inactivityChargePeriod_;
  /// <summary>
  /// Period in days after which an Inactivity Fee is charged
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int InactivityChargePeriod {
    get { if ((_hasBits0 & 524288) != 0) { return inactivityChargePeriod_; } else { return InactivityChargePeriodDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      inactivityChargePeriod_ = value;
    }
  }
  /// <summary>Gets whether the "inactivityChargePeriod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInactivityChargePeriod {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "inactivityChargePeriod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInactivityChargePeriod() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "inactivityFeeAmount" field.</summary>
  public const int InactivityFeeAmountFieldNumber = 32;
  private readonly static int InactivityFeeAmountDefaultValue = 0;

  private int inactivityFeeAmount_;
  /// <summary>
  /// Inactivity Fee amount in cents, specified in USD and converted to Deposit currency of an Account
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int InactivityFeeAmount {
    get { if ((_hasBits0 & 1048576) != 0) { return inactivityFeeAmount_; } else { return InactivityFeeAmountDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      inactivityFeeAmount_ = value;
    }
  }
  /// <summary>Gets whether the "inactivityFeeAmount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInactivityFeeAmount {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "inactivityFeeAmount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInactivityFeeAmount() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "copyProvidingDisabled" field.</summary>
  public const int CopyProvidingDisabledFieldNumber = 33;
  private readonly static bool CopyProvidingDisabledDefaultValue = false;

  private bool copyProvidingDisabled_;
  /// <summary>
  /// If TRUE then Traders of the Group are unable to become Copy Provider. Logic is on Copy side Default: FALSE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CopyProvidingDisabled {
    get { if ((_hasBits0 & 2097152) != 0) { return copyProvidingDisabled_; } else { return CopyProvidingDisabledDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      copyProvidingDisabled_ = value;
    }
  }
  /// <summary>Gets whether the "copyProvidingDisabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCopyProvidingDisabled {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "copyProvidingDisabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCopyProvidingDisabled() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "legalEntityId" field.</summary>
  public const int LegalEntityIdFieldNumber = 35;
  private readonly static long LegalEntityIdDefaultValue = 0L;

  private long legalEntityId_;
  /// <summary>
  /// ID of Legal Entity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LegalEntityId {
    get { if ((_hasBits0 & 4194304) != 0) { return legalEntityId_; } else { return LegalEntityIdDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      legalEntityId_ = value;
    }
  }
  /// <summary>Gets whether the "legalEntityId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLegalEntityId {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "legalEntityId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLegalEntityId() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "disablePasswordLogin" field.</summary>
  public const int DisablePasswordLoginFieldNumber = 36;
  private readonly static bool DisablePasswordLoginDefaultValue = false;

  private bool disablePasswordLogin_;
  /// <summary>
  /// If TRUE then login by a password for Accounts in this Group is disabled. This password is not used to sign in to the trading applications. cTrader ID is used for this purpose. Password is only used for authenticating FIX API sessions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DisablePasswordLogin {
    get { if ((_hasBits0 & 8388608) != 0) { return disablePasswordLogin_; } else { return DisablePasswordLoginDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      disablePasswordLogin_ = value;
    }
  }
  /// <summary>Gets whether the "disablePasswordLogin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisablePasswordLogin {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "disablePasswordLogin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisablePasswordLogin() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "allowWorseGSL" field.</summary>
  public const int AllowWorseGSLFieldNumber = 37;
  private readonly static bool AllowWorseGSLDefaultValue = true;

  private bool allowWorseGSL_;
  /// <summary>
  /// If TRUE then Traders are allowed to increase risk for Positions with Guaranteed Stop Loss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AllowWorseGSL {
    get { if ((_hasBits0 & 16777216) != 0) { return allowWorseGSL_; } else { return AllowWorseGSLDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      allowWorseGSL_ = value;
    }
  }
  /// <summary>Gets whether the "allowWorseGSL" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllowWorseGSL {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "allowWorseGSL" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllowWorseGSL() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "isFakeSpreadBetting" field.</summary>
  public const int IsFakeSpreadBettingFieldNumber = 38;
  private readonly static bool IsFakeSpreadBettingDefaultValue = false;

  private bool isFakeSpreadBetting_;
  /// <summary>
  /// Account type is treated as Spread Betting (ProtoAccountType=SPREAD_BETTING) if Group of the Trader has isFakeSpreadBetting = TRUE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsFakeSpreadBetting {
    get { if ((_hasBits0 & 33554432) != 0) { return isFakeSpreadBetting_; } else { return IsFakeSpreadBettingDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      isFakeSpreadBetting_ = value;
    }
  }
  /// <summary>Gets whether the "isFakeSpreadBetting" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsFakeSpreadBetting {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "isFakeSpreadBetting" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsFakeSpreadBetting() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "negativeBalanceProtection" field.</summary>
  public const int NegativeBalanceProtectionFieldNumber = 39;
  private readonly static bool NegativeBalanceProtectionDefaultValue = false;

  private bool negativeBalanceProtection_;
  /// <summary>
  /// IF TRUE then will get deposited to his balance = 0 when his balance becomes negative
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NegativeBalanceProtection {
    get { if ((_hasBits0 & 67108864) != 0) { return negativeBalanceProtection_; } else { return NegativeBalanceProtectionDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      negativeBalanceProtection_ = value;
    }
  }
  /// <summary>Gets whether the "negativeBalanceProtection" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNegativeBalanceProtection {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "negativeBalanceProtection" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNegativeBalanceProtection() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "allowTraderChangeSO" field.</summary>
  public const int AllowTraderChangeSOFieldNumber = 40;
  private readonly static bool AllowTraderChangeSODefaultValue = false;

  private bool allowTraderChangeSO_;
  /// <summary>
  /// If FALSE trader can not change their Stop Out strategy. Null value in ProtoCrudGroupReq is interpreted as keeping the current value of allowTraderChangeSO
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AllowTraderChangeSO {
    get { if ((_hasBits0 & 134217728) != 0) { return allowTraderChangeSO_; } else { return AllowTraderChangeSODefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      allowTraderChangeSO_ = value;
    }
  }
  /// <summary>Gets whether the "allowTraderChangeSO" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAllowTraderChangeSO {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "allowTraderChangeSO" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAllowTraderChangeSO() {
    _hasBits0 &= ~134217728;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoGroup);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoGroup other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GroupId != other.GroupId) return false;
    if (Name != other.Name) return false;
    if (Enabled != other.Enabled) return false;
    if (SwapEnabled != other.SwapEnabled) return false;
    if (SwapAndDividendProfileId != other.SwapAndDividendProfileId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginStopout, other.MarginStopout)) return false;
    if (Description != other.Description) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (PriceStreamId != other.PriceStreamId) return false;
    if (Deleted != other.Deleted) return false;
    if (HasAccess != other.HasAccess) return false;
    if(!symbol_.Equals(other.symbol_)) return false;
    if(!dynamicCommission_.Equals(other.dynamicCommission_)) return false;
    if (BonusConversionRate != other.BonusConversionRate) return false;
    if (BonusConvertLots != other.BonusConvertLots) return false;
    if (BonusConversionRateLots != other.BonusConversionRateLots) return false;
    if (IsDealingDesk != other.IsDealingDesk) return false;
    if (MaxAutoExecutionSizeProfileId != other.MaxAutoExecutionSizeProfileId) return false;
    if (BlockedChannels != other.BlockedChannels) return false;
    if (FairStopOut != other.FairStopOut) return false;
    if (RegionId != other.RegionId) return false;
    if (CopyDisabled != other.CopyDisabled) return false;
    if (StopoutDisabled != other.StopoutDisabled) return false;
    if (InactivityGracePeriod != other.InactivityGracePeriod) return false;
    if (InactivityChargePeriod != other.InactivityChargePeriod) return false;
    if (InactivityFeeAmount != other.InactivityFeeAmount) return false;
    if (CopyProvidingDisabled != other.CopyProvidingDisabled) return false;
    if (LegalEntityId != other.LegalEntityId) return false;
    if (DisablePasswordLogin != other.DisablePasswordLogin) return false;
    if (AllowWorseGSL != other.AllowWorseGSL) return false;
    if (IsFakeSpreadBetting != other.IsFakeSpreadBetting) return false;
    if (NegativeBalanceProtection != other.NegativeBalanceProtection) return false;
    if (AllowTraderChangeSO != other.AllowTraderChangeSO) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGroupId) hash ^= GroupId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasSwapEnabled) hash ^= SwapEnabled.GetHashCode();
    if (HasSwapAndDividendProfileId) hash ^= SwapAndDividendProfileId.GetHashCode();
    if (HasMarginStopout) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginStopout);
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasPriceStreamId) hash ^= PriceStreamId.GetHashCode();
    if (HasDeleted) hash ^= Deleted.GetHashCode();
    if (HasHasAccess) hash ^= HasAccess.GetHashCode();
    hash ^= symbol_.GetHashCode();
    hash ^= dynamicCommission_.GetHashCode();
    if (HasBonusConversionRate) hash ^= BonusConversionRate.GetHashCode();
    if (HasBonusConvertLots) hash ^= BonusConvertLots.GetHashCode();
    if (HasBonusConversionRateLots) hash ^= BonusConversionRateLots.GetHashCode();
    if (HasIsDealingDesk) hash ^= IsDealingDesk.GetHashCode();
    if (HasMaxAutoExecutionSizeProfileId) hash ^= MaxAutoExecutionSizeProfileId.GetHashCode();
    if (HasBlockedChannels) hash ^= BlockedChannels.GetHashCode();
    if (HasFairStopOut) hash ^= FairStopOut.GetHashCode();
    if (HasRegionId) hash ^= RegionId.GetHashCode();
    if (HasCopyDisabled) hash ^= CopyDisabled.GetHashCode();
    if (HasStopoutDisabled) hash ^= StopoutDisabled.GetHashCode();
    if (HasInactivityGracePeriod) hash ^= InactivityGracePeriod.GetHashCode();
    if (HasInactivityChargePeriod) hash ^= InactivityChargePeriod.GetHashCode();
    if (HasInactivityFeeAmount) hash ^= InactivityFeeAmount.GetHashCode();
    if (HasCopyProvidingDisabled) hash ^= CopyProvidingDisabled.GetHashCode();
    if (HasLegalEntityId) hash ^= LegalEntityId.GetHashCode();
    if (HasDisablePasswordLogin) hash ^= DisablePasswordLogin.GetHashCode();
    if (HasAllowWorseGSL) hash ^= AllowWorseGSL.GetHashCode();
    if (HasIsFakeSpreadBetting) hash ^= IsFakeSpreadBetting.GetHashCode();
    if (HasNegativeBalanceProtection) hash ^= NegativeBalanceProtection.GetHashCode();
    if (HasAllowTraderChangeSO) hash ^= AllowTraderChangeSO.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGroupId) {
      output.WriteRawTag(8);
      output.WriteInt64(GroupId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (HasSwapEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(SwapEnabled);
    }
    if (HasSwapAndDividendProfileId) {
      output.WriteRawTag(40);
      output.WriteInt64(SwapAndDividendProfileId);
    }
    if (HasMarginStopout) {
      output.WriteRawTag(73);
      output.WriteDouble(MarginStopout);
    }
    if (HasDescription) {
      output.WriteRawTag(90);
      output.WriteString(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(96);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasPriceStreamId) {
      output.WriteRawTag(104);
      output.WriteInt64(PriceStreamId);
    }
    if (HasDeleted) {
      output.WriteRawTag(112);
      output.WriteBool(Deleted);
    }
    if (HasHasAccess) {
      output.WriteRawTag(120);
      output.WriteBool(HasAccess);
    }
    symbol_.WriteTo(output, _repeated_symbol_codec);
    dynamicCommission_.WriteTo(output, _repeated_dynamicCommission_codec);
    if (HasBonusConversionRate) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(BonusConversionRate);
    }
    if (HasBonusConvertLots) {
      output.WriteRawTag(160, 1);
      output.WriteBool(BonusConvertLots);
    }
    if (HasBonusConversionRateLots) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(BonusConversionRateLots);
    }
    if (HasIsDealingDesk) {
      output.WriteRawTag(184, 1);
      output.WriteBool(IsDealingDesk);
    }
    if (HasMaxAutoExecutionSizeProfileId) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(MaxAutoExecutionSizeProfileId);
    }
    if (HasBlockedChannels) {
      output.WriteRawTag(202, 1);
      output.WriteString(BlockedChannels);
    }
    if (HasFairStopOut) {
      output.WriteRawTag(208, 1);
      output.WriteBool(FairStopOut);
    }
    if (HasRegionId) {
      output.WriteRawTag(216, 1);
      output.WriteInt64(RegionId);
    }
    if (HasCopyDisabled) {
      output.WriteRawTag(224, 1);
      output.WriteBool(CopyDisabled);
    }
    if (HasStopoutDisabled) {
      output.WriteRawTag(232, 1);
      output.WriteBool(StopoutDisabled);
    }
    if (HasInactivityGracePeriod) {
      output.WriteRawTag(240, 1);
      output.WriteInt32(InactivityGracePeriod);
    }
    if (HasInactivityChargePeriod) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(InactivityChargePeriod);
    }
    if (HasInactivityFeeAmount) {
      output.WriteRawTag(128, 2);
      output.WriteInt32(InactivityFeeAmount);
    }
    if (HasCopyProvidingDisabled) {
      output.WriteRawTag(136, 2);
      output.WriteBool(CopyProvidingDisabled);
    }
    if (HasLegalEntityId) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(LegalEntityId);
    }
    if (HasDisablePasswordLogin) {
      output.WriteRawTag(160, 2);
      output.WriteBool(DisablePasswordLogin);
    }
    if (HasAllowWorseGSL) {
      output.WriteRawTag(168, 2);
      output.WriteBool(AllowWorseGSL);
    }
    if (HasIsFakeSpreadBetting) {
      output.WriteRawTag(176, 2);
      output.WriteBool(IsFakeSpreadBetting);
    }
    if (HasNegativeBalanceProtection) {
      output.WriteRawTag(184, 2);
      output.WriteBool(NegativeBalanceProtection);
    }
    if (HasAllowTraderChangeSO) {
      output.WriteRawTag(192, 2);
      output.WriteBool(AllowTraderChangeSO);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGroupId) {
      output.WriteRawTag(8);
      output.WriteInt64(GroupId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (HasSwapEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(SwapEnabled);
    }
    if (HasSwapAndDividendProfileId) {
      output.WriteRawTag(40);
      output.WriteInt64(SwapAndDividendProfileId);
    }
    if (HasMarginStopout) {
      output.WriteRawTag(73);
      output.WriteDouble(MarginStopout);
    }
    if (HasDescription) {
      output.WriteRawTag(90);
      output.WriteString(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(96);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasPriceStreamId) {
      output.WriteRawTag(104);
      output.WriteInt64(PriceStreamId);
    }
    if (HasDeleted) {
      output.WriteRawTag(112);
      output.WriteBool(Deleted);
    }
    if (HasHasAccess) {
      output.WriteRawTag(120);
      output.WriteBool(HasAccess);
    }
    symbol_.WriteTo(ref output, _repeated_symbol_codec);
    dynamicCommission_.WriteTo(ref output, _repeated_dynamicCommission_codec);
    if (HasBonusConversionRate) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(BonusConversionRate);
    }
    if (HasBonusConvertLots) {
      output.WriteRawTag(160, 1);
      output.WriteBool(BonusConvertLots);
    }
    if (HasBonusConversionRateLots) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(BonusConversionRateLots);
    }
    if (HasIsDealingDesk) {
      output.WriteRawTag(184, 1);
      output.WriteBool(IsDealingDesk);
    }
    if (HasMaxAutoExecutionSizeProfileId) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(MaxAutoExecutionSizeProfileId);
    }
    if (HasBlockedChannels) {
      output.WriteRawTag(202, 1);
      output.WriteString(BlockedChannels);
    }
    if (HasFairStopOut) {
      output.WriteRawTag(208, 1);
      output.WriteBool(FairStopOut);
    }
    if (HasRegionId) {
      output.WriteRawTag(216, 1);
      output.WriteInt64(RegionId);
    }
    if (HasCopyDisabled) {
      output.WriteRawTag(224, 1);
      output.WriteBool(CopyDisabled);
    }
    if (HasStopoutDisabled) {
      output.WriteRawTag(232, 1);
      output.WriteBool(StopoutDisabled);
    }
    if (HasInactivityGracePeriod) {
      output.WriteRawTag(240, 1);
      output.WriteInt32(InactivityGracePeriod);
    }
    if (HasInactivityChargePeriod) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(InactivityChargePeriod);
    }
    if (HasInactivityFeeAmount) {
      output.WriteRawTag(128, 2);
      output.WriteInt32(InactivityFeeAmount);
    }
    if (HasCopyProvidingDisabled) {
      output.WriteRawTag(136, 2);
      output.WriteBool(CopyProvidingDisabled);
    }
    if (HasLegalEntityId) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(LegalEntityId);
    }
    if (HasDisablePasswordLogin) {
      output.WriteRawTag(160, 2);
      output.WriteBool(DisablePasswordLogin);
    }
    if (HasAllowWorseGSL) {
      output.WriteRawTag(168, 2);
      output.WriteBool(AllowWorseGSL);
    }
    if (HasIsFakeSpreadBetting) {
      output.WriteRawTag(176, 2);
      output.WriteBool(IsFakeSpreadBetting);
    }
    if (HasNegativeBalanceProtection) {
      output.WriteRawTag(184, 2);
      output.WriteBool(NegativeBalanceProtection);
    }
    if (HasAllowTraderChangeSO) {
      output.WriteRawTag(192, 2);
      output.WriteBool(AllowTraderChangeSO);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasSwapEnabled) {
      size += 1 + 1;
    }
    if (HasSwapAndDividendProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwapAndDividendProfileId);
    }
    if (HasMarginStopout) {
      size += 1 + 8;
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasPriceStreamId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PriceStreamId);
    }
    if (HasDeleted) {
      size += 1 + 1;
    }
    if (HasHasAccess) {
      size += 1 + 1;
    }
    size += symbol_.CalculateSize(_repeated_symbol_codec);
    size += dynamicCommission_.CalculateSize(_repeated_dynamicCommission_codec);
    if (HasBonusConversionRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(BonusConversionRate);
    }
    if (HasBonusConvertLots) {
      size += 2 + 1;
    }
    if (HasBonusConversionRateLots) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(BonusConversionRateLots);
    }
    if (HasIsDealingDesk) {
      size += 2 + 1;
    }
    if (HasMaxAutoExecutionSizeProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxAutoExecutionSizeProfileId);
    }
    if (HasBlockedChannels) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BlockedChannels);
    }
    if (HasFairStopOut) {
      size += 2 + 1;
    }
    if (HasRegionId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegionId);
    }
    if (HasCopyDisabled) {
      size += 2 + 1;
    }
    if (HasStopoutDisabled) {
      size += 2 + 1;
    }
    if (HasInactivityGracePeriod) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(InactivityGracePeriod);
    }
    if (HasInactivityChargePeriod) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(InactivityChargePeriod);
    }
    if (HasInactivityFeeAmount) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(InactivityFeeAmount);
    }
    if (HasCopyProvidingDisabled) {
      size += 2 + 1;
    }
    if (HasLegalEntityId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LegalEntityId);
    }
    if (HasDisablePasswordLogin) {
      size += 2 + 1;
    }
    if (HasAllowWorseGSL) {
      size += 2 + 1;
    }
    if (HasIsFakeSpreadBetting) {
      size += 2 + 1;
    }
    if (HasNegativeBalanceProtection) {
      size += 2 + 1;
    }
    if (HasAllowTraderChangeSO) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoGroup other) {
    if (other == null) {
      return;
    }
    if (other.HasGroupId) {
      GroupId = other.GroupId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasSwapEnabled) {
      SwapEnabled = other.SwapEnabled;
    }
    if (other.HasSwapAndDividendProfileId) {
      SwapAndDividendProfileId = other.SwapAndDividendProfileId;
    }
    if (other.HasMarginStopout) {
      MarginStopout = other.MarginStopout;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasPriceStreamId) {
      PriceStreamId = other.PriceStreamId;
    }
    if (other.HasDeleted) {
      Deleted = other.Deleted;
    }
    if (other.HasHasAccess) {
      HasAccess = other.HasAccess;
    }
    symbol_.Add(other.symbol_);
    dynamicCommission_.Add(other.dynamicCommission_);
    if (other.HasBonusConversionRate) {
      BonusConversionRate = other.BonusConversionRate;
    }
    if (other.HasBonusConvertLots) {
      BonusConvertLots = other.BonusConvertLots;
    }
    if (other.HasBonusConversionRateLots) {
      BonusConversionRateLots = other.BonusConversionRateLots;
    }
    if (other.HasIsDealingDesk) {
      IsDealingDesk = other.IsDealingDesk;
    }
    if (other.HasMaxAutoExecutionSizeProfileId) {
      MaxAutoExecutionSizeProfileId = other.MaxAutoExecutionSizeProfileId;
    }
    if (other.HasBlockedChannels) {
      BlockedChannels = other.BlockedChannels;
    }
    if (other.HasFairStopOut) {
      FairStopOut = other.FairStopOut;
    }
    if (other.HasRegionId) {
      RegionId = other.RegionId;
    }
    if (other.HasCopyDisabled) {
      CopyDisabled = other.CopyDisabled;
    }
    if (other.HasStopoutDisabled) {
      StopoutDisabled = other.StopoutDisabled;
    }
    if (other.HasInactivityGracePeriod) {
      InactivityGracePeriod = other.InactivityGracePeriod;
    }
    if (other.HasInactivityChargePeriod) {
      InactivityChargePeriod = other.InactivityChargePeriod;
    }
    if (other.HasInactivityFeeAmount) {
      InactivityFeeAmount = other.InactivityFeeAmount;
    }
    if (other.HasCopyProvidingDisabled) {
      CopyProvidingDisabled = other.CopyProvidingDisabled;
    }
    if (other.HasLegalEntityId) {
      LegalEntityId = other.LegalEntityId;
    }
    if (other.HasDisablePasswordLogin) {
      DisablePasswordLogin = other.DisablePasswordLogin;
    }
    if (other.HasAllowWorseGSL) {
      AllowWorseGSL = other.AllowWorseGSL;
    }
    if (other.HasIsFakeSpreadBetting) {
      IsFakeSpreadBetting = other.IsFakeSpreadBetting;
    }
    if (other.HasNegativeBalanceProtection) {
      NegativeBalanceProtection = other.NegativeBalanceProtection;
    }
    if (other.HasAllowTraderChangeSO) {
      AllowTraderChangeSO = other.AllowTraderChangeSO;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GroupId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 32: {
          SwapEnabled = input.ReadBool();
          break;
        }
        case 40: {
          SwapAndDividendProfileId = input.ReadInt64();
          break;
        }
        case 73: {
          MarginStopout = input.ReadDouble();
          break;
        }
        case 90: {
          Description = input.ReadString();
          break;
        }
        case 96: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 104: {
          PriceStreamId = input.ReadInt64();
          break;
        }
        case 112: {
          Deleted = input.ReadBool();
          break;
        }
        case 120: {
          HasAccess = input.ReadBool();
          break;
        }
        case 138: {
          symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
          break;
        }
        case 146: {
          dynamicCommission_.AddEntriesFrom(input, _repeated_dynamicCommission_codec);
          break;
        }
        case 152: {
          BonusConversionRate = input.ReadInt64();
          break;
        }
        case 160: {
          BonusConvertLots = input.ReadBool();
          break;
        }
        case 168: {
          BonusConversionRateLots = input.ReadInt64();
          break;
        }
        case 184: {
          IsDealingDesk = input.ReadBool();
          break;
        }
        case 192: {
          MaxAutoExecutionSizeProfileId = input.ReadInt64();
          break;
        }
        case 202: {
          BlockedChannels = input.ReadString();
          break;
        }
        case 208: {
          FairStopOut = input.ReadBool();
          break;
        }
        case 216: {
          RegionId = input.ReadInt64();
          break;
        }
        case 224: {
          CopyDisabled = input.ReadBool();
          break;
        }
        case 232: {
          StopoutDisabled = input.ReadBool();
          break;
        }
        case 240: {
          InactivityGracePeriod = input.ReadInt32();
          break;
        }
        case 248: {
          InactivityChargePeriod = input.ReadInt32();
          break;
        }
        case 256: {
          InactivityFeeAmount = input.ReadInt32();
          break;
        }
        case 264: {
          CopyProvidingDisabled = input.ReadBool();
          break;
        }
        case 280: {
          LegalEntityId = input.ReadInt64();
          break;
        }
        case 288: {
          DisablePasswordLogin = input.ReadBool();
          break;
        }
        case 296: {
          AllowWorseGSL = input.ReadBool();
          break;
        }
        case 304: {
          IsFakeSpreadBetting = input.ReadBool();
          break;
        }
        case 312: {
          NegativeBalanceProtection = input.ReadBool();
          break;
        }
        case 320: {
          AllowTraderChangeSO = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          GroupId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 32: {
          SwapEnabled = input.ReadBool();
          break;
        }
        case 40: {
          SwapAndDividendProfileId = input.ReadInt64();
          break;
        }
        case 73: {
          MarginStopout = input.ReadDouble();
          break;
        }
        case 90: {
          Description = input.ReadString();
          break;
        }
        case 96: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 104: {
          PriceStreamId = input.ReadInt64();
          break;
        }
        case 112: {
          Deleted = input.ReadBool();
          break;
        }
        case 120: {
          HasAccess = input.ReadBool();
          break;
        }
        case 138: {
          symbol_.AddEntriesFrom(ref input, _repeated_symbol_codec);
          break;
        }
        case 146: {
          dynamicCommission_.AddEntriesFrom(ref input, _repeated_dynamicCommission_codec);
          break;
        }
        case 152: {
          BonusConversionRate = input.ReadInt64();
          break;
        }
        case 160: {
          BonusConvertLots = input.ReadBool();
          break;
        }
        case 168: {
          BonusConversionRateLots = input.ReadInt64();
          break;
        }
        case 184: {
          IsDealingDesk = input.ReadBool();
          break;
        }
        case 192: {
          MaxAutoExecutionSizeProfileId = input.ReadInt64();
          break;
        }
        case 202: {
          BlockedChannels = input.ReadString();
          break;
        }
        case 208: {
          FairStopOut = input.ReadBool();
          break;
        }
        case 216: {
          RegionId = input.ReadInt64();
          break;
        }
        case 224: {
          CopyDisabled = input.ReadBool();
          break;
        }
        case 232: {
          StopoutDisabled = input.ReadBool();
          break;
        }
        case 240: {
          InactivityGracePeriod = input.ReadInt32();
          break;
        }
        case 248: {
          InactivityChargePeriod = input.ReadInt32();
          break;
        }
        case 256: {
          InactivityFeeAmount = input.ReadInt32();
          break;
        }
        case 264: {
          CopyProvidingDisabled = input.ReadBool();
          break;
        }
        case 280: {
          LegalEntityId = input.ReadInt64();
          break;
        }
        case 288: {
          DisablePasswordLogin = input.ReadBool();
          break;
        }
        case 296: {
          AllowWorseGSL = input.ReadBool();
          break;
        }
        case 304: {
          IsFakeSpreadBetting = input.ReadBool();
          break;
        }
        case 312: {
          NegativeBalanceProtection = input.ReadBool();
          break;
        }
        case 320: {
          AllowTraderChangeSO = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Group Symbol entity - per Symbol settings inside a Group
/// </summary>
public sealed partial class ProtoGroupSymbol : pb::IMessage<ProtoGroupSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoGroupSymbol> _parser = new pb::MessageParser<ProtoGroupSymbol>(() => new ProtoGroupSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoGroupSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGroupSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGroupSymbol(ProtoGroupSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    enabled_ = other.enabled_;
    leverageId_ = other.leverageId_;
    gslScheduleId_ = other.gslScheduleId_;
    commissionProfileId_ = other.commissionProfileId_;
    volumeProfileId_ = other.volumeProfileId_;
    executionProfileId_ = other.executionProfileId_;
    protectionProfileId_ = other.protectionProfileId_;
    swapFreeProfileId_ = other.swapFreeProfileId_;
    tradeNotificationProfileId_ = other.tradeNotificationProfileId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGroupSymbol Clone() {
    return new ProtoGroupSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// ID of the Group Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 2;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// Specifies if Symbol is available for the Traders of the Group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 2) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "leverageId" field.</summary>
  public const int LeverageIdFieldNumber = 32;
  private readonly static ulong LeverageIdDefaultValue = 0UL;

  private ulong leverageId_;
  /// <summary>
  /// ID of Dynamic Leverage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LeverageId {
    get { if ((_hasBits0 & 4) != 0) { return leverageId_; } else { return LeverageIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      leverageId_ = value;
    }
  }
  /// <summary>Gets whether the "leverageId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeverageId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "leverageId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeverageId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "gslScheduleId" field.</summary>
  public const int GslScheduleIdFieldNumber = 35;
  private readonly static ulong GslScheduleIdDefaultValue = 0UL;

  private ulong gslScheduleId_;
  /// <summary>
  /// ID of GSL (Guaranteed Stop Loss) Schedule
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong GslScheduleId {
    get { if ((_hasBits0 & 8) != 0) { return gslScheduleId_; } else { return GslScheduleIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      gslScheduleId_ = value;
    }
  }
  /// <summary>Gets whether the "gslScheduleId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGslScheduleId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "gslScheduleId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGslScheduleId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "commissionProfileId" field.</summary>
  public const int CommissionProfileIdFieldNumber = 42;
  private readonly static long CommissionProfileIdDefaultValue = 0L;

  private long commissionProfileId_;
  /// <summary>
  /// ID of Commission Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CommissionProfileId {
    get { if ((_hasBits0 & 16) != 0) { return commissionProfileId_; } else { return CommissionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      commissionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "commissionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommissionProfileId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "commissionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommissionProfileId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "volumeProfileId" field.</summary>
  public const int VolumeProfileIdFieldNumber = 43;
  private readonly static long VolumeProfileIdDefaultValue = 0L;

  private long volumeProfileId_;
  /// <summary>
  /// ID of Volume Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long VolumeProfileId {
    get { if ((_hasBits0 & 32) != 0) { return volumeProfileId_; } else { return VolumeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      volumeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "volumeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolumeProfileId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "volumeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolumeProfileId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "executionProfileId" field.</summary>
  public const int ExecutionProfileIdFieldNumber = 44;
  private readonly static long ExecutionProfileIdDefaultValue = 0L;

  private long executionProfileId_;
  /// <summary>
  /// ID of Execution Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutionProfileId {
    get { if ((_hasBits0 & 64) != 0) { return executionProfileId_; } else { return ExecutionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      executionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "executionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionProfileId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "executionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionProfileId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "protectionProfileId" field.</summary>
  public const int ProtectionProfileIdFieldNumber = 45;
  private readonly static long ProtectionProfileIdDefaultValue = 0L;

  private long protectionProfileId_;
  /// <summary>
  /// ID of Protection Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ProtectionProfileId {
    get { if ((_hasBits0 & 128) != 0) { return protectionProfileId_; } else { return ProtectionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      protectionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "protectionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProtectionProfileId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "protectionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProtectionProfileId() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "swapFreeProfileId" field.</summary>
  public const int SwapFreeProfileIdFieldNumber = 46;
  private readonly static long SwapFreeProfileIdDefaultValue = 0L;

  private long swapFreeProfileId_;
  /// <summary>
  /// ID of Swap Free Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SwapFreeProfileId {
    get { if ((_hasBits0 & 256) != 0) { return swapFreeProfileId_; } else { return SwapFreeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 256;
      swapFreeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "swapFreeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapFreeProfileId {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "swapFreeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapFreeProfileId() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "tradeNotificationProfileId" field.</summary>
  public const int TradeNotificationProfileIdFieldNumber = 47;
  private readonly static long TradeNotificationProfileIdDefaultValue = 0L;

  private long tradeNotificationProfileId_;
  /// <summary>
  /// ID of Trade Notification Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TradeNotificationProfileId {
    get { if ((_hasBits0 & 512) != 0) { return tradeNotificationProfileId_; } else { return TradeNotificationProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 512;
      tradeNotificationProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "tradeNotificationProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeNotificationProfileId {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "tradeNotificationProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeNotificationProfileId() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoGroupSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoGroupSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (Enabled != other.Enabled) return false;
    if (LeverageId != other.LeverageId) return false;
    if (GslScheduleId != other.GslScheduleId) return false;
    if (CommissionProfileId != other.CommissionProfileId) return false;
    if (VolumeProfileId != other.VolumeProfileId) return false;
    if (ExecutionProfileId != other.ExecutionProfileId) return false;
    if (ProtectionProfileId != other.ProtectionProfileId) return false;
    if (SwapFreeProfileId != other.SwapFreeProfileId) return false;
    if (TradeNotificationProfileId != other.TradeNotificationProfileId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasLeverageId) hash ^= LeverageId.GetHashCode();
    if (HasGslScheduleId) hash ^= GslScheduleId.GetHashCode();
    if (HasCommissionProfileId) hash ^= CommissionProfileId.GetHashCode();
    if (HasVolumeProfileId) hash ^= VolumeProfileId.GetHashCode();
    if (HasExecutionProfileId) hash ^= ExecutionProfileId.GetHashCode();
    if (HasProtectionProfileId) hash ^= ProtectionProfileId.GetHashCode();
    if (HasSwapFreeProfileId) hash ^= SwapFreeProfileId.GetHashCode();
    if (HasTradeNotificationProfileId) hash ^= TradeNotificationProfileId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
    if (HasLeverageId) {
      output.WriteRawTag(128, 2);
      output.WriteUInt64(LeverageId);
    }
    if (HasGslScheduleId) {
      output.WriteRawTag(152, 2);
      output.WriteUInt64(GslScheduleId);
    }
    if (HasCommissionProfileId) {
      output.WriteRawTag(208, 2);
      output.WriteInt64(CommissionProfileId);
    }
    if (HasVolumeProfileId) {
      output.WriteRawTag(216, 2);
      output.WriteInt64(VolumeProfileId);
    }
    if (HasExecutionProfileId) {
      output.WriteRawTag(224, 2);
      output.WriteInt64(ExecutionProfileId);
    }
    if (HasProtectionProfileId) {
      output.WriteRawTag(232, 2);
      output.WriteInt64(ProtectionProfileId);
    }
    if (HasSwapFreeProfileId) {
      output.WriteRawTag(240, 2);
      output.WriteInt64(SwapFreeProfileId);
    }
    if (HasTradeNotificationProfileId) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(TradeNotificationProfileId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasEnabled) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
    if (HasLeverageId) {
      output.WriteRawTag(128, 2);
      output.WriteUInt64(LeverageId);
    }
    if (HasGslScheduleId) {
      output.WriteRawTag(152, 2);
      output.WriteUInt64(GslScheduleId);
    }
    if (HasCommissionProfileId) {
      output.WriteRawTag(208, 2);
      output.WriteInt64(CommissionProfileId);
    }
    if (HasVolumeProfileId) {
      output.WriteRawTag(216, 2);
      output.WriteInt64(VolumeProfileId);
    }
    if (HasExecutionProfileId) {
      output.WriteRawTag(224, 2);
      output.WriteInt64(ExecutionProfileId);
    }
    if (HasProtectionProfileId) {
      output.WriteRawTag(232, 2);
      output.WriteInt64(ProtectionProfileId);
    }
    if (HasSwapFreeProfileId) {
      output.WriteRawTag(240, 2);
      output.WriteInt64(SwapFreeProfileId);
    }
    if (HasTradeNotificationProfileId) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(TradeNotificationProfileId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasLeverageId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LeverageId);
    }
    if (HasGslScheduleId) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(GslScheduleId);
    }
    if (HasCommissionProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(CommissionProfileId);
    }
    if (HasVolumeProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(VolumeProfileId);
    }
    if (HasExecutionProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExecutionProfileId);
    }
    if (HasProtectionProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ProtectionProfileId);
    }
    if (HasSwapFreeProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(SwapFreeProfileId);
    }
    if (HasTradeNotificationProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(TradeNotificationProfileId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoGroupSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasLeverageId) {
      LeverageId = other.LeverageId;
    }
    if (other.HasGslScheduleId) {
      GslScheduleId = other.GslScheduleId;
    }
    if (other.HasCommissionProfileId) {
      CommissionProfileId = other.CommissionProfileId;
    }
    if (other.HasVolumeProfileId) {
      VolumeProfileId = other.VolumeProfileId;
    }
    if (other.HasExecutionProfileId) {
      ExecutionProfileId = other.ExecutionProfileId;
    }
    if (other.HasProtectionProfileId) {
      ProtectionProfileId = other.ProtectionProfileId;
    }
    if (other.HasSwapFreeProfileId) {
      SwapFreeProfileId = other.SwapFreeProfileId;
    }
    if (other.HasTradeNotificationProfileId) {
      TradeNotificationProfileId = other.TradeNotificationProfileId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
        case 256: {
          LeverageId = input.ReadUInt64();
          break;
        }
        case 280: {
          GslScheduleId = input.ReadUInt64();
          break;
        }
        case 336: {
          CommissionProfileId = input.ReadInt64();
          break;
        }
        case 344: {
          VolumeProfileId = input.ReadInt64();
          break;
        }
        case 352: {
          ExecutionProfileId = input.ReadInt64();
          break;
        }
        case 360: {
          ProtectionProfileId = input.ReadInt64();
          break;
        }
        case 368: {
          SwapFreeProfileId = input.ReadInt64();
          break;
        }
        case 376: {
          TradeNotificationProfileId = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
        case 256: {
          LeverageId = input.ReadUInt64();
          break;
        }
        case 280: {
          GslScheduleId = input.ReadUInt64();
          break;
        }
        case 336: {
          CommissionProfileId = input.ReadInt64();
          break;
        }
        case 344: {
          VolumeProfileId = input.ReadInt64();
          break;
        }
        case 352: {
          ExecutionProfileId = input.ReadInt64();
          break;
        }
        case 360: {
          ProtectionProfileId = input.ReadInt64();
          break;
        }
        case 368: {
          SwapFreeProfileId = input.ReadInt64();
          break;
        }
        case 376: {
          TradeNotificationProfileId = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Group Symbol entity (with limited number of fields)
/// </summary>
public sealed partial class ProtoLightGroup : pb::IMessage<ProtoLightGroup>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLightGroup> _parser = new pb::MessageParser<ProtoLightGroup>(() => new ProtoLightGroup());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLightGroup> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightGroup() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightGroup(ProtoLightGroup other) : this() {
    _hasBits0 = other._hasBits0;
    groupId_ = other.groupId_;
    name_ = other.name_;
    enabled_ = other.enabled_;
    swapEnabled_ = other.swapEnabled_;
    marginStopout_ = other.marginStopout_;
    description_ = other.description_;
    priceStreamId_ = other.priceStreamId_;
    deleted_ = other.deleted_;
    hasAccess_ = other.hasAccess_;
    isDealingDesk_ = other.isDealingDesk_;
    maxAutoExecutionSizeProfileId_ = other.maxAutoExecutionSizeProfileId_;
    regionId_ = other.regionId_;
    copyDisabled_ = other.copyDisabled_;
    copyProvidingDisabled_ = other.copyProvidingDisabled_;
    isFakeSpreadBetting_ = other.isFakeSpreadBetting_;
    negativeBalanceProtection_ = other.negativeBalanceProtection_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightGroup Clone() {
    return new ProtoLightGroup(this);
  }

  /// <summary>Field number for the "groupId" field.</summary>
  public const int GroupIdFieldNumber = 1;
  private readonly static long GroupIdDefaultValue = 0L;

  private long groupId_;
  /// <summary>
  /// ID of the Group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GroupId {
    get { if ((_hasBits0 & 1) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      groupId_ = value;
    }
  }
  /// <summary>Gets whether the "groupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGroupId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "groupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGroupId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 3;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// Specifies whether Group is enabled (Trader's login are allowed) or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 2) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "swapEnabled" field.</summary>
  public const int SwapEnabledFieldNumber = 4;
  private readonly static bool SwapEnabledDefaultValue = false;

  private bool swapEnabled_;
  /// <summary>
  /// Specifies whether SWAP charging is enabled or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SwapEnabled {
    get { if ((_hasBits0 & 4) != 0) { return swapEnabled_; } else { return SwapEnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      swapEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "swapEnabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "swapEnabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "marginStopout" field.</summary>
  public const int MarginStopoutFieldNumber = 9;
  private readonly static double MarginStopoutDefaultValue = 0D;

  private double marginStopout_;
  /// <summary>
  /// Margin Stop Out percentage (e.g. 0.50 = 50%)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginStopout {
    get { if ((_hasBits0 & 8) != 0) { return marginStopout_; } else { return MarginStopoutDefaultValue; } }
    set {
      _hasBits0 |= 8;
      marginStopout_ = value;
    }
  }
  /// <summary>Gets whether the "marginStopout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginStopout {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "marginStopout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginStopout() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 11;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Group description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "priceStreamId" field.</summary>
  public const int PriceStreamIdFieldNumber = 13;
  private readonly static long PriceStreamIdDefaultValue = 0L;

  private long priceStreamId_;
  /// <summary>
  /// ID of the related Price Stream
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PriceStreamId {
    get { if ((_hasBits0 & 16) != 0) { return priceStreamId_; } else { return PriceStreamIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      priceStreamId_ = value;
    }
  }
  /// <summary>Gets whether the "priceStreamId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPriceStreamId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "priceStreamId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPriceStreamId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "deleted" field.</summary>
  public const int DeletedFieldNumber = 14;
  private readonly static bool DeletedDefaultValue = false;

  private bool deleted_;
  /// <summary>
  /// Specifies whether Group is deleted or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Deleted {
    get { if ((_hasBits0 & 32) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
    set {
      _hasBits0 |= 32;
      deleted_ = value;
    }
  }
  /// <summary>Gets whether the "deleted" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeleted {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "deleted" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeleted() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "hasAccess" field.</summary>
  public const int HasAccessFieldNumber = 15;
  private readonly static bool HasAccessDefaultValue = false;

  private bool hasAccess_;
  /// <summary>
  /// If TRUE then Manager has access to the group and if FALSE then Manager doesn't have access to the group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAccess {
    get { if ((_hasBits0 & 64) != 0) { return hasAccess_; } else { return HasAccessDefaultValue; } }
    set {
      _hasBits0 |= 64;
      hasAccess_ = value;
    }
  }
  /// <summary>Gets whether the "hasAccess" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHasAccess {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "hasAccess" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHasAccess() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "isDealingDesk" field.</summary>
  public const int IsDealingDeskFieldNumber = 23;
  private readonly static bool IsDealingDeskDefaultValue = false;

  private bool isDealingDesk_;
  /// <summary>
  /// Specifies whether Group is Dealing Desk or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDealingDesk {
    get { if ((_hasBits0 & 128) != 0) { return isDealingDesk_; } else { return IsDealingDeskDefaultValue; } }
    set {
      _hasBits0 |= 128;
      isDealingDesk_ = value;
    }
  }
  /// <summary>Gets whether the "isDealingDesk" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDealingDesk {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "isDealingDesk" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDealingDesk() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "maxAutoExecutionSizeProfileId" field.</summary>
  public const int MaxAutoExecutionSizeProfileIdFieldNumber = 24;
  private readonly static long MaxAutoExecutionSizeProfileIdDefaultValue = 0L;

  private long maxAutoExecutionSizeProfileId_;
  /// <summary>
  /// ID of Max Auto Execution Size Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxAutoExecutionSizeProfileId {
    get { if ((_hasBits0 & 256) != 0) { return maxAutoExecutionSizeProfileId_; } else { return MaxAutoExecutionSizeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 256;
      maxAutoExecutionSizeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "maxAutoExecutionSizeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxAutoExecutionSizeProfileId {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "maxAutoExecutionSizeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxAutoExecutionSizeProfileId() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "regionId" field.</summary>
  public const int RegionIdFieldNumber = 25;
  private readonly static long RegionIdDefaultValue = 0L;

  private long regionId_;
  /// <summary>
  /// ID of Region which will be used for GUI settings of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RegionId {
    get { if ((_hasBits0 & 512) != 0) { return regionId_; } else { return RegionIdDefaultValue; } }
    set {
      _hasBits0 |= 512;
      regionId_ = value;
    }
  }
  /// <summary>Gets whether the "regionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRegionId {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "regionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegionId() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "copyDisabled" field.</summary>
  public const int CopyDisabledFieldNumber = 26;
  private readonly static bool CopyDisabledDefaultValue = false;

  private bool copyDisabled_;
  /// <summary>
  /// If TRUE then Traders of the Group are unable to create sub-accounts for Copy service
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CopyDisabled {
    get { if ((_hasBits0 & 1024) != 0) { return copyDisabled_; } else { return CopyDisabledDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      copyDisabled_ = value;
    }
  }
  /// <summary>Gets whether the "copyDisabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCopyDisabled {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "copyDisabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCopyDisabled() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "copyProvidingDisabled" field.</summary>
  public const int CopyProvidingDisabledFieldNumber = 27;
  private readonly static bool CopyProvidingDisabledDefaultValue = false;

  private bool copyProvidingDisabled_;
  /// <summary>
  /// If TRUE then Traders of the Group are unable to become Copy Provider. Logic is on Copy side Default: FALSE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CopyProvidingDisabled {
    get { if ((_hasBits0 & 2048) != 0) { return copyProvidingDisabled_; } else { return CopyProvidingDisabledDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      copyProvidingDisabled_ = value;
    }
  }
  /// <summary>Gets whether the "copyProvidingDisabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCopyProvidingDisabled {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "copyProvidingDisabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCopyProvidingDisabled() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "isFakeSpreadBetting" field.</summary>
  public const int IsFakeSpreadBettingFieldNumber = 28;
  private readonly static bool IsFakeSpreadBettingDefaultValue = false;

  private bool isFakeSpreadBetting_;
  /// <summary>
  /// Account type is treated as Spread Betting (ProtoAccountType=SPREAD_BETTING) if Group of the Trader has isFakeSpreadBetting = TRUE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsFakeSpreadBetting {
    get { if ((_hasBits0 & 4096) != 0) { return isFakeSpreadBetting_; } else { return IsFakeSpreadBettingDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      isFakeSpreadBetting_ = value;
    }
  }
  /// <summary>Gets whether the "isFakeSpreadBetting" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsFakeSpreadBetting {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "isFakeSpreadBetting" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsFakeSpreadBetting() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "negativeBalanceProtection" field.</summary>
  public const int NegativeBalanceProtectionFieldNumber = 29;
  private readonly static bool NegativeBalanceProtectionDefaultValue = false;

  private bool negativeBalanceProtection_;
  /// <summary>
  /// IF TRUE then will get deposited to his balance = 0 when his balance becomes negative
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NegativeBalanceProtection {
    get { if ((_hasBits0 & 8192) != 0) { return negativeBalanceProtection_; } else { return NegativeBalanceProtectionDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      negativeBalanceProtection_ = value;
    }
  }
  /// <summary>Gets whether the "negativeBalanceProtection" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNegativeBalanceProtection {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "negativeBalanceProtection" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNegativeBalanceProtection() {
    _hasBits0 &= ~8192;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLightGroup);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLightGroup other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GroupId != other.GroupId) return false;
    if (Name != other.Name) return false;
    if (Enabled != other.Enabled) return false;
    if (SwapEnabled != other.SwapEnabled) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginStopout, other.MarginStopout)) return false;
    if (Description != other.Description) return false;
    if (PriceStreamId != other.PriceStreamId) return false;
    if (Deleted != other.Deleted) return false;
    if (HasAccess != other.HasAccess) return false;
    if (IsDealingDesk != other.IsDealingDesk) return false;
    if (MaxAutoExecutionSizeProfileId != other.MaxAutoExecutionSizeProfileId) return false;
    if (RegionId != other.RegionId) return false;
    if (CopyDisabled != other.CopyDisabled) return false;
    if (CopyProvidingDisabled != other.CopyProvidingDisabled) return false;
    if (IsFakeSpreadBetting != other.IsFakeSpreadBetting) return false;
    if (NegativeBalanceProtection != other.NegativeBalanceProtection) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasGroupId) hash ^= GroupId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasSwapEnabled) hash ^= SwapEnabled.GetHashCode();
    if (HasMarginStopout) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginStopout);
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasPriceStreamId) hash ^= PriceStreamId.GetHashCode();
    if (HasDeleted) hash ^= Deleted.GetHashCode();
    if (HasHasAccess) hash ^= HasAccess.GetHashCode();
    if (HasIsDealingDesk) hash ^= IsDealingDesk.GetHashCode();
    if (HasMaxAutoExecutionSizeProfileId) hash ^= MaxAutoExecutionSizeProfileId.GetHashCode();
    if (HasRegionId) hash ^= RegionId.GetHashCode();
    if (HasCopyDisabled) hash ^= CopyDisabled.GetHashCode();
    if (HasCopyProvidingDisabled) hash ^= CopyProvidingDisabled.GetHashCode();
    if (HasIsFakeSpreadBetting) hash ^= IsFakeSpreadBetting.GetHashCode();
    if (HasNegativeBalanceProtection) hash ^= NegativeBalanceProtection.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasGroupId) {
      output.WriteRawTag(8);
      output.WriteInt64(GroupId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (HasSwapEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(SwapEnabled);
    }
    if (HasMarginStopout) {
      output.WriteRawTag(73);
      output.WriteDouble(MarginStopout);
    }
    if (HasDescription) {
      output.WriteRawTag(90);
      output.WriteString(Description);
    }
    if (HasPriceStreamId) {
      output.WriteRawTag(104);
      output.WriteInt64(PriceStreamId);
    }
    if (HasDeleted) {
      output.WriteRawTag(112);
      output.WriteBool(Deleted);
    }
    if (HasHasAccess) {
      output.WriteRawTag(120);
      output.WriteBool(HasAccess);
    }
    if (HasIsDealingDesk) {
      output.WriteRawTag(184, 1);
      output.WriteBool(IsDealingDesk);
    }
    if (HasMaxAutoExecutionSizeProfileId) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(MaxAutoExecutionSizeProfileId);
    }
    if (HasRegionId) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(RegionId);
    }
    if (HasCopyDisabled) {
      output.WriteRawTag(208, 1);
      output.WriteBool(CopyDisabled);
    }
    if (HasCopyProvidingDisabled) {
      output.WriteRawTag(216, 1);
      output.WriteBool(CopyProvidingDisabled);
    }
    if (HasIsFakeSpreadBetting) {
      output.WriteRawTag(224, 1);
      output.WriteBool(IsFakeSpreadBetting);
    }
    if (HasNegativeBalanceProtection) {
      output.WriteRawTag(232, 1);
      output.WriteBool(NegativeBalanceProtection);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasGroupId) {
      output.WriteRawTag(8);
      output.WriteInt64(GroupId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (HasSwapEnabled) {
      output.WriteRawTag(32);
      output.WriteBool(SwapEnabled);
    }
    if (HasMarginStopout) {
      output.WriteRawTag(73);
      output.WriteDouble(MarginStopout);
    }
    if (HasDescription) {
      output.WriteRawTag(90);
      output.WriteString(Description);
    }
    if (HasPriceStreamId) {
      output.WriteRawTag(104);
      output.WriteInt64(PriceStreamId);
    }
    if (HasDeleted) {
      output.WriteRawTag(112);
      output.WriteBool(Deleted);
    }
    if (HasHasAccess) {
      output.WriteRawTag(120);
      output.WriteBool(HasAccess);
    }
    if (HasIsDealingDesk) {
      output.WriteRawTag(184, 1);
      output.WriteBool(IsDealingDesk);
    }
    if (HasMaxAutoExecutionSizeProfileId) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(MaxAutoExecutionSizeProfileId);
    }
    if (HasRegionId) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(RegionId);
    }
    if (HasCopyDisabled) {
      output.WriteRawTag(208, 1);
      output.WriteBool(CopyDisabled);
    }
    if (HasCopyProvidingDisabled) {
      output.WriteRawTag(216, 1);
      output.WriteBool(CopyProvidingDisabled);
    }
    if (HasIsFakeSpreadBetting) {
      output.WriteRawTag(224, 1);
      output.WriteBool(IsFakeSpreadBetting);
    }
    if (HasNegativeBalanceProtection) {
      output.WriteRawTag(232, 1);
      output.WriteBool(NegativeBalanceProtection);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasSwapEnabled) {
      size += 1 + 1;
    }
    if (HasMarginStopout) {
      size += 1 + 8;
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasPriceStreamId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PriceStreamId);
    }
    if (HasDeleted) {
      size += 1 + 1;
    }
    if (HasHasAccess) {
      size += 1 + 1;
    }
    if (HasIsDealingDesk) {
      size += 2 + 1;
    }
    if (HasMaxAutoExecutionSizeProfileId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxAutoExecutionSizeProfileId);
    }
    if (HasRegionId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegionId);
    }
    if (HasCopyDisabled) {
      size += 2 + 1;
    }
    if (HasCopyProvidingDisabled) {
      size += 2 + 1;
    }
    if (HasIsFakeSpreadBetting) {
      size += 2 + 1;
    }
    if (HasNegativeBalanceProtection) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLightGroup other) {
    if (other == null) {
      return;
    }
    if (other.HasGroupId) {
      GroupId = other.GroupId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasSwapEnabled) {
      SwapEnabled = other.SwapEnabled;
    }
    if (other.HasMarginStopout) {
      MarginStopout = other.MarginStopout;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasPriceStreamId) {
      PriceStreamId = other.PriceStreamId;
    }
    if (other.HasDeleted) {
      Deleted = other.Deleted;
    }
    if (other.HasHasAccess) {
      HasAccess = other.HasAccess;
    }
    if (other.HasIsDealingDesk) {
      IsDealingDesk = other.IsDealingDesk;
    }
    if (other.HasMaxAutoExecutionSizeProfileId) {
      MaxAutoExecutionSizeProfileId = other.MaxAutoExecutionSizeProfileId;
    }
    if (other.HasRegionId) {
      RegionId = other.RegionId;
    }
    if (other.HasCopyDisabled) {
      CopyDisabled = other.CopyDisabled;
    }
    if (other.HasCopyProvidingDisabled) {
      CopyProvidingDisabled = other.CopyProvidingDisabled;
    }
    if (other.HasIsFakeSpreadBetting) {
      IsFakeSpreadBetting = other.IsFakeSpreadBetting;
    }
    if (other.HasNegativeBalanceProtection) {
      NegativeBalanceProtection = other.NegativeBalanceProtection;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GroupId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 32: {
          SwapEnabled = input.ReadBool();
          break;
        }
        case 73: {
          MarginStopout = input.ReadDouble();
          break;
        }
        case 90: {
          Description = input.ReadString();
          break;
        }
        case 104: {
          PriceStreamId = input.ReadInt64();
          break;
        }
        case 112: {
          Deleted = input.ReadBool();
          break;
        }
        case 120: {
          HasAccess = input.ReadBool();
          break;
        }
        case 184: {
          IsDealingDesk = input.ReadBool();
          break;
        }
        case 192: {
          MaxAutoExecutionSizeProfileId = input.ReadInt64();
          break;
        }
        case 200: {
          RegionId = input.ReadInt64();
          break;
        }
        case 208: {
          CopyDisabled = input.ReadBool();
          break;
        }
        case 216: {
          CopyProvidingDisabled = input.ReadBool();
          break;
        }
        case 224: {
          IsFakeSpreadBetting = input.ReadBool();
          break;
        }
        case 232: {
          NegativeBalanceProtection = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          GroupId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 32: {
          SwapEnabled = input.ReadBool();
          break;
        }
        case 73: {
          MarginStopout = input.ReadDouble();
          break;
        }
        case 90: {
          Description = input.ReadString();
          break;
        }
        case 104: {
          PriceStreamId = input.ReadInt64();
          break;
        }
        case 112: {
          Deleted = input.ReadBool();
          break;
        }
        case 120: {
          HasAccess = input.ReadBool();
          break;
        }
        case 184: {
          IsDealingDesk = input.ReadBool();
          break;
        }
        case 192: {
          MaxAutoExecutionSizeProfileId = input.ReadInt64();
          break;
        }
        case 200: {
          RegionId = input.ReadInt64();
          break;
        }
        case 208: {
          CopyDisabled = input.ReadBool();
          break;
        }
        case 216: {
          CopyProvidingDisabled = input.ReadBool();
          break;
        }
        case 224: {
          IsFakeSpreadBetting = input.ReadBool();
          break;
        }
        case 232: {
          NegativeBalanceProtection = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Dynamic Commission type
/// </summary>
public sealed partial class ProtoDynamicCommission : pb::IMessage<ProtoDynamicCommission>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoDynamicCommission> _parser = new pb::MessageParser<ProtoDynamicCommission>(() => new ProtoDynamicCommission());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoDynamicCommission> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicCommission() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicCommission(ProtoDynamicCommission other) : this() {
    _hasBits0 = other._hasBits0;
    monthlyVolume_ = other.monthlyVolume_;
    discount_ = other.discount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicCommission Clone() {
    return new ProtoDynamicCommission(this);
  }

  /// <summary>Field number for the "monthlyVolume" field.</summary>
  public const int MonthlyVolumeFieldNumber = 2;
  private readonly static long MonthlyVolumeDefaultValue = 0L;

  private long monthlyVolume_;
  /// <summary>
  /// Monthly volume in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MonthlyVolume {
    get { if ((_hasBits0 & 1) != 0) { return monthlyVolume_; } else { return MonthlyVolumeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      monthlyVolume_ = value;
    }
  }
  /// <summary>Gets whether the "monthlyVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMonthlyVolume {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "monthlyVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMonthlyVolume() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "discount" field.</summary>
  public const int DiscountFieldNumber = 3;
  private readonly static long DiscountDefaultValue = 0L;

  private long discount_;
  /// <summary>
  /// Discount amount in % multiplied by 100: min = 0.01%, max = 100%, step = 0.01%. Value of 4321 means 43.21%
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Discount {
    get { if ((_hasBits0 & 2) != 0) { return discount_; } else { return DiscountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      discount_ = value;
    }
  }
  /// <summary>Gets whether the "discount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDiscount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "discount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDiscount() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoDynamicCommission);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoDynamicCommission other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MonthlyVolume != other.MonthlyVolume) return false;
    if (Discount != other.Discount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMonthlyVolume) hash ^= MonthlyVolume.GetHashCode();
    if (HasDiscount) hash ^= Discount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasMonthlyVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(MonthlyVolume);
    }
    if (HasDiscount) {
      output.WriteRawTag(24);
      output.WriteInt64(Discount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasMonthlyVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(MonthlyVolume);
    }
    if (HasDiscount) {
      output.WriteRawTag(24);
      output.WriteInt64(Discount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasMonthlyVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonthlyVolume);
    }
    if (HasDiscount) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Discount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoDynamicCommission other) {
    if (other == null) {
      return;
    }
    if (other.HasMonthlyVolume) {
      MonthlyVolume = other.MonthlyVolume;
    }
    if (other.HasDiscount) {
      Discount = other.Discount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 16: {
          MonthlyVolume = input.ReadInt64();
          break;
        }
        case 24: {
          Discount = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 16: {
          MonthlyVolume = input.ReadInt64();
          break;
        }
        case 24: {
          Discount = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Server Settings type
/// </summary>
public sealed partial class ProtoServerSetting : pb::IMessage<ProtoServerSetting>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoServerSetting> _parser = new pb::MessageParser<ProtoServerSetting>(() => new ProtoServerSetting());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoServerSetting> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoServerSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoServerSetting(ProtoServerSetting other) : this() {
    _hasBits0 = other._hasBits0;
    key_ = other.key_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoServerSetting Clone() {
    return new ProtoServerSetting(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private readonly static global::ProtoServerSettingType KeyDefaultValue = global::ProtoServerSettingType.EndOfDayTime;

  private global::ProtoServerSettingType key_;
  /// <summary>
  /// Setting type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoServerSettingType Key {
    get { if ((_hasBits0 & 1) != 0) { return key_; } else { return KeyDefaultValue; } }
    set {
      _hasBits0 |= 1;
      key_ = value;
    }
  }
  /// <summary>Gets whether the "key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasKey {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearKey() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private readonly static string ValueDefaultValue = "";

  private string value_;
  /// <summary>
  /// Value of the setting
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Value {
    get { return value_ ?? ValueDefaultValue; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasValue {
    get { return value_ != null; }
  }
  /// <summary>Clears the value of the "value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearValue() {
    value_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoServerSetting);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoServerSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Key != other.Key) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasKey) hash ^= Key.GetHashCode();
    if (HasValue) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasKey) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Key);
    }
    if (HasValue) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasKey) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Key);
    }
    if (HasValue) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasKey) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Key);
    }
    if (HasValue) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoServerSetting other) {
    if (other == null) {
      return;
    }
    if (other.HasKey) {
      Key = other.Key;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Key = (global::ProtoServerSettingType) input.ReadEnum();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Key = (global::ProtoServerSettingType) input.ReadEnum();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Manager entity
/// </summary>
public sealed partial class ProtoManager : pb::IMessage<ProtoManager>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoManager> _parser = new pb::MessageParser<ProtoManager>(() => new ProtoManager());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoManager> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManager() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManager(ProtoManager other) : this() {
    _hasBits0 = other._hasBits0;
    managerId_ = other.managerId_;
    login_ = other.login_;
    enabled_ = other.enabled_;
    group_ = other.group_.Clone();
    email_ = other.email_;
    name_ = other.name_;
    passwordHash_ = other.passwordHash_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    permission_ = other.permission_.Clone();
    deleted_ = other.deleted_;
    regionId_ = other.regionId_.Clone();
    manager_ = other.manager_.Clone();
    specificGroupId_ = other.specificGroupId_.Clone();
    groupMask_ = other.groupMask_;
    disabledBrokerName_ = other.disabledBrokerName_.Clone();
    template_ = other.template_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManager Clone() {
    return new ProtoManager(this);
  }

  /// <summary>Field number for the "managerId" field.</summary>
  public const int ManagerIdFieldNumber = 1;
  private readonly static long ManagerIdDefaultValue = 0L;

  private long managerId_;
  /// <summary>
  /// ID of Manager
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerId {
    get { if ((_hasBits0 & 1) != 0) { return managerId_; } else { return ManagerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      managerId_ = value;
    }
  }
  /// <summary>Gets whether the "managerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "managerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "login" field.</summary>
  public const int LoginFieldNumber = 2;
  private readonly static long LoginDefaultValue = 0L;

  private long login_;
  /// <summary>
  /// Login of Manager
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Login {
    get { if ((_hasBits0 & 2) != 0) { return login_; } else { return LoginDefaultValue; } }
    set {
      _hasBits0 |= 2;
      login_ = value;
    }
  }
  /// <summary>Gets whether the "login" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLogin {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "login" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLogin() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 3;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// IF FALSE login is disabled
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 4) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 4;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 4;
  private static readonly pb::FieldCodec<long> _repeated_group_codec
      = pb::FieldCodec.ForInt64(34);
  private readonly pbc::RepeatedField<long> group_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// List of Groups available for Manager. Manager has access to Traders, Positions, Orders etc. only for Traders which are in their Groups
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<long> Group {
    get { return group_; }
  }

  /// <summary>Field number for the "email" field.</summary>
  public const int EmailFieldNumber = 5;
  private readonly static string EmailDefaultValue = "";

  private string email_;
  /// <summary>
  /// Email of the Manager
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Email {
    get { return email_ ?? EmailDefaultValue; }
    set {
      email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "email" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEmail {
    get { return email_ != null; }
  }
  /// <summary>Clears the value of the "email" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEmail() {
    email_ = null;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 6;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Manager
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "passwordHash" field.</summary>
  public const int PasswordHashFieldNumber = 7;
  private readonly static string PasswordHashDefaultValue = "";

  private string passwordHash_;
  /// <summary>
  /// Hashed password of the manager (MD5 of password in lower case in utf-8)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string PasswordHash {
    get { return passwordHash_ ?? PasswordHashDefaultValue; }
    set {
      passwordHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "passwordHash" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPasswordHash {
    get { return passwordHash_ != null; }
  }
  /// <summary>Clears the value of the "passwordHash" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPasswordHash() {
    passwordHash_ = null;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 8;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the last update of the Manager
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "permission" field.</summary>
  public const int PermissionFieldNumber = 9;
  private static readonly pb::FieldCodec<global::ProtoManagerPermission> _repeated_permission_codec
      = pb::FieldCodec.ForEnum(72, x => (int) x, x => (global::ProtoManagerPermission) x);
  private readonly pbc::RepeatedField<global::ProtoManagerPermission> permission_ = new pbc::RepeatedField<global::ProtoManagerPermission>();
  /// <summary>
  /// List of Manager permissions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoManagerPermission> Permission {
    get { return permission_; }
  }

  /// <summary>Field number for the "deleted" field.</summary>
  public const int DeletedFieldNumber = 11;
  private readonly static bool DeletedDefaultValue = false;

  private bool deleted_;
  /// <summary>
  /// IF TRUE then Manager is deleted
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Deleted {
    get { if ((_hasBits0 & 16) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
    set {
      _hasBits0 |= 16;
      deleted_ = value;
    }
  }
  /// <summary>Gets whether the "deleted" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeleted {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "deleted" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeleted() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "regionId" field.</summary>
  public const int RegionIdFieldNumber = 12;
  private static readonly pb::FieldCodec<long> _repeated_regionId_codec
      = pb::FieldCodec.ForInt64(98);
  private readonly pbc::RepeatedField<long> regionId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// List of Jurisdictions that is used by the Client app (not server) to limit access to personal data of a user from another Legal Entity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<long> RegionId {
    get { return regionId_; }
  }

  /// <summary>Field number for the "manager" field.</summary>
  public const int ManagerFieldNumber = 13;
  private static readonly pb::FieldCodec<long> _repeated_manager_codec
      = pb::FieldCodec.ForInt64(106);
  private readonly pbc::RepeatedField<long> manager_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// List of Managers this Manager has access to
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<long> Manager {
    get { return manager_; }
  }

  /// <summary>Field number for the "specificGroupId" field.</summary>
  public const int SpecificGroupIdFieldNumber = 14;
  private static readonly pb::FieldCodec<long> _repeated_specificGroupId_codec
      = pb::FieldCodec.ForInt64(114);
  private readonly pbc::RepeatedField<long> specificGroupId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// List of Manager's Groups
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<long> SpecificGroupId {
    get { return specificGroupId_; }
  }

  /// <summary>Field number for the "groupMask" field.</summary>
  public const int GroupMaskFieldNumber = 15;
  private readonly static string GroupMaskDefaultValue = "";

  private string groupMask_;
  /// <summary>
  /// Mask to specify access to Groups by pattern matching by Group name. Patterns are separated by ";" and "*" means from 0 to several symbols (any). Example groupMask: abc* corresponds to Groups with names abc, abcd, abcd45 etc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GroupMask {
    get { return groupMask_ ?? GroupMaskDefaultValue; }
    set {
      groupMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "groupMask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGroupMask {
    get { return groupMask_ != null; }
  }
  /// <summary>Clears the value of the "groupMask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGroupMask() {
    groupMask_ = null;
  }

  /// <summary>Field number for the "disabledBrokerName" field.</summary>
  public const int DisabledBrokerNameFieldNumber = 16;
  private static readonly pb::FieldCodec<string> _repeated_disabledBrokerName_codec
      = pb::FieldCodec.ForString(130);
  private readonly pbc::RepeatedField<string> disabledBrokerName_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// An array of all broker names disabled for the Manager. The Manager lacks access to all Accounts registered under the broker names contained in this array and any server entities linked to these Accounts (Orders, Positions, etc.). This logic works in addition to permission separation by Groups.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> DisabledBrokerName {
    get { return disabledBrokerName_; }
  }

  /// <summary>Field number for the "template" field.</summary>
  public const int TemplateFieldNumber = 17;
  private readonly static bool TemplateDefaultValue = false;

  private bool template_;
  /// <summary>
  /// If TRUE - this entity is a template used for storing a set of manager permissions. Logging on as this manager is not possible
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Template {
    get { if ((_hasBits0 & 32) != 0) { return template_; } else { return TemplateDefaultValue; } }
    set {
      _hasBits0 |= 32;
      template_ = value;
    }
  }
  /// <summary>Gets whether the "template" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTemplate {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "template" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTemplate() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoManager);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoManager other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ManagerId != other.ManagerId) return false;
    if (Login != other.Login) return false;
    if (Enabled != other.Enabled) return false;
    if(!group_.Equals(other.group_)) return false;
    if (Email != other.Email) return false;
    if (Name != other.Name) return false;
    if (PasswordHash != other.PasswordHash) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if(!permission_.Equals(other.permission_)) return false;
    if (Deleted != other.Deleted) return false;
    if(!regionId_.Equals(other.regionId_)) return false;
    if(!manager_.Equals(other.manager_)) return false;
    if(!specificGroupId_.Equals(other.specificGroupId_)) return false;
    if (GroupMask != other.GroupMask) return false;
    if(!disabledBrokerName_.Equals(other.disabledBrokerName_)) return false;
    if (Template != other.Template) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasManagerId) hash ^= ManagerId.GetHashCode();
    if (HasLogin) hash ^= Login.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    hash ^= group_.GetHashCode();
    if (HasEmail) hash ^= Email.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasPasswordHash) hash ^= PasswordHash.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    hash ^= permission_.GetHashCode();
    if (HasDeleted) hash ^= Deleted.GetHashCode();
    hash ^= regionId_.GetHashCode();
    hash ^= manager_.GetHashCode();
    hash ^= specificGroupId_.GetHashCode();
    if (HasGroupMask) hash ^= GroupMask.GetHashCode();
    hash ^= disabledBrokerName_.GetHashCode();
    if (HasTemplate) hash ^= Template.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasManagerId) {
      output.WriteRawTag(8);
      output.WriteInt64(ManagerId);
    }
    if (HasLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(Login);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    group_.WriteTo(output, _repeated_group_codec);
    if (HasEmail) {
      output.WriteRawTag(42);
      output.WriteString(Email);
    }
    if (HasName) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (HasPasswordHash) {
      output.WriteRawTag(58);
      output.WriteString(PasswordHash);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    permission_.WriteTo(output, _repeated_permission_codec);
    if (HasDeleted) {
      output.WriteRawTag(88);
      output.WriteBool(Deleted);
    }
    regionId_.WriteTo(output, _repeated_regionId_codec);
    manager_.WriteTo(output, _repeated_manager_codec);
    specificGroupId_.WriteTo(output, _repeated_specificGroupId_codec);
    if (HasGroupMask) {
      output.WriteRawTag(122);
      output.WriteString(GroupMask);
    }
    disabledBrokerName_.WriteTo(output, _repeated_disabledBrokerName_codec);
    if (HasTemplate) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Template);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasManagerId) {
      output.WriteRawTag(8);
      output.WriteInt64(ManagerId);
    }
    if (HasLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(Login);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    group_.WriteTo(ref output, _repeated_group_codec);
    if (HasEmail) {
      output.WriteRawTag(42);
      output.WriteString(Email);
    }
    if (HasName) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (HasPasswordHash) {
      output.WriteRawTag(58);
      output.WriteString(PasswordHash);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    permission_.WriteTo(ref output, _repeated_permission_codec);
    if (HasDeleted) {
      output.WriteRawTag(88);
      output.WriteBool(Deleted);
    }
    regionId_.WriteTo(ref output, _repeated_regionId_codec);
    manager_.WriteTo(ref output, _repeated_manager_codec);
    specificGroupId_.WriteTo(ref output, _repeated_specificGroupId_codec);
    if (HasGroupMask) {
      output.WriteRawTag(122);
      output.WriteString(GroupMask);
    }
    disabledBrokerName_.WriteTo(ref output, _repeated_disabledBrokerName_codec);
    if (HasTemplate) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Template);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasManagerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagerId);
    }
    if (HasLogin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Login);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    size += group_.CalculateSize(_repeated_group_codec);
    if (HasEmail) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasPasswordHash) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PasswordHash);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    size += permission_.CalculateSize(_repeated_permission_codec);
    if (HasDeleted) {
      size += 1 + 1;
    }
    size += regionId_.CalculateSize(_repeated_regionId_codec);
    size += manager_.CalculateSize(_repeated_manager_codec);
    size += specificGroupId_.CalculateSize(_repeated_specificGroupId_codec);
    if (HasGroupMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupMask);
    }
    size += disabledBrokerName_.CalculateSize(_repeated_disabledBrokerName_codec);
    if (HasTemplate) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoManager other) {
    if (other == null) {
      return;
    }
    if (other.HasManagerId) {
      ManagerId = other.ManagerId;
    }
    if (other.HasLogin) {
      Login = other.Login;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    group_.Add(other.group_);
    if (other.HasEmail) {
      Email = other.Email;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasPasswordHash) {
      PasswordHash = other.PasswordHash;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    permission_.Add(other.permission_);
    if (other.HasDeleted) {
      Deleted = other.Deleted;
    }
    regionId_.Add(other.regionId_);
    manager_.Add(other.manager_);
    specificGroupId_.Add(other.specificGroupId_);
    if (other.HasGroupMask) {
      GroupMask = other.GroupMask;
    }
    disabledBrokerName_.Add(other.disabledBrokerName_);
    if (other.HasTemplate) {
      Template = other.Template;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ManagerId = input.ReadInt64();
          break;
        }
        case 16: {
          Login = input.ReadInt64();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 34:
        case 32: {
          group_.AddEntriesFrom(input, _repeated_group_codec);
          break;
        }
        case 42: {
          Email = input.ReadString();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 58: {
          PasswordHash = input.ReadString();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 74:
        case 72: {
          permission_.AddEntriesFrom(input, _repeated_permission_codec);
          break;
        }
        case 88: {
          Deleted = input.ReadBool();
          break;
        }
        case 98:
        case 96: {
          regionId_.AddEntriesFrom(input, _repeated_regionId_codec);
          break;
        }
        case 106:
        case 104: {
          manager_.AddEntriesFrom(input, _repeated_manager_codec);
          break;
        }
        case 114:
        case 112: {
          specificGroupId_.AddEntriesFrom(input, _repeated_specificGroupId_codec);
          break;
        }
        case 122: {
          GroupMask = input.ReadString();
          break;
        }
        case 130: {
          disabledBrokerName_.AddEntriesFrom(input, _repeated_disabledBrokerName_codec);
          break;
        }
        case 136: {
          Template = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ManagerId = input.ReadInt64();
          break;
        }
        case 16: {
          Login = input.ReadInt64();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 34:
        case 32: {
          group_.AddEntriesFrom(ref input, _repeated_group_codec);
          break;
        }
        case 42: {
          Email = input.ReadString();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 58: {
          PasswordHash = input.ReadString();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 74:
        case 72: {
          permission_.AddEntriesFrom(ref input, _repeated_permission_codec);
          break;
        }
        case 88: {
          Deleted = input.ReadBool();
          break;
        }
        case 98:
        case 96: {
          regionId_.AddEntriesFrom(ref input, _repeated_regionId_codec);
          break;
        }
        case 106:
        case 104: {
          manager_.AddEntriesFrom(ref input, _repeated_manager_codec);
          break;
        }
        case 114:
        case 112: {
          specificGroupId_.AddEntriesFrom(ref input, _repeated_specificGroupId_codec);
          break;
        }
        case 122: {
          GroupMask = input.ReadString();
          break;
        }
        case 130: {
          disabledBrokerName_.AddEntriesFrom(ref input, _repeated_disabledBrokerName_codec);
          break;
        }
        case 136: {
          Template = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Country entity
/// </summary>
public sealed partial class ProtoCountry : pb::IMessage<ProtoCountry>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoCountry> _parser = new pb::MessageParser<ProtoCountry>(() => new ProtoCountry());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoCountry> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoCountry() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoCountry(ProtoCountry other) : this() {
    _hasBits0 = other._hasBits0;
    countryId_ = other.countryId_;
    name_ = other.name_;
    countryA2Code_ = other.countryA2Code_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoCountry Clone() {
    return new ProtoCountry(this);
  }

  /// <summary>Field number for the "countryId" field.</summary>
  public const int CountryIdFieldNumber = 1;
  private readonly static long CountryIdDefaultValue = 0L;

  private long countryId_;
  /// <summary>
  /// ID of the Country
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CountryId {
    get { if ((_hasBits0 & 1) != 0) { return countryId_; } else { return CountryIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      countryId_ = value;
    }
  }
  /// <summary>Gets whether the "countryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCountryId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "countryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCountryId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Country
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "countryA2Code" field.</summary>
  public const int CountryA2CodeFieldNumber = 3;
  private readonly static string CountryA2CodeDefaultValue = "";

  private string countryA2Code_;
  /// <summary>
  /// ISO Code of the Country
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CountryA2Code {
    get { return countryA2Code_ ?? CountryA2CodeDefaultValue; }
    set {
      countryA2Code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "countryA2Code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCountryA2Code {
    get { return countryA2Code_ != null; }
  }
  /// <summary>Clears the value of the "countryA2Code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCountryA2Code() {
    countryA2Code_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoCountry);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoCountry other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CountryId != other.CountryId) return false;
    if (Name != other.Name) return false;
    if (CountryA2Code != other.CountryA2Code) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCountryId) hash ^= CountryId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasCountryA2Code) hash ^= CountryA2Code.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCountryId) {
      output.WriteRawTag(8);
      output.WriteInt64(CountryId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasCountryA2Code) {
      output.WriteRawTag(26);
      output.WriteString(CountryA2Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCountryId) {
      output.WriteRawTag(8);
      output.WriteInt64(CountryId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasCountryA2Code) {
      output.WriteRawTag(26);
      output.WriteString(CountryA2Code);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCountryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountryId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasCountryA2Code) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryA2Code);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoCountry other) {
    if (other == null) {
      return;
    }
    if (other.HasCountryId) {
      CountryId = other.CountryId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasCountryA2Code) {
      CountryA2Code = other.CountryA2Code;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CountryId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          CountryA2Code = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CountryId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          CountryA2Code = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Record with data about exposure per Symbol
/// </summary>
public sealed partial class ProtoExposureSymbolRecord : pb::IMessage<ProtoExposureSymbolRecord>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoExposureSymbolRecord> _parser = new pb::MessageParser<ProtoExposureSymbolRecord>(() => new ProtoExposureSymbolRecord());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoExposureSymbolRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoExposureSymbolRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoExposureSymbolRecord(ProtoExposureSymbolRecord other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    bookType_ = other.bookType_;
    positionCount_ = other.positionCount_;
    buyVolume_ = other.buyVolume_;
    sellVolume_ = other.sellVolume_;
    buyVwap_ = other.buyVwap_;
    sellVwap_ = other.sellVwap_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoExposureSymbolRecord Clone() {
    return new ProtoExposureSymbolRecord(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// ID of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "bookType" field.</summary>
  public const int BookTypeFieldNumber = 2;
  private readonly static global::ProtoBookType BookTypeDefaultValue = global::ProtoBookType.BookA;

  private global::ProtoBookType bookType_;
  /// <summary>
  /// Book type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoBookType BookType {
    get { if ((_hasBits0 & 2) != 0) { return bookType_; } else { return BookTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      bookType_ = value;
    }
  }
  /// <summary>Gets whether the "bookType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBookType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "bookType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBookType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionCount" field.</summary>
  public const int PositionCountFieldNumber = 3;
  private readonly static int PositionCountDefaultValue = 0;

  private int positionCount_;
  /// <summary>
  /// Number of Positions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PositionCount {
    get { if ((_hasBits0 & 4) != 0) { return positionCount_; } else { return PositionCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionCount_ = value;
    }
  }
  /// <summary>Gets whether the "positionCount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionCount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionCount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "buyVolume" field.</summary>
  public const int BuyVolumeFieldNumber = 4;
  private readonly static long BuyVolumeDefaultValue = 0L;

  private long buyVolume_;
  /// <summary>
  /// Volume for buy side in USD
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BuyVolume {
    get { if ((_hasBits0 & 8) != 0) { return buyVolume_; } else { return BuyVolumeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      buyVolume_ = value;
    }
  }
  /// <summary>Gets whether the "buyVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBuyVolume {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "buyVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBuyVolume() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "sellVolume" field.</summary>
  public const int SellVolumeFieldNumber = 5;
  private readonly static long SellVolumeDefaultValue = 0L;

  private long sellVolume_;
  /// <summary>
  /// Sell volume in USD
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SellVolume {
    get { if ((_hasBits0 & 16) != 0) { return sellVolume_; } else { return SellVolumeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      sellVolume_ = value;
    }
  }
  /// <summary>Gets whether the "sellVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSellVolume {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "sellVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSellVolume() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "buyVwap" field.</summary>
  public const int BuyVwapFieldNumber = 6;
  private readonly static double BuyVwapDefaultValue = 0D;

  private double buyVwap_;
  /// <summary>
  /// VWAP (volume weighted average price) for buy side
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double BuyVwap {
    get { if ((_hasBits0 & 32) != 0) { return buyVwap_; } else { return BuyVwapDefaultValue; } }
    set {
      _hasBits0 |= 32;
      buyVwap_ = value;
    }
  }
  /// <summary>Gets whether the "buyVwap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBuyVwap {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "buyVwap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBuyVwap() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "sellVwap" field.</summary>
  public const int SellVwapFieldNumber = 7;
  private readonly static double SellVwapDefaultValue = 0D;

  private double sellVwap_;
  /// <summary>
  /// VWAP (volume weighted average price) for sell side
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SellVwap {
    get { if ((_hasBits0 & 64) != 0) { return sellVwap_; } else { return SellVwapDefaultValue; } }
    set {
      _hasBits0 |= 64;
      sellVwap_ = value;
    }
  }
  /// <summary>Gets whether the "sellVwap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSellVwap {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "sellVwap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSellVwap() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoExposureSymbolRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoExposureSymbolRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (BookType != other.BookType) return false;
    if (PositionCount != other.PositionCount) return false;
    if (BuyVolume != other.BuyVolume) return false;
    if (SellVolume != other.SellVolume) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BuyVwap, other.BuyVwap)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SellVwap, other.SellVwap)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasBookType) hash ^= BookType.GetHashCode();
    if (HasPositionCount) hash ^= PositionCount.GetHashCode();
    if (HasBuyVolume) hash ^= BuyVolume.GetHashCode();
    if (HasSellVolume) hash ^= SellVolume.GetHashCode();
    if (HasBuyVwap) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BuyVwap);
    if (HasSellVwap) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SellVwap);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasBookType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) BookType);
    }
    if (HasPositionCount) {
      output.WriteRawTag(24);
      output.WriteInt32(PositionCount);
    }
    if (HasBuyVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(BuyVolume);
    }
    if (HasSellVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(SellVolume);
    }
    if (HasBuyVwap) {
      output.WriteRawTag(49);
      output.WriteDouble(BuyVwap);
    }
    if (HasSellVwap) {
      output.WriteRawTag(57);
      output.WriteDouble(SellVwap);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasBookType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) BookType);
    }
    if (HasPositionCount) {
      output.WriteRawTag(24);
      output.WriteInt32(PositionCount);
    }
    if (HasBuyVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(BuyVolume);
    }
    if (HasSellVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(SellVolume);
    }
    if (HasBuyVwap) {
      output.WriteRawTag(49);
      output.WriteDouble(BuyVwap);
    }
    if (HasSellVwap) {
      output.WriteRawTag(57);
      output.WriteDouble(SellVwap);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasBookType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BookType);
    }
    if (HasPositionCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionCount);
    }
    if (HasBuyVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuyVolume);
    }
    if (HasSellVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SellVolume);
    }
    if (HasBuyVwap) {
      size += 1 + 8;
    }
    if (HasSellVwap) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoExposureSymbolRecord other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasBookType) {
      BookType = other.BookType;
    }
    if (other.HasPositionCount) {
      PositionCount = other.PositionCount;
    }
    if (other.HasBuyVolume) {
      BuyVolume = other.BuyVolume;
    }
    if (other.HasSellVolume) {
      SellVolume = other.SellVolume;
    }
    if (other.HasBuyVwap) {
      BuyVwap = other.BuyVwap;
    }
    if (other.HasSellVwap) {
      SellVwap = other.SellVwap;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 24: {
          PositionCount = input.ReadInt32();
          break;
        }
        case 32: {
          BuyVolume = input.ReadInt64();
          break;
        }
        case 40: {
          SellVolume = input.ReadInt64();
          break;
        }
        case 49: {
          BuyVwap = input.ReadDouble();
          break;
        }
        case 57: {
          SellVwap = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 24: {
          PositionCount = input.ReadInt32();
          break;
        }
        case 32: {
          BuyVolume = input.ReadInt64();
          break;
        }
        case 40: {
          SellVolume = input.ReadInt64();
          break;
        }
        case 49: {
          BuyVwap = input.ReadDouble();
          break;
        }
        case 57: {
          SellVwap = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Asset entity
/// </summary>
public sealed partial class ProtoAsset : pb::IMessage<ProtoAsset>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoAsset> _parser = new pb::MessageParser<ProtoAsset>(() => new ProtoAsset());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoAsset> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoAsset() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoAsset(ProtoAsset other) : this() {
    _hasBits0 = other._hasBits0;
    assetId_ = other.assetId_;
    name_ = other.name_;
    description_ = other.description_;
    type_ = other.type_;
    depositAsset_ = other.depositAsset_;
    depositable_ = other.depositable_;
    displayName_ = other.displayName_;
    major_ = other.major_;
    digits_ = other.digits_;
    calendarAlias_ = other.calendarAlias_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoAsset Clone() {
    return new ProtoAsset(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private readonly static long AssetIdDefaultValue = 0L;

  private long assetId_;
  /// <summary>
  /// Asset ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AssetId {
    get { if ((_hasBits0 & 1) != 0) { return assetId_; } else { return AssetIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      assetId_ = value;
    }
  }
  /// <summary>Gets whether the "assetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAssetId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "assetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAssetId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Asset name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Asset description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private readonly static global::ProtoAssetType TypeDefaultValue = global::ProtoAssetType.ProtoForex;

  private global::ProtoAssetType type_;
  /// <summary>
  /// Asset type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoAssetType Type {
    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "depositAsset" field.</summary>
  public const int DepositAssetFieldNumber = 5;
  private readonly static bool DepositAssetDefaultValue = false;

  private bool depositAsset_;
  /// <summary>
  /// Asset is used as a deposit Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DepositAsset {
    get { if ((_hasBits0 & 4) != 0) { return depositAsset_; } else { return DepositAssetDefaultValue; } }
    set {
      _hasBits0 |= 4;
      depositAsset_ = value;
    }
  }
  /// <summary>Gets whether the "depositAsset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositAsset {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "depositAsset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositAsset() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "depositable" field.</summary>
  public const int DepositableFieldNumber = 6;
  private readonly static bool DepositableDefaultValue = false;

  private bool depositable_;
  /// <summary>
  /// Asset could be used as a deposit currency
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Depositable {
    get { if ((_hasBits0 & 8) != 0) { return depositable_; } else { return DepositableDefaultValue; } }
    set {
      _hasBits0 |= 8;
      depositable_ = value;
    }
  }
  /// <summary>Gets whether the "depositable" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositable {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "depositable" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositable() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "displayName" field.</summary>
  public const int DisplayNameFieldNumber = 7;
  private readonly static string DisplayNameDefaultValue = "";

  private string displayName_;
  /// <summary>
  /// Name of the Asset to be used on UI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DisplayName {
    get { return displayName_ ?? DisplayNameDefaultValue; }
    set {
      displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "displayName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayName {
    get { return displayName_ != null; }
  }
  /// <summary>Clears the value of the "displayName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayName() {
    displayName_ = null;
  }

  /// <summary>Field number for the "major" field.</summary>
  public const int MajorFieldNumber = 8;
  private readonly static bool MajorDefaultValue = false;

  private bool major_;
  /// <summary>
  /// If TRUE then Asset will be used for conversion chains
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Major {
    get { if ((_hasBits0 & 16) != 0) { return major_; } else { return MajorDefaultValue; } }
    set {
      _hasBits0 |= 16;
      major_ = value;
    }
  }
  /// <summary>Gets whether the "major" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMajor {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "major" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMajor() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "digits" field.</summary>
  public const int DigitsFieldNumber = 9;
  private readonly static int DigitsDefaultValue = 0;

  private int digits_;
  /// <summary>
  /// Number of digits allowed for Asset. Precision of the Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Digits {
    get { if ((_hasBits0 & 32) != 0) { return digits_; } else { return DigitsDefaultValue; } }
    set {
      _hasBits0 |= 32;
      digits_ = value;
    }
  }
  /// <summary>Gets whether the "digits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDigits {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "digits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDigits() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "calendarAlias" field.</summary>
  public const int CalendarAliasFieldNumber = 10;
  private readonly static string CalendarAliasDefaultValue = "";

  private string calendarAlias_;
  /// <summary>
  /// Alias to subscribe to Calendar News for the Asset News
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CalendarAlias {
    get { return calendarAlias_ ?? CalendarAliasDefaultValue; }
    set {
      calendarAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "calendarAlias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCalendarAlias {
    get { return calendarAlias_ != null; }
  }
  /// <summary>Clears the value of the "calendarAlias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCalendarAlias() {
    calendarAlias_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoAsset);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoAsset other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (Type != other.Type) return false;
    if (DepositAsset != other.DepositAsset) return false;
    if (Depositable != other.Depositable) return false;
    if (DisplayName != other.DisplayName) return false;
    if (Major != other.Major) return false;
    if (Digits != other.Digits) return false;
    if (CalendarAlias != other.CalendarAlias) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAssetId) hash ^= AssetId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasDepositAsset) hash ^= DepositAsset.GetHashCode();
    if (HasDepositable) hash ^= Depositable.GetHashCode();
    if (HasDisplayName) hash ^= DisplayName.GetHashCode();
    if (HasMajor) hash ^= Major.GetHashCode();
    if (HasDigits) hash ^= Digits.GetHashCode();
    if (HasCalendarAlias) hash ^= CalendarAlias.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasAssetId) {
      output.WriteRawTag(8);
      output.WriteInt64(AssetId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
    if (HasDepositAsset) {
      output.WriteRawTag(40);
      output.WriteBool(DepositAsset);
    }
    if (HasDepositable) {
      output.WriteRawTag(48);
      output.WriteBool(Depositable);
    }
    if (HasDisplayName) {
      output.WriteRawTag(58);
      output.WriteString(DisplayName);
    }
    if (HasMajor) {
      output.WriteRawTag(64);
      output.WriteBool(Major);
    }
    if (HasDigits) {
      output.WriteRawTag(72);
      output.WriteInt32(Digits);
    }
    if (HasCalendarAlias) {
      output.WriteRawTag(82);
      output.WriteString(CalendarAlias);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasAssetId) {
      output.WriteRawTag(8);
      output.WriteInt64(AssetId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
    if (HasDepositAsset) {
      output.WriteRawTag(40);
      output.WriteBool(DepositAsset);
    }
    if (HasDepositable) {
      output.WriteRawTag(48);
      output.WriteBool(Depositable);
    }
    if (HasDisplayName) {
      output.WriteRawTag(58);
      output.WriteString(DisplayName);
    }
    if (HasMajor) {
      output.WriteRawTag(64);
      output.WriteBool(Major);
    }
    if (HasDigits) {
      output.WriteRawTag(72);
      output.WriteInt32(Digits);
    }
    if (HasCalendarAlias) {
      output.WriteRawTag(82);
      output.WriteString(CalendarAlias);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AssetId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasDepositAsset) {
      size += 1 + 1;
    }
    if (HasDepositable) {
      size += 1 + 1;
    }
    if (HasDisplayName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
    }
    if (HasMajor) {
      size += 1 + 1;
    }
    if (HasDigits) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
    }
    if (HasCalendarAlias) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CalendarAlias);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoAsset other) {
    if (other == null) {
      return;
    }
    if (other.HasAssetId) {
      AssetId = other.AssetId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasDepositAsset) {
      DepositAsset = other.DepositAsset;
    }
    if (other.HasDepositable) {
      Depositable = other.Depositable;
    }
    if (other.HasDisplayName) {
      DisplayName = other.DisplayName;
    }
    if (other.HasMajor) {
      Major = other.Major;
    }
    if (other.HasDigits) {
      Digits = other.Digits;
    }
    if (other.HasCalendarAlias) {
      CalendarAlias = other.CalendarAlias;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          Type = (global::ProtoAssetType) input.ReadEnum();
          break;
        }
        case 40: {
          DepositAsset = input.ReadBool();
          break;
        }
        case 48: {
          Depositable = input.ReadBool();
          break;
        }
        case 58: {
          DisplayName = input.ReadString();
          break;
        }
        case 64: {
          Major = input.ReadBool();
          break;
        }
        case 72: {
          Digits = input.ReadInt32();
          break;
        }
        case 82: {
          CalendarAlias = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          AssetId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          Type = (global::ProtoAssetType) input.ReadEnum();
          break;
        }
        case 40: {
          DepositAsset = input.ReadBool();
          break;
        }
        case 48: {
          Depositable = input.ReadBool();
          break;
        }
        case 58: {
          DisplayName = input.ReadString();
          break;
        }
        case 64: {
          Major = input.ReadBool();
          break;
        }
        case 72: {
          Digits = input.ReadInt32();
          break;
        }
        case 82: {
          CalendarAlias = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Price Stream entity
/// </summary>
public sealed partial class ProtoPriceStream : pb::IMessage<ProtoPriceStream>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoPriceStream> _parser = new pb::MessageParser<ProtoPriceStream>(() => new ProtoPriceStream());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoPriceStream> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPriceStream() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPriceStream(ProtoPriceStream other) : this() {
    _hasBits0 = other._hasBits0;
    priceStreamId_ = other.priceStreamId_;
    name_ = other.name_;
    description_ = other.description_;
    deleted_ = other.deleted_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    priceStreamSymbol_ = other.priceStreamSymbol_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPriceStream Clone() {
    return new ProtoPriceStream(this);
  }

  /// <summary>Field number for the "priceStreamId" field.</summary>
  public const int PriceStreamIdFieldNumber = 1;
  private readonly static long PriceStreamIdDefaultValue = 0L;

  private long priceStreamId_;
  /// <summary>
  /// ID of Price Stream
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PriceStreamId {
    get { if ((_hasBits0 & 1) != 0) { return priceStreamId_; } else { return PriceStreamIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      priceStreamId_ = value;
    }
  }
  /// <summary>Gets whether the "priceStreamId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPriceStreamId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "priceStreamId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPriceStreamId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of Price Stream
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Price Stream
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "deleted" field.</summary>
  public const int DeletedFieldNumber = 4;
  private readonly static bool DeletedDefaultValue = false;

  private bool deleted_;
  /// <summary>
  /// If TRUE then Price Stream is deleted
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Deleted {
    get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      deleted_ = value;
    }
  }
  /// <summary>Gets whether the "deleted" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeleted {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "deleted" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeleted() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 5;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp of the last update of the Price Stream
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "priceStreamSymbol" field.</summary>
  public const int PriceStreamSymbolFieldNumber = 6;
  private static readonly pb::FieldCodec<global::ProtoPriceStreamSymbol> _repeated_priceStreamSymbol_codec
      = pb::FieldCodec.ForMessage(50, global::ProtoPriceStreamSymbol.Parser);
  private readonly pbc::RepeatedField<global::ProtoPriceStreamSymbol> priceStreamSymbol_ = new pbc::RepeatedField<global::ProtoPriceStreamSymbol>();
  /// <summary>
  /// Price Stream Symbols
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoPriceStreamSymbol> PriceStreamSymbol {
    get { return priceStreamSymbol_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoPriceStream);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoPriceStream other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PriceStreamId != other.PriceStreamId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (Deleted != other.Deleted) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if(!priceStreamSymbol_.Equals(other.priceStreamSymbol_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPriceStreamId) hash ^= PriceStreamId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasDeleted) hash ^= Deleted.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    hash ^= priceStreamSymbol_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPriceStreamId) {
      output.WriteRawTag(8);
      output.WriteInt64(PriceStreamId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasDeleted) {
      output.WriteRawTag(32);
      output.WriteBool(Deleted);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    priceStreamSymbol_.WriteTo(output, _repeated_priceStreamSymbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPriceStreamId) {
      output.WriteRawTag(8);
      output.WriteInt64(PriceStreamId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasDeleted) {
      output.WriteRawTag(32);
      output.WriteBool(Deleted);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    priceStreamSymbol_.WriteTo(ref output, _repeated_priceStreamSymbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPriceStreamId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PriceStreamId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasDeleted) {
      size += 1 + 1;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    size += priceStreamSymbol_.CalculateSize(_repeated_priceStreamSymbol_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoPriceStream other) {
    if (other == null) {
      return;
    }
    if (other.HasPriceStreamId) {
      PriceStreamId = other.PriceStreamId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasDeleted) {
      Deleted = other.Deleted;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    priceStreamSymbol_.Add(other.priceStreamSymbol_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PriceStreamId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          Deleted = input.ReadBool();
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 50: {
          priceStreamSymbol_.AddEntriesFrom(input, _repeated_priceStreamSymbol_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          PriceStreamId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          Deleted = input.ReadBool();
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 50: {
          priceStreamSymbol_.AddEntriesFrom(ref input, _repeated_priceStreamSymbol_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Price Stream settings per Symbol
/// </summary>
public sealed partial class ProtoPriceStreamSymbol : pb::IMessage<ProtoPriceStreamSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoPriceStreamSymbol> _parser = new pb::MessageParser<ProtoPriceStreamSymbol>(() => new ProtoPriceStreamSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoPriceStreamSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPriceStreamSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPriceStreamSymbol(ProtoPriceStreamSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    bidMarkup_ = other.bidMarkup_;
    askMarkup_ = other.askMarkup_;
    markupIsRelative_ = other.markupIsRelative_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoPriceStreamSymbol Clone() {
    return new ProtoPriceStreamSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// ID of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "bidMarkup" field.</summary>
  public const int BidMarkupFieldNumber = 2;
  private readonly static int BidMarkupDefaultValue = 0;

  private int bidMarkup_;
  /// <summary>
  /// Bid markup value (according to markup type)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BidMarkup {
    get { if ((_hasBits0 & 2) != 0) { return bidMarkup_; } else { return BidMarkupDefaultValue; } }
    set {
      _hasBits0 |= 2;
      bidMarkup_ = value;
    }
  }
  /// <summary>Gets whether the "bidMarkup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBidMarkup {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "bidMarkup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBidMarkup() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "askMarkup" field.</summary>
  public const int AskMarkupFieldNumber = 3;
  private readonly static int AskMarkupDefaultValue = 0;

  private int askMarkup_;
  /// <summary>
  /// Ask markup value (according to markup type)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AskMarkup {
    get { if ((_hasBits0 & 4) != 0) { return askMarkup_; } else { return AskMarkupDefaultValue; } }
    set {
      _hasBits0 |= 4;
      askMarkup_ = value;
    }
  }
  /// <summary>Gets whether the "askMarkup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAskMarkup {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "askMarkup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAskMarkup() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "markupIsRelative" field.</summary>
  public const int MarkupIsRelativeFieldNumber = 4;
  private readonly static bool MarkupIsRelativeDefaultValue = false;

  private bool markupIsRelative_;
  /// <summary>
  /// Specifies type of the markup (1 = relative; 0 = absolute)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool MarkupIsRelative {
    get { if ((_hasBits0 & 8) != 0) { return markupIsRelative_; } else { return MarkupIsRelativeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      markupIsRelative_ = value;
    }
  }
  /// <summary>Gets whether the "markupIsRelative" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarkupIsRelative {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "markupIsRelative" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarkupIsRelative() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoPriceStreamSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoPriceStreamSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (BidMarkup != other.BidMarkup) return false;
    if (AskMarkup != other.AskMarkup) return false;
    if (MarkupIsRelative != other.MarkupIsRelative) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasBidMarkup) hash ^= BidMarkup.GetHashCode();
    if (HasAskMarkup) hash ^= AskMarkup.GetHashCode();
    if (HasMarkupIsRelative) hash ^= MarkupIsRelative.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasBidMarkup) {
      output.WriteRawTag(16);
      output.WriteInt32(BidMarkup);
    }
    if (HasAskMarkup) {
      output.WriteRawTag(24);
      output.WriteInt32(AskMarkup);
    }
    if (HasMarkupIsRelative) {
      output.WriteRawTag(32);
      output.WriteBool(MarkupIsRelative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasBidMarkup) {
      output.WriteRawTag(16);
      output.WriteInt32(BidMarkup);
    }
    if (HasAskMarkup) {
      output.WriteRawTag(24);
      output.WriteInt32(AskMarkup);
    }
    if (HasMarkupIsRelative) {
      output.WriteRawTag(32);
      output.WriteBool(MarkupIsRelative);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasBidMarkup) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidMarkup);
    }
    if (HasAskMarkup) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskMarkup);
    }
    if (HasMarkupIsRelative) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoPriceStreamSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasBidMarkup) {
      BidMarkup = other.BidMarkup;
    }
    if (other.HasAskMarkup) {
      AskMarkup = other.AskMarkup;
    }
    if (other.HasMarkupIsRelative) {
      MarkupIsRelative = other.MarkupIsRelative;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          BidMarkup = input.ReadInt32();
          break;
        }
        case 24: {
          AskMarkup = input.ReadInt32();
          break;
        }
        case 32: {
          MarkupIsRelative = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          BidMarkup = input.ReadInt32();
          break;
        }
        case 24: {
          AskMarkup = input.ReadInt32();
          break;
        }
        case 32: {
          MarkupIsRelative = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Represents time frame of Symbol Session
/// </summary>
public sealed partial class ProtoInterval : pb::IMessage<ProtoInterval>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoInterval> _parser = new pb::MessageParser<ProtoInterval>(() => new ProtoInterval());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoInterval> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInterval() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInterval(ProtoInterval other) : this() {
    _hasBits0 = other._hasBits0;
    startSecond_ = other.startSecond_;
    endSecond_ = other.endSecond_;
    isGlobalSessionStart_ = other.isGlobalSessionStart_;
    isGlobalSessionEnd_ = other.isGlobalSessionEnd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInterval Clone() {
    return new ProtoInterval(this);
  }

  /// <summary>Field number for the "startSecond" field.</summary>
  public const int StartSecondFieldNumber = 3;
  private readonly static uint StartSecondDefaultValue = 0;

  private uint startSecond_;
  /// <summary>
  /// Start time of the Session. Seconds from the beginning of Sunday 00:00:00
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint StartSecond {
    get { if ((_hasBits0 & 1) != 0) { return startSecond_; } else { return StartSecondDefaultValue; } }
    set {
      _hasBits0 |= 1;
      startSecond_ = value;
    }
  }
  /// <summary>Gets whether the "startSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartSecond {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "startSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartSecond() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "endSecond" field.</summary>
  public const int EndSecondFieldNumber = 4;
  private readonly static uint EndSecondDefaultValue = 0;

  private uint endSecond_;
  /// <summary>
  /// End time of the Session. Seconds from the beginning of Sunday 00:00:00
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EndSecond {
    get { if ((_hasBits0 & 2) != 0) { return endSecond_; } else { return EndSecondDefaultValue; } }
    set {
      _hasBits0 |= 2;
      endSecond_ = value;
    }
  }
  /// <summary>Gets whether the "endSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEndSecond {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "endSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEndSecond() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "isGlobalSessionStart" field.</summary>
  public const int IsGlobalSessionStartFieldNumber = 5;
  private readonly static bool IsGlobalSessionStartDefaultValue = false;

  private bool isGlobalSessionStart_;
  /// <summary>
  /// If TRUE then Session start is considered as a start of the Global Session. Used for MOO desired timestamp validation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsGlobalSessionStart {
    get { if ((_hasBits0 & 4) != 0) { return isGlobalSessionStart_; } else { return IsGlobalSessionStartDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isGlobalSessionStart_ = value;
    }
  }
  /// <summary>Gets whether the "isGlobalSessionStart" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsGlobalSessionStart {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "isGlobalSessionStart" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsGlobalSessionStart() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "isGlobalSessionEnd" field.</summary>
  public const int IsGlobalSessionEndFieldNumber = 6;
  private readonly static bool IsGlobalSessionEndDefaultValue = false;

  private bool isGlobalSessionEnd_;
  /// <summary>
  /// If TRUE then Session end is considered as end of the Global session. SpotEvent.sessionClose, high, low will be regenerated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsGlobalSessionEnd {
    get { if ((_hasBits0 & 8) != 0) { return isGlobalSessionEnd_; } else { return IsGlobalSessionEndDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isGlobalSessionEnd_ = value;
    }
  }
  /// <summary>Gets whether the "isGlobalSessionEnd" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsGlobalSessionEnd {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "isGlobalSessionEnd" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsGlobalSessionEnd() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoInterval);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoInterval other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartSecond != other.StartSecond) return false;
    if (EndSecond != other.EndSecond) return false;
    if (IsGlobalSessionStart != other.IsGlobalSessionStart) return false;
    if (IsGlobalSessionEnd != other.IsGlobalSessionEnd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasStartSecond) hash ^= StartSecond.GetHashCode();
    if (HasEndSecond) hash ^= EndSecond.GetHashCode();
    if (HasIsGlobalSessionStart) hash ^= IsGlobalSessionStart.GetHashCode();
    if (HasIsGlobalSessionEnd) hash ^= IsGlobalSessionEnd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasStartSecond) {
      output.WriteRawTag(24);
      output.WriteUInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(32);
      output.WriteUInt32(EndSecond);
    }
    if (HasIsGlobalSessionStart) {
      output.WriteRawTag(40);
      output.WriteBool(IsGlobalSessionStart);
    }
    if (HasIsGlobalSessionEnd) {
      output.WriteRawTag(48);
      output.WriteBool(IsGlobalSessionEnd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasStartSecond) {
      output.WriteRawTag(24);
      output.WriteUInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(32);
      output.WriteUInt32(EndSecond);
    }
    if (HasIsGlobalSessionStart) {
      output.WriteRawTag(40);
      output.WriteBool(IsGlobalSessionStart);
    }
    if (HasIsGlobalSessionEnd) {
      output.WriteRawTag(48);
      output.WriteBool(IsGlobalSessionEnd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasStartSecond) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartSecond);
    }
    if (HasEndSecond) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndSecond);
    }
    if (HasIsGlobalSessionStart) {
      size += 1 + 1;
    }
    if (HasIsGlobalSessionEnd) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoInterval other) {
    if (other == null) {
      return;
    }
    if (other.HasStartSecond) {
      StartSecond = other.StartSecond;
    }
    if (other.HasEndSecond) {
      EndSecond = other.EndSecond;
    }
    if (other.HasIsGlobalSessionStart) {
      IsGlobalSessionStart = other.IsGlobalSessionStart;
    }
    if (other.HasIsGlobalSessionEnd) {
      IsGlobalSessionEnd = other.IsGlobalSessionEnd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 24: {
          StartSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          EndSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          IsGlobalSessionStart = input.ReadBool();
          break;
        }
        case 48: {
          IsGlobalSessionEnd = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 24: {
          StartSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          EndSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          IsGlobalSessionStart = input.ReadBool();
          break;
        }
        case 48: {
          IsGlobalSessionEnd = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Liquidity Feed per Symbol settings
/// </summary>
public sealed partial class ProtoLiquidityFeedSymbol : pb::IMessage<ProtoLiquidityFeedSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLiquidityFeedSymbol> _parser = new pb::MessageParser<ProtoLiquidityFeedSymbol>(() => new ProtoLiquidityFeedSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLiquidityFeedSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeedSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeedSymbol(ProtoLiquidityFeedSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    priceAlias_ = other.priceAlias_;
    tradeAlias_ = other.tradeAlias_;
    liquidityFeedSymbolId_ = other.liquidityFeedSymbolId_;
    liquidityFeedId_ = other.liquidityFeedId_;
    sendInLots_ = other.sendInLots_;
    dealExpirationTimeout_ = other.dealExpirationTimeout_;
    noQuoteTimeout_ = other.noQuoteTimeout_;
    lpLotSize_ = other.lpLotSize_;
    product_ = other.product_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeedSymbol Clone() {
    return new ProtoLiquidityFeedSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static int SymbolIdDefaultValue = 0;

  private int symbolId_;
  /// <summary>
  /// ID of the Liquidity Feed Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "priceAlias" field.</summary>
  public const int PriceAliasFieldNumber = 2;
  private readonly static string PriceAliasDefaultValue = "";

  private string priceAlias_;
  /// <summary>
  /// Symbol Name or ID on LP side for pricing. Should be provided by the LP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string PriceAlias {
    get { return priceAlias_ ?? PriceAliasDefaultValue; }
    set {
      priceAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "priceAlias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPriceAlias {
    get { return priceAlias_ != null; }
  }
  /// <summary>Clears the value of the "priceAlias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPriceAlias() {
    priceAlias_ = null;
  }

  /// <summary>Field number for the "tradeAlias" field.</summary>
  public const int TradeAliasFieldNumber = 3;
  private readonly static string TradeAliasDefaultValue = "";

  private string tradeAlias_;
  /// <summary>
  /// Symbol Name or ID on LP side for trading. Should be provided by the LP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TradeAlias {
    get { return tradeAlias_ ?? TradeAliasDefaultValue; }
    set {
      tradeAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "tradeAlias" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeAlias {
    get { return tradeAlias_ != null; }
  }
  /// <summary>Clears the value of the "tradeAlias" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeAlias() {
    tradeAlias_ = null;
  }

  /// <summary>Field number for the "liquidityFeedSymbolId" field.</summary>
  public const int LiquidityFeedSymbolIdFieldNumber = 4;
  private readonly static long LiquidityFeedSymbolIdDefaultValue = 0L;

  private long liquidityFeedSymbolId_;
  /// <summary>
  /// ID of Liquidity Feed Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LiquidityFeedSymbolId {
    get { if ((_hasBits0 & 2) != 0) { return liquidityFeedSymbolId_; } else { return LiquidityFeedSymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      liquidityFeedSymbolId_ = value;
    }
  }
  /// <summary>Gets whether the "liquidityFeedSymbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLiquidityFeedSymbolId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "liquidityFeedSymbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLiquidityFeedSymbolId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "liquidityFeedId" field.</summary>
  public const int LiquidityFeedIdFieldNumber = 5;
  private readonly static long LiquidityFeedIdDefaultValue = 0L;

  private long liquidityFeedId_;
  /// <summary>
  /// ID of Liquidity Feed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LiquidityFeedId {
    get { if ((_hasBits0 & 4) != 0) { return liquidityFeedId_; } else { return LiquidityFeedIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      liquidityFeedId_ = value;
    }
  }
  /// <summary>Gets whether the "liquidityFeedId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLiquidityFeedId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "liquidityFeedId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLiquidityFeedId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "sendInLots" field.</summary>
  public const int SendInLotsFieldNumber = 6;
  private readonly static bool SendInLotsDefaultValue = false;

  private bool sendInLots_;
  /// <summary>
  /// Determines if Volume in Order requests to LP should be sent in Lots. Also determines logic of interpretation of volume in execution events from LP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SendInLots {
    get { if ((_hasBits0 & 8) != 0) { return sendInLots_; } else { return SendInLotsDefaultValue; } }
    set {
      _hasBits0 |= 8;
      sendInLots_ = value;
    }
  }
  /// <summary>Gets whether the "sendInLots" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSendInLots {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "sendInLots" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSendInLots() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "dealExpirationTimeout" field.</summary>
  public const int DealExpirationTimeoutFieldNumber = 7;
  private readonly static long DealExpirationTimeoutDefaultValue = 0L;

  private long dealExpirationTimeout_;
  /// <summary>
  /// Timeout in milliseconds for receiving execution result from LP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DealExpirationTimeout {
    get { if ((_hasBits0 & 16) != 0) { return dealExpirationTimeout_; } else { return DealExpirationTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 16;
      dealExpirationTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "dealExpirationTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealExpirationTimeout {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "dealExpirationTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealExpirationTimeout() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "noQuoteTimeout" field.</summary>
  public const int NoQuoteTimeoutFieldNumber = 8;
  private readonly static long NoQuoteTimeoutDefaultValue = 0L;

  private long noQuoteTimeout_;
  /// <summary>
  /// Timeout in milliseconds for receiving quotes from LP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NoQuoteTimeout {
    get { if ((_hasBits0 & 32) != 0) { return noQuoteTimeout_; } else { return NoQuoteTimeoutDefaultValue; } }
    set {
      _hasBits0 |= 32;
      noQuoteTimeout_ = value;
    }
  }
  /// <summary>Gets whether the "noQuoteTimeout" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNoQuoteTimeout {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "noQuoteTimeout" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNoQuoteTimeout() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "lpLotSize" field.</summary>
  public const int LpLotSizeFieldNumber = 9;
  private readonly static long LpLotSizeDefaultValue = 0L;

  private long lpLotSize_;
  /// <summary>
  /// Lot size on LP side
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LpLotSize {
    get { if ((_hasBits0 & 64) != 0) { return lpLotSize_; } else { return LpLotSizeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      lpLotSize_ = value;
    }
  }
  /// <summary>Gets whether the "lpLotSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLpLotSize {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "lpLotSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLpLotSize() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "product" field.</summary>
  public const int ProductFieldNumber = 10;
  private readonly static int ProductDefaultValue = 0;

  private int product_;
  /// <summary>
  /// Specific value used by some LPs for different purposes. Get details for specific LP from Spotware support
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Product {
    get { if ((_hasBits0 & 128) != 0) { return product_; } else { return ProductDefaultValue; } }
    set {
      _hasBits0 |= 128;
      product_ = value;
    }
  }
  /// <summary>Gets whether the "product" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProduct {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "product" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProduct() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLiquidityFeedSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLiquidityFeedSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (PriceAlias != other.PriceAlias) return false;
    if (TradeAlias != other.TradeAlias) return false;
    if (LiquidityFeedSymbolId != other.LiquidityFeedSymbolId) return false;
    if (LiquidityFeedId != other.LiquidityFeedId) return false;
    if (SendInLots != other.SendInLots) return false;
    if (DealExpirationTimeout != other.DealExpirationTimeout) return false;
    if (NoQuoteTimeout != other.NoQuoteTimeout) return false;
    if (LpLotSize != other.LpLotSize) return false;
    if (Product != other.Product) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasPriceAlias) hash ^= PriceAlias.GetHashCode();
    if (HasTradeAlias) hash ^= TradeAlias.GetHashCode();
    if (HasLiquidityFeedSymbolId) hash ^= LiquidityFeedSymbolId.GetHashCode();
    if (HasLiquidityFeedId) hash ^= LiquidityFeedId.GetHashCode();
    if (HasSendInLots) hash ^= SendInLots.GetHashCode();
    if (HasDealExpirationTimeout) hash ^= DealExpirationTimeout.GetHashCode();
    if (HasNoQuoteTimeout) hash ^= NoQuoteTimeout.GetHashCode();
    if (HasLpLotSize) hash ^= LpLotSize.GetHashCode();
    if (HasProduct) hash ^= Product.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt32(SymbolId);
    }
    if (HasPriceAlias) {
      output.WriteRawTag(18);
      output.WriteString(PriceAlias);
    }
    if (HasTradeAlias) {
      output.WriteRawTag(26);
      output.WriteString(TradeAlias);
    }
    if (HasLiquidityFeedSymbolId) {
      output.WriteRawTag(32);
      output.WriteInt64(LiquidityFeedSymbolId);
    }
    if (HasLiquidityFeedId) {
      output.WriteRawTag(40);
      output.WriteInt64(LiquidityFeedId);
    }
    if (HasSendInLots) {
      output.WriteRawTag(48);
      output.WriteBool(SendInLots);
    }
    if (HasDealExpirationTimeout) {
      output.WriteRawTag(56);
      output.WriteInt64(DealExpirationTimeout);
    }
    if (HasNoQuoteTimeout) {
      output.WriteRawTag(64);
      output.WriteInt64(NoQuoteTimeout);
    }
    if (HasLpLotSize) {
      output.WriteRawTag(72);
      output.WriteInt64(LpLotSize);
    }
    if (HasProduct) {
      output.WriteRawTag(80);
      output.WriteInt32(Product);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt32(SymbolId);
    }
    if (HasPriceAlias) {
      output.WriteRawTag(18);
      output.WriteString(PriceAlias);
    }
    if (HasTradeAlias) {
      output.WriteRawTag(26);
      output.WriteString(TradeAlias);
    }
    if (HasLiquidityFeedSymbolId) {
      output.WriteRawTag(32);
      output.WriteInt64(LiquidityFeedSymbolId);
    }
    if (HasLiquidityFeedId) {
      output.WriteRawTag(40);
      output.WriteInt64(LiquidityFeedId);
    }
    if (HasSendInLots) {
      output.WriteRawTag(48);
      output.WriteBool(SendInLots);
    }
    if (HasDealExpirationTimeout) {
      output.WriteRawTag(56);
      output.WriteInt64(DealExpirationTimeout);
    }
    if (HasNoQuoteTimeout) {
      output.WriteRawTag(64);
      output.WriteInt64(NoQuoteTimeout);
    }
    if (HasLpLotSize) {
      output.WriteRawTag(72);
      output.WriteInt64(LpLotSize);
    }
    if (HasProduct) {
      output.WriteRawTag(80);
      output.WriteInt32(Product);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SymbolId);
    }
    if (HasPriceAlias) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PriceAlias);
    }
    if (HasTradeAlias) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAlias);
    }
    if (HasLiquidityFeedSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiquidityFeedSymbolId);
    }
    if (HasLiquidityFeedId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiquidityFeedId);
    }
    if (HasSendInLots) {
      size += 1 + 1;
    }
    if (HasDealExpirationTimeout) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealExpirationTimeout);
    }
    if (HasNoQuoteTimeout) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NoQuoteTimeout);
    }
    if (HasLpLotSize) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LpLotSize);
    }
    if (HasProduct) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Product);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLiquidityFeedSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasPriceAlias) {
      PriceAlias = other.PriceAlias;
    }
    if (other.HasTradeAlias) {
      TradeAlias = other.TradeAlias;
    }
    if (other.HasLiquidityFeedSymbolId) {
      LiquidityFeedSymbolId = other.LiquidityFeedSymbolId;
    }
    if (other.HasLiquidityFeedId) {
      LiquidityFeedId = other.LiquidityFeedId;
    }
    if (other.HasSendInLots) {
      SendInLots = other.SendInLots;
    }
    if (other.HasDealExpirationTimeout) {
      DealExpirationTimeout = other.DealExpirationTimeout;
    }
    if (other.HasNoQuoteTimeout) {
      NoQuoteTimeout = other.NoQuoteTimeout;
    }
    if (other.HasLpLotSize) {
      LpLotSize = other.LpLotSize;
    }
    if (other.HasProduct) {
      Product = other.Product;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt32();
          break;
        }
        case 18: {
          PriceAlias = input.ReadString();
          break;
        }
        case 26: {
          TradeAlias = input.ReadString();
          break;
        }
        case 32: {
          LiquidityFeedSymbolId = input.ReadInt64();
          break;
        }
        case 40: {
          LiquidityFeedId = input.ReadInt64();
          break;
        }
        case 48: {
          SendInLots = input.ReadBool();
          break;
        }
        case 56: {
          DealExpirationTimeout = input.ReadInt64();
          break;
        }
        case 64: {
          NoQuoteTimeout = input.ReadInt64();
          break;
        }
        case 72: {
          LpLotSize = input.ReadInt64();
          break;
        }
        case 80: {
          Product = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt32();
          break;
        }
        case 18: {
          PriceAlias = input.ReadString();
          break;
        }
        case 26: {
          TradeAlias = input.ReadString();
          break;
        }
        case 32: {
          LiquidityFeedSymbolId = input.ReadInt64();
          break;
        }
        case 40: {
          LiquidityFeedId = input.ReadInt64();
          break;
        }
        case 48: {
          SendInLots = input.ReadBool();
          break;
        }
        case 56: {
          DealExpirationTimeout = input.ReadInt64();
          break;
        }
        case 64: {
          NoQuoteTimeout = input.ReadInt64();
          break;
        }
        case 72: {
          LpLotSize = input.ReadInt64();
          break;
        }
        case 80: {
          Product = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ProtoLiquidityFeedFIXSettings : pb::IMessage<ProtoLiquidityFeedFIXSettings>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLiquidityFeedFIXSettings> _parser = new pb::MessageParser<ProtoLiquidityFeedFIXSettings>(() => new ProtoLiquidityFeedFIXSettings());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLiquidityFeedFIXSettings> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeedFIXSettings() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeedFIXSettings(ProtoLiquidityFeedFIXSettings other) : this() {
    _hasBits0 = other._hasBits0;
    login_ = other.login_;
    socketHost_ = other.socketHost_;
    socketPort_ = other.socketPort_;
    senderCompId_ = other.senderCompId_;
    targetCompId_ = other.targetCompId_;
    timezone_ = other.timezone_;
    sessionStartDay_ = other.sessionStartDay_;
    sessionStartTime_ = other.sessionStartTime_;
    sessionEndDay_ = other.sessionEndDay_;
    sessionEndTime_ = other.sessionEndTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeedFIXSettings Clone() {
    return new ProtoLiquidityFeedFIXSettings(this);
  }

  /// <summary>Field number for the "login" field.</summary>
  public const int LoginFieldNumber = 1;
  private readonly static string LoginDefaultValue = "";

  private string login_;
  /// <summary>
  ///The login for the FIX connection.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Login {
    get { return login_ ?? LoginDefaultValue; }
    set {
      login_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "login" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLogin {
    get { return login_ != null; }
  }
  /// <summary>Clears the value of the "login" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLogin() {
    login_ = null;
  }

  /// <summary>Field number for the "socketHost" field.</summary>
  public const int SocketHostFieldNumber = 2;
  private readonly static string SocketHostDefaultValue = "";

  private string socketHost_;
  /// <summary>
  ///The host of the server.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SocketHost {
    get { return socketHost_ ?? SocketHostDefaultValue; }
    set {
      socketHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "socketHost" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSocketHost {
    get { return socketHost_ != null; }
  }
  /// <summary>Clears the value of the "socketHost" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSocketHost() {
    socketHost_ = null;
  }

  /// <summary>Field number for the "socketPort" field.</summary>
  public const int SocketPortFieldNumber = 3;
  private readonly static int SocketPortDefaultValue = 0;

  private int socketPort_;
  /// <summary>
  ///The port of the server.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SocketPort {
    get { if ((_hasBits0 & 1) != 0) { return socketPort_; } else { return SocketPortDefaultValue; } }
    set {
      _hasBits0 |= 1;
      socketPort_ = value;
    }
  }
  /// <summary>Gets whether the "socketPort" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSocketPort {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "socketPort" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSocketPort() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "senderCompId" field.</summary>
  public const int SenderCompIdFieldNumber = 4;
  private readonly static string SenderCompIdDefaultValue = "";

  private string senderCompId_;
  /// <summary>
  ///The senderCompId.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SenderCompId {
    get { return senderCompId_ ?? SenderCompIdDefaultValue; }
    set {
      senderCompId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "senderCompId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSenderCompId {
    get { return senderCompId_ != null; }
  }
  /// <summary>Clears the value of the "senderCompId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSenderCompId() {
    senderCompId_ = null;
  }

  /// <summary>Field number for the "targetCompId" field.</summary>
  public const int TargetCompIdFieldNumber = 5;
  private readonly static string TargetCompIdDefaultValue = "";

  private string targetCompId_;
  /// <summary>
  ///The targetCompId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TargetCompId {
    get { return targetCompId_ ?? TargetCompIdDefaultValue; }
    set {
      targetCompId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "targetCompId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTargetCompId {
    get { return targetCompId_ != null; }
  }
  /// <summary>Clears the value of the "targetCompId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTargetCompId() {
    targetCompId_ = null;
  }

  /// <summary>Field number for the "timezone" field.</summary>
  public const int TimezoneFieldNumber = 6;
  private readonly static string TimezoneDefaultValue = "";

  private string timezone_;
  /// <summary>
  ///The time zone used for connection settings.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Timezone {
    get { return timezone_ ?? TimezoneDefaultValue; }
    set {
      timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "timezone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimezone {
    get { return timezone_ != null; }
  }
  /// <summary>Clears the value of the "timezone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimezone() {
    timezone_ = null;
  }

  /// <summary>Field number for the "sessionStartDay" field.</summary>
  public const int SessionStartDayFieldNumber = 7;
  private readonly static global::ProtoDayOfWeek SessionStartDayDefaultValue = global::ProtoDayOfWeek.None;

  private global::ProtoDayOfWeek sessionStartDay_;
  /// <summary>
  ///The day of the week when the session starts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDayOfWeek SessionStartDay {
    get { if ((_hasBits0 & 2) != 0) { return sessionStartDay_; } else { return SessionStartDayDefaultValue; } }
    set {
      _hasBits0 |= 2;
      sessionStartDay_ = value;
    }
  }
  /// <summary>Gets whether the "sessionStartDay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionStartDay {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "sessionStartDay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionStartDay() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "sessionStartTime" field.</summary>
  public const int SessionStartTimeFieldNumber = 8;
  private readonly static string SessionStartTimeDefaultValue = "";

  private string sessionStartTime_;
  /// <summary>
  ///The time when the session starts denoted in the specified time zone.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionStartTime {
    get { return sessionStartTime_ ?? SessionStartTimeDefaultValue; }
    set {
      sessionStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "sessionStartTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionStartTime {
    get { return sessionStartTime_ != null; }
  }
  /// <summary>Clears the value of the "sessionStartTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionStartTime() {
    sessionStartTime_ = null;
  }

  /// <summary>Field number for the "sessionEndDay" field.</summary>
  public const int SessionEndDayFieldNumber = 9;
  private readonly static global::ProtoDayOfWeek SessionEndDayDefaultValue = global::ProtoDayOfWeek.None;

  private global::ProtoDayOfWeek sessionEndDay_;
  /// <summary>
  ///The day of the week when the session starts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDayOfWeek SessionEndDay {
    get { if ((_hasBits0 & 4) != 0) { return sessionEndDay_; } else { return SessionEndDayDefaultValue; } }
    set {
      _hasBits0 |= 4;
      sessionEndDay_ = value;
    }
  }
  /// <summary>Gets whether the "sessionEndDay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionEndDay {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "sessionEndDay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionEndDay() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "sessionEndTime" field.</summary>
  public const int SessionEndTimeFieldNumber = 10;
  private readonly static string SessionEndTimeDefaultValue = "";

  private string sessionEndTime_;
  /// <summary>
  ///The time when the session ends denoted in the specified time zone.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionEndTime {
    get { return sessionEndTime_ ?? SessionEndTimeDefaultValue; }
    set {
      sessionEndTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "sessionEndTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionEndTime {
    get { return sessionEndTime_ != null; }
  }
  /// <summary>Clears the value of the "sessionEndTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionEndTime() {
    sessionEndTime_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLiquidityFeedFIXSettings);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLiquidityFeedFIXSettings other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Login != other.Login) return false;
    if (SocketHost != other.SocketHost) return false;
    if (SocketPort != other.SocketPort) return false;
    if (SenderCompId != other.SenderCompId) return false;
    if (TargetCompId != other.TargetCompId) return false;
    if (Timezone != other.Timezone) return false;
    if (SessionStartDay != other.SessionStartDay) return false;
    if (SessionStartTime != other.SessionStartTime) return false;
    if (SessionEndDay != other.SessionEndDay) return false;
    if (SessionEndTime != other.SessionEndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLogin) hash ^= Login.GetHashCode();
    if (HasSocketHost) hash ^= SocketHost.GetHashCode();
    if (HasSocketPort) hash ^= SocketPort.GetHashCode();
    if (HasSenderCompId) hash ^= SenderCompId.GetHashCode();
    if (HasTargetCompId) hash ^= TargetCompId.GetHashCode();
    if (HasTimezone) hash ^= Timezone.GetHashCode();
    if (HasSessionStartDay) hash ^= SessionStartDay.GetHashCode();
    if (HasSessionStartTime) hash ^= SessionStartTime.GetHashCode();
    if (HasSessionEndDay) hash ^= SessionEndDay.GetHashCode();
    if (HasSessionEndTime) hash ^= SessionEndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLogin) {
      output.WriteRawTag(10);
      output.WriteString(Login);
    }
    if (HasSocketHost) {
      output.WriteRawTag(18);
      output.WriteString(SocketHost);
    }
    if (HasSocketPort) {
      output.WriteRawTag(24);
      output.WriteInt32(SocketPort);
    }
    if (HasSenderCompId) {
      output.WriteRawTag(34);
      output.WriteString(SenderCompId);
    }
    if (HasTargetCompId) {
      output.WriteRawTag(42);
      output.WriteString(TargetCompId);
    }
    if (HasTimezone) {
      output.WriteRawTag(50);
      output.WriteString(Timezone);
    }
    if (HasSessionStartDay) {
      output.WriteRawTag(56);
      output.WriteEnum((int) SessionStartDay);
    }
    if (HasSessionStartTime) {
      output.WriteRawTag(66);
      output.WriteString(SessionStartTime);
    }
    if (HasSessionEndDay) {
      output.WriteRawTag(72);
      output.WriteEnum((int) SessionEndDay);
    }
    if (HasSessionEndTime) {
      output.WriteRawTag(82);
      output.WriteString(SessionEndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLogin) {
      output.WriteRawTag(10);
      output.WriteString(Login);
    }
    if (HasSocketHost) {
      output.WriteRawTag(18);
      output.WriteString(SocketHost);
    }
    if (HasSocketPort) {
      output.WriteRawTag(24);
      output.WriteInt32(SocketPort);
    }
    if (HasSenderCompId) {
      output.WriteRawTag(34);
      output.WriteString(SenderCompId);
    }
    if (HasTargetCompId) {
      output.WriteRawTag(42);
      output.WriteString(TargetCompId);
    }
    if (HasTimezone) {
      output.WriteRawTag(50);
      output.WriteString(Timezone);
    }
    if (HasSessionStartDay) {
      output.WriteRawTag(56);
      output.WriteEnum((int) SessionStartDay);
    }
    if (HasSessionStartTime) {
      output.WriteRawTag(66);
      output.WriteString(SessionStartTime);
    }
    if (HasSessionEndDay) {
      output.WriteRawTag(72);
      output.WriteEnum((int) SessionEndDay);
    }
    if (HasSessionEndTime) {
      output.WriteRawTag(82);
      output.WriteString(SessionEndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLogin) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Login);
    }
    if (HasSocketHost) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SocketHost);
    }
    if (HasSocketPort) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SocketPort);
    }
    if (HasSenderCompId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderCompId);
    }
    if (HasTargetCompId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetCompId);
    }
    if (HasTimezone) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
    }
    if (HasSessionStartDay) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionStartDay);
    }
    if (HasSessionStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionStartTime);
    }
    if (HasSessionEndDay) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionEndDay);
    }
    if (HasSessionEndTime) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionEndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLiquidityFeedFIXSettings other) {
    if (other == null) {
      return;
    }
    if (other.HasLogin) {
      Login = other.Login;
    }
    if (other.HasSocketHost) {
      SocketHost = other.SocketHost;
    }
    if (other.HasSocketPort) {
      SocketPort = other.SocketPort;
    }
    if (other.HasSenderCompId) {
      SenderCompId = other.SenderCompId;
    }
    if (other.HasTargetCompId) {
      TargetCompId = other.TargetCompId;
    }
    if (other.HasTimezone) {
      Timezone = other.Timezone;
    }
    if (other.HasSessionStartDay) {
      SessionStartDay = other.SessionStartDay;
    }
    if (other.HasSessionStartTime) {
      SessionStartTime = other.SessionStartTime;
    }
    if (other.HasSessionEndDay) {
      SessionEndDay = other.SessionEndDay;
    }
    if (other.HasSessionEndTime) {
      SessionEndTime = other.SessionEndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Login = input.ReadString();
          break;
        }
        case 18: {
          SocketHost = input.ReadString();
          break;
        }
        case 24: {
          SocketPort = input.ReadInt32();
          break;
        }
        case 34: {
          SenderCompId = input.ReadString();
          break;
        }
        case 42: {
          TargetCompId = input.ReadString();
          break;
        }
        case 50: {
          Timezone = input.ReadString();
          break;
        }
        case 56: {
          SessionStartDay = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 66: {
          SessionStartTime = input.ReadString();
          break;
        }
        case 72: {
          SessionEndDay = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 82: {
          SessionEndTime = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Login = input.ReadString();
          break;
        }
        case 18: {
          SocketHost = input.ReadString();
          break;
        }
        case 24: {
          SocketPort = input.ReadInt32();
          break;
        }
        case 34: {
          SenderCompId = input.ReadString();
          break;
        }
        case 42: {
          TargetCompId = input.ReadString();
          break;
        }
        case 50: {
          Timezone = input.ReadString();
          break;
        }
        case 56: {
          SessionStartDay = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 66: {
          SessionStartTime = input.ReadString();
          break;
        }
        case 72: {
          SessionEndDay = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 82: {
          SessionEndTime = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Liquidity feed entity
/// </summary>
public sealed partial class ProtoLiquidityFeed : pb::IMessage<ProtoLiquidityFeed>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLiquidityFeed> _parser = new pb::MessageParser<ProtoLiquidityFeed>(() => new ProtoLiquidityFeed());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLiquidityFeed> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeed() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeed(ProtoLiquidityFeed other) : this() {
    _hasBits0 = other._hasBits0;
    liquidityFeedId_ = other.liquidityFeedId_;
    type_ = other.type_;
    name_ = other.name_;
    configurationSuffix_ = other.configurationSuffix_;
    enabled_ = other.enabled_;
    pricingFIXSettings_ = other.pricingFIXSettings_ != null ? other.pricingFIXSettings_.Clone() : null;
    tradingFIXSettings_ = other.tradingFIXSettings_ != null ? other.tradingFIXSettings_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLiquidityFeed Clone() {
    return new ProtoLiquidityFeed(this);
  }

  /// <summary>Field number for the "liquidityFeedId" field.</summary>
  public const int LiquidityFeedIdFieldNumber = 1;
  private readonly static long LiquidityFeedIdDefaultValue = 0L;

  private long liquidityFeedId_;
  /// <summary>
  /// ID of Liquidity Feed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LiquidityFeedId {
    get { if ((_hasBits0 & 1) != 0) { return liquidityFeedId_; } else { return LiquidityFeedIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      liquidityFeedId_ = value;
    }
  }
  /// <summary>Gets whether the "liquidityFeedId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLiquidityFeedId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "liquidityFeedId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLiquidityFeedId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private readonly static string TypeDefaultValue = "";

  private string type_;
  /// <summary>
  /// Type of Liquidity Feed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Type {
    get { return type_ ?? TypeDefaultValue; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasType {
    get { return type_ != null; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearType() {
    type_ = null;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of Liquidity Feed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "configurationSuffix" field.</summary>
  public const int ConfigurationSuffixFieldNumber = 10;
  private readonly static string ConfigurationSuffixDefaultValue = "";

  private string configurationSuffix_;
  /// <summary>
  /// Suffix for configuration settings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ConfigurationSuffix {
    get { return configurationSuffix_ ?? ConfigurationSuffixDefaultValue; }
    set {
      configurationSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "configurationSuffix" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConfigurationSuffix {
    get { return configurationSuffix_ != null; }
  }
  /// <summary>Clears the value of the "configurationSuffix" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConfigurationSuffix() {
    configurationSuffix_ = null;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 12;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// Enables Liquidity Feed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 2) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "pricingFIXSettings" field.</summary>
  public const int PricingFIXSettingsFieldNumber = 14;
  private global::ProtoLiquidityFeedFIXSettings pricingFIXSettings_;
  /// <summary>
  /// If Liquidity Feed uses FIX protocol, then this is FIX settings for pricing
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoLiquidityFeedFIXSettings PricingFIXSettings {
    get { return pricingFIXSettings_; }
    set {
      pricingFIXSettings_ = value;
    }
  }

  /// <summary>Field number for the "tradingFIXSettings" field.</summary>
  public const int TradingFIXSettingsFieldNumber = 15;
  private global::ProtoLiquidityFeedFIXSettings tradingFIXSettings_;
  /// <summary>
  /// If Liquidity Feed uses FIX protocol, then this is FIX settings for trading
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoLiquidityFeedFIXSettings TradingFIXSettings {
    get { return tradingFIXSettings_; }
    set {
      tradingFIXSettings_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLiquidityFeed);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLiquidityFeed other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LiquidityFeedId != other.LiquidityFeedId) return false;
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    if (ConfigurationSuffix != other.ConfigurationSuffix) return false;
    if (Enabled != other.Enabled) return false;
    if (!object.Equals(PricingFIXSettings, other.PricingFIXSettings)) return false;
    if (!object.Equals(TradingFIXSettings, other.TradingFIXSettings)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLiquidityFeedId) hash ^= LiquidityFeedId.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasConfigurationSuffix) hash ^= ConfigurationSuffix.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (pricingFIXSettings_ != null) hash ^= PricingFIXSettings.GetHashCode();
    if (tradingFIXSettings_ != null) hash ^= TradingFIXSettings.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLiquidityFeedId) {
      output.WriteRawTag(8);
      output.WriteInt64(LiquidityFeedId);
    }
    if (HasType) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasConfigurationSuffix) {
      output.WriteRawTag(82);
      output.WriteString(ConfigurationSuffix);
    }
    if (HasEnabled) {
      output.WriteRawTag(96);
      output.WriteBool(Enabled);
    }
    if (pricingFIXSettings_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(PricingFIXSettings);
    }
    if (tradingFIXSettings_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(TradingFIXSettings);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLiquidityFeedId) {
      output.WriteRawTag(8);
      output.WriteInt64(LiquidityFeedId);
    }
    if (HasType) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasConfigurationSuffix) {
      output.WriteRawTag(82);
      output.WriteString(ConfigurationSuffix);
    }
    if (HasEnabled) {
      output.WriteRawTag(96);
      output.WriteBool(Enabled);
    }
    if (pricingFIXSettings_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(PricingFIXSettings);
    }
    if (tradingFIXSettings_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(TradingFIXSettings);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLiquidityFeedId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiquidityFeedId);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasConfigurationSuffix) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigurationSuffix);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (pricingFIXSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PricingFIXSettings);
    }
    if (tradingFIXSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradingFIXSettings);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLiquidityFeed other) {
    if (other == null) {
      return;
    }
    if (other.HasLiquidityFeedId) {
      LiquidityFeedId = other.LiquidityFeedId;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasConfigurationSuffix) {
      ConfigurationSuffix = other.ConfigurationSuffix;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.pricingFIXSettings_ != null) {
      if (pricingFIXSettings_ == null) {
        PricingFIXSettings = new global::ProtoLiquidityFeedFIXSettings();
      }
      PricingFIXSettings.MergeFrom(other.PricingFIXSettings);
    }
    if (other.tradingFIXSettings_ != null) {
      if (tradingFIXSettings_ == null) {
        TradingFIXSettings = new global::ProtoLiquidityFeedFIXSettings();
      }
      TradingFIXSettings.MergeFrom(other.TradingFIXSettings);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LiquidityFeedId = input.ReadInt64();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 82: {
          ConfigurationSuffix = input.ReadString();
          break;
        }
        case 96: {
          Enabled = input.ReadBool();
          break;
        }
        case 114: {
          if (pricingFIXSettings_ == null) {
            PricingFIXSettings = new global::ProtoLiquidityFeedFIXSettings();
          }
          input.ReadMessage(PricingFIXSettings);
          break;
        }
        case 122: {
          if (tradingFIXSettings_ == null) {
            TradingFIXSettings = new global::ProtoLiquidityFeedFIXSettings();
          }
          input.ReadMessage(TradingFIXSettings);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          LiquidityFeedId = input.ReadInt64();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 82: {
          ConfigurationSuffix = input.ReadString();
          break;
        }
        case 96: {
          Enabled = input.ReadBool();
          break;
        }
        case 114: {
          if (pricingFIXSettings_ == null) {
            PricingFIXSettings = new global::ProtoLiquidityFeedFIXSettings();
          }
          input.ReadMessage(PricingFIXSettings);
          break;
        }
        case 122: {
          if (tradingFIXSettings_ == null) {
            TradingFIXSettings = new global::ProtoLiquidityFeedFIXSettings();
          }
          input.ReadMessage(TradingFIXSettings);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Deal (execution) entity
/// </summary>
public sealed partial class ProtoDeal : pb::IMessage<ProtoDeal>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoDeal> _parser = new pb::MessageParser<ProtoDeal>(() => new ProtoDeal());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  private int _hasBits1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoDeal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDeal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDeal(ProtoDeal other) : this() {
    _hasBits0 = other._hasBits0;
    _hasBits1 = other._hasBits1;
    dealId_ = other.dealId_;
    orderId_ = other.orderId_;
    positionId_ = other.positionId_;
    traderId_ = other.traderId_;
    volume_ = other.volume_;
    filledVolume_ = other.filledVolume_;
    symbolId_ = other.symbolId_;
    createTimestamp_ = other.createTimestamp_;
    executionTimestamp_ = other.executionTimestamp_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    executionPrice_ = other.executionPrice_;
    limitPrice_ = other.limitPrice_;
    tradeSide_ = other.tradeSide_;
    dealStatus_ = other.dealStatus_;
    dealType_ = other.dealType_;
    marginRate_ = other.marginRate_;
    commission_ = other.commission_;
    clientRequestId_ = other.clientRequestId_;
    bookType_ = other.bookType_;
    lpExecutionPrice_ = other.lpExecutionPrice_;
    lpOrderId_ = other.lpOrderId_;
    label_ = other.label_;
    channel_ = other.channel_;
    comment_ = other.comment_;
    priceSnapshotId_ = other.priceSnapshotId_;
    baseToUsdConversionRate_ = other.baseToUsdConversionRate_;
    feedId_ = other.feedId_;
    closePositionDetail_ = other.closePositionDetail_ != null ? other.closePositionDetail_.Clone() : null;
    serverOrderId_ = other.serverOrderId_;
    introducingBrokerCommission_ = other.introducingBrokerCommission_;
    pocketCommission_ = other.pocketCommission_;
    pocketMarkup_ = other.pocketMarkup_;
    introducedByBrokerId_ = other.introducedByBrokerId_;
    mirroringCommission_ = other.mirroringCommission_;
    measurementUnits_ = other.measurementUnits_;
    lotSize_ = other.lotSize_;
    markup_ = other.markup_;
    innerMirroringFee_ = other.innerMirroringFee_;
    totalVolumeInUsd_ = other.totalVolumeInUsd_;
    spreadBetting_ = other.spreadBetting_;
    stake_ = other.stake_;
    desiredVWAP_ = other.desiredVWAP_;
    marketVWAP_ = other.marketVWAP_;
    tolerance_ = other.tolerance_;
    rejectReason_ = other.rejectReason_;
    manual_ = other.manual_;
    filledEurVolume_ = other.filledEurVolume_;
    filledGbpVolume_ = other.filledGbpVolume_;
    equity_ = other.equity_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDeal Clone() {
    return new ProtoDeal(this);
  }

  /// <summary>Field number for the "dealId" field.</summary>
  public const int DealIdFieldNumber = 1;
  private readonly static long DealIdDefaultValue = 0L;

  private long dealId_;
  /// <summary>
  /// ID of the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DealId {
    get { if ((_hasBits0 & 1) != 0) { return dealId_; } else { return DealIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dealId_ = value;
    }
  }
  /// <summary>Gets whether the "dealId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "dealId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 2;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// ID of corresponding trade Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OrderId {
    get { if ((_hasBits0 & 2) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 3;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// ID of corresponding Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 4;
  private readonly static long TraderIdDefaultValue = 0L;

  private long traderId_;
  /// <summary>
  /// ID of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderId {
    get { if ((_hasBits0 & 8) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 5;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Requested volume
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 16) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "filledVolume" field.</summary>
  public const int FilledVolumeFieldNumber = 6;
  private readonly static long FilledVolumeDefaultValue = 0L;

  private long filledVolume_;
  /// <summary>
  /// Volume, filled under this Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FilledVolume {
    get { if ((_hasBits0 & 32) != 0) { return filledVolume_; } else { return FilledVolumeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      filledVolume_ = value;
    }
  }
  /// <summary>Gets whether the "filledVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilledVolume {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "filledVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilledVolume() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 7;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 64) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "createTimestamp" field.</summary>
  public const int CreateTimestampFieldNumber = 8;
  private readonly static long CreateTimestampDefaultValue = 0L;

  private long createTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Deal creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CreateTimestamp {
    get { if ((_hasBits0 & 128) != 0) { return createTimestamp_; } else { return CreateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 128;
      createTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "createTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCreateTimestamp {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "createTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCreateTimestamp() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "executionTimestamp" field.</summary>
  public const int ExecutionTimestampFieldNumber = 9;
  private readonly static long ExecutionTimestampDefaultValue = 0L;

  private long executionTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Deal execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutionTimestamp {
    get { if ((_hasBits0 & 256) != 0) { return executionTimestamp_; } else { return ExecutionTimestampDefaultValue; } }
    set {
      _hasBits0 |= 256;
      executionTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "executionTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionTimestamp {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "executionTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionTimestamp() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 10;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the last update of the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 512) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 512;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "executionPrice" field.</summary>
  public const int ExecutionPriceFieldNumber = 11;
  private readonly static double ExecutionPriceDefaultValue = 0D;

  private double executionPrice_;
  /// <summary>
  /// Execution price of the Deal, including all markups
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double ExecutionPrice {
    get { if ((_hasBits0 & 1024) != 0) { return executionPrice_; } else { return ExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      executionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "executionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPrice {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "executionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPrice() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "limitPrice" field.</summary>
  public const int LimitPriceFieldNumber = 12;
  private readonly static double LimitPriceDefaultValue = 0D;

  private double limitPrice_;
  /// <summary>
  /// Limit price for Deals from Market Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double LimitPrice {
    get { if ((_hasBits0 & 2048) != 0) { return limitPrice_; } else { return LimitPriceDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      limitPrice_ = value;
    }
  }
  /// <summary>Gets whether the "limitPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitPrice {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "limitPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitPrice() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "tradeSide" field.</summary>
  public const int TradeSideFieldNumber = 13;
  private readonly static global::ProtoTradeSide TradeSideDefaultValue = global::ProtoTradeSide.Buy;

  private global::ProtoTradeSide tradeSide_;
  /// <summary>
  /// Trade side of the Deal Default: TRADE_SIDE_BUY
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTradeSide TradeSide {
    get { if ((_hasBits0 & 4096) != 0) { return tradeSide_; } else { return TradeSideDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      tradeSide_ = value;
    }
  }
  /// <summary>Gets whether the "tradeSide" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeSide {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "tradeSide" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeSide() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "dealStatus" field.</summary>
  public const int DealStatusFieldNumber = 14;
  private readonly static global::ProtoDealStatus DealStatusDefaultValue = global::ProtoDealStatus.Filled;

  private global::ProtoDealStatus dealStatus_;
  /// <summary>
  /// Status of the Deal Default: DEAL_STATUS_FILLED
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDealStatus DealStatus {
    get { if ((_hasBits0 & 8192) != 0) { return dealStatus_; } else { return DealStatusDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      dealStatus_ = value;
    }
  }
  /// <summary>Gets whether the "dealStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealStatus {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "dealStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealStatus() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "dealType" field.</summary>
  public const int DealTypeFieldNumber = 15;
  private readonly static global::ProtoDealType DealTypeDefaultValue = global::ProtoDealType.MarketDeal;

  private global::ProtoDealType dealType_;
  /// <summary>
  /// Type of the Deal Default: DEAL_TYPE_MARKET
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDealType DealType {
    get { if ((_hasBits0 & 16384) != 0) { return dealType_; } else { return DealTypeDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      dealType_ = value;
    }
  }
  /// <summary>Gets whether the "dealType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealType {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "dealType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealType() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "marginRate" field.</summary>
  public const int MarginRateFieldNumber = 16;
  private readonly static double MarginRateDefaultValue = 0D;

  private double marginRate_;
  /// <summary>
  /// Base Asset to deposit Asset conversion rate
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginRate {
    get { if ((_hasBits0 & 32768) != 0) { return marginRate_; } else { return MarginRateDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      marginRate_ = value;
    }
  }
  /// <summary>Gets whether the "marginRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginRate {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "marginRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginRate() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 17;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Amount of trading commission associated with the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 65536) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "clientRequestId" field.</summary>
  public const int ClientRequestIdFieldNumber = 18;
  private readonly static string ClientRequestIdDefaultValue = "";

  private string clientRequestId_;
  /// <summary>
  /// ClientRequestId value specified in the Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientRequestId {
    get { return clientRequestId_ ?? ClientRequestIdDefaultValue; }
    set {
      clientRequestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientRequestId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientRequestId {
    get { return clientRequestId_ != null; }
  }
  /// <summary>Clears the value of the "clientRequestId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientRequestId() {
    clientRequestId_ = null;
  }

  /// <summary>Field number for the "bookType" field.</summary>
  public const int BookTypeFieldNumber = 19;
  private readonly static global::ProtoBookType BookTypeDefaultValue = global::ProtoBookType.BookA;

  private global::ProtoBookType bookType_;
  /// <summary>
  /// Book type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoBookType BookType {
    get { if ((_hasBits0 & 131072) != 0) { return bookType_; } else { return BookTypeDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      bookType_ = value;
    }
  }
  /// <summary>Gets whether the "bookType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBookType {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "bookType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBookType() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "lpExecutionPrice" field.</summary>
  public const int LpExecutionPriceFieldNumber = 20;
  private readonly static double LpExecutionPriceDefaultValue = 0D;

  private double lpExecutionPrice_;
  /// <summary>
  /// Execution price of the Deal, excluding all markups
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double LpExecutionPrice {
    get { if ((_hasBits0 & 262144) != 0) { return lpExecutionPrice_; } else { return LpExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      lpExecutionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "lpExecutionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLpExecutionPrice {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "lpExecutionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLpExecutionPrice() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "lpOrderId" field.</summary>
  public const int LpOrderIdFieldNumber = 21;
  private readonly static string LpOrderIdDefaultValue = "";

  private string lpOrderId_;
  /// <summary>
  /// Order ID in the LP's side
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LpOrderId {
    get { return lpOrderId_ ?? LpOrderIdDefaultValue; }
    set {
      lpOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "lpOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLpOrderId {
    get { return lpOrderId_ != null; }
  }
  /// <summary>Clears the value of the "lpOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLpOrderId() {
    lpOrderId_ = null;
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 22;
  private readonly static string LabelDefaultValue = "";

  private string label_;
  /// <summary>
  /// Label value specified in the corresponding Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Label {
    get { return label_ ?? LabelDefaultValue; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "label" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLabel {
    get { return label_ != null; }
  }
  /// <summary>Clears the value of the "label" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLabel() {
    label_ = null;
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 23;
  private readonly static string ChannelDefaultValue = "";

  private string channel_;
  /// <summary>
  /// Channel value specified in the corresponding Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Channel {
    get { return channel_ ?? ChannelDefaultValue; }
    set {
      channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "channel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChannel {
    get { return channel_ != null; }
  }
  /// <summary>Clears the value of the "channel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChannel() {
    channel_ = null;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 24;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment value specified in the corresponding Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "priceSnapshotId" field.</summary>
  public const int PriceSnapshotIdFieldNumber = 25;
  private readonly static long PriceSnapshotIdDefaultValue = 0L;

  private long priceSnapshotId_;
  /// <summary>
  /// ID of the related Price Snapshot (snapshot of the prices at the moment of creation of the Deal)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PriceSnapshotId {
    get { if ((_hasBits0 & 524288) != 0) { return priceSnapshotId_; } else { return PriceSnapshotIdDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      priceSnapshotId_ = value;
    }
  }
  /// <summary>Gets whether the "priceSnapshotId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPriceSnapshotId {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "priceSnapshotId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPriceSnapshotId() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "baseToUsdConversionRate" field.</summary>
  public const int BaseToUsdConversionRateFieldNumber = 26;
  private readonly static double BaseToUsdConversionRateDefaultValue = 0D;

  private double baseToUsdConversionRate_;
  /// <summary>
  /// Base Asset to USD conversion rate
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double BaseToUsdConversionRate {
    get { if ((_hasBits0 & 1048576) != 0) { return baseToUsdConversionRate_; } else { return BaseToUsdConversionRateDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      baseToUsdConversionRate_ = value;
    }
  }
  /// <summary>Gets whether the "baseToUsdConversionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseToUsdConversionRate {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "baseToUsdConversionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseToUsdConversionRate() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "feedId" field.</summary>
  public const int FeedIdFieldNumber = 31;
  private readonly static long FeedIdDefaultValue = 0L;

  private long feedId_;
  /// <summary>
  /// Liquidity Feed ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FeedId {
    get { if ((_hasBits0 & 2097152) != 0) { return feedId_; } else { return FeedIdDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      feedId_ = value;
    }
  }
  /// <summary>Gets whether the "feedId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFeedId {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "feedId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFeedId() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "closePositionDetail" field.</summary>
  public const int ClosePositionDetailFieldNumber = 32;
  private global::ProtoClosePositionDetail closePositionDetail_;
  /// <summary>
  /// Related trading details for Closing Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoClosePositionDetail ClosePositionDetail {
    get { return closePositionDetail_; }
    set {
      closePositionDetail_ = value;
    }
  }

  /// <summary>Field number for the "serverOrderId" field.</summary>
  public const int ServerOrderIdFieldNumber = 33;
  private readonly static string ServerOrderIdDefaultValue = "";

  private string serverOrderId_;
  /// <summary>
  /// ClientOrderId from LP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ServerOrderId {
    get { return serverOrderId_ ?? ServerOrderIdDefaultValue; }
    set {
      serverOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "serverOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasServerOrderId {
    get { return serverOrderId_ != null; }
  }
  /// <summary>Clears the value of the "serverOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearServerOrderId() {
    serverOrderId_ = null;
  }

  /// <summary>Field number for the "introducingBrokerCommission" field.</summary>
  public const int IntroducingBrokerCommissionFieldNumber = 35;
  private readonly static long IntroducingBrokerCommissionDefaultValue = 0L;

  private long introducingBrokerCommission_;
  /// <summary>
  /// Additional commission which will be paid to the IB for the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerCommission {
    get { if ((_hasBits0 & 4194304) != 0) { return introducingBrokerCommission_; } else { return IntroducingBrokerCommissionDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      introducingBrokerCommission_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommission {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommission() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "pocketCommission" field.</summary>
  public const int PocketCommissionFieldNumber = 36;
  private readonly static long PocketCommissionDefaultValue = 0L;

  private long pocketCommission_;
  /// <summary>
  /// Commission which Broker will pay to IB for the Deal. Always in USD (cents)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketCommission {
    get { if ((_hasBits0 & 8388608) != 0) { return pocketCommission_; } else { return PocketCommissionDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      pocketCommission_ = value;
    }
  }
  /// <summary>Gets whether the "pocketCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketCommission {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "pocketCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketCommission() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "pocketMarkup" field.</summary>
  public const int PocketMarkupFieldNumber = 37;
  private readonly static long PocketMarkupDefaultValue = 0L;

  private long pocketMarkup_;
  /// <summary>
  /// Markup (in terms of the price) which Broker will pay to IB for the Deal. Always in USD (cents)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PocketMarkup {
    get { if ((_hasBits0 & 16777216) != 0) { return pocketMarkup_; } else { return PocketMarkupDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      pocketMarkup_ = value;
    }
  }
  /// <summary>Gets whether the "pocketMarkup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketMarkup {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "pocketMarkup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketMarkup() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "introducedByBrokerId" field.</summary>
  public const int IntroducedByBrokerIdFieldNumber = 39;
  private readonly static long IntroducedByBrokerIdDefaultValue = 0L;

  private long introducedByBrokerId_;
  /// <summary>
  /// ID of the IB who will get IB commissions for the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducedByBrokerId {
    get { if ((_hasBits0 & 33554432) != 0) { return introducedByBrokerId_; } else { return IntroducedByBrokerIdDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      introducedByBrokerId_ = value;
    }
  }
  /// <summary>Gets whether the "introducedByBrokerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducedByBrokerId {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "introducedByBrokerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducedByBrokerId() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "mirroringCommission" field.</summary>
  public const int MirroringCommissionFieldNumber = 40;
  private readonly static long MirroringCommissionDefaultValue = 0L;

  private long mirroringCommission_;
  /// <summary>
  /// Amount of commission which Trader pays to Spotware for providing some strategy in Copy service
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MirroringCommission {
    get { if ((_hasBits0 & 67108864) != 0) { return mirroringCommission_; } else { return MirroringCommissionDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      mirroringCommission_ = value;
    }
  }
  /// <summary>Gets whether the "mirroringCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMirroringCommission {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "mirroringCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMirroringCommission() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "measurementUnits" field.</summary>
  public const int MeasurementUnitsFieldNumber = 41;
  private readonly static string MeasurementUnitsDefaultValue = "";

  private string measurementUnits_;
  /// <summary>
  /// Specifies which unit is traded under base Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MeasurementUnits {
    get { return measurementUnits_ ?? MeasurementUnitsDefaultValue; }
    set {
      measurementUnits_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "measurementUnits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMeasurementUnits {
    get { return measurementUnits_ != null; }
  }
  /// <summary>Clears the value of the "measurementUnits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMeasurementUnits() {
    measurementUnits_ = null;
  }

  /// <summary>Field number for the "lotSize" field.</summary>
  public const int LotSizeFieldNumber = 42;
  private readonly static long LotSizeDefaultValue = 0L;

  private long lotSize_;
  /// <summary>
  /// Amount of units of the base Asset in one lot of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LotSize {
    get { if ((_hasBits0 & 134217728) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      lotSize_ = value;
    }
  }
  /// <summary>Gets whether the "lotSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLotSize {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "lotSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLotSize() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "markup" field.</summary>
  public const int MarkupFieldNumber = 43;
  private readonly static long MarkupDefaultValue = 0L;

  private long markup_;
  /// <summary>
  /// Markup value (in USD) of the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Markup {
    get { if ((_hasBits0 & 268435456) != 0) { return markup_; } else { return MarkupDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      markup_ = value;
    }
  }
  /// <summary>Gets whether the "markup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarkup {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "markup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarkup() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "innerMirroringFee" field.</summary>
  public const int InnerMirroringFeeFieldNumber = 44;
  private readonly static bool InnerMirroringFeeDefaultValue = false;

  private bool innerMirroringFee_;
  /// <summary>
  /// Mirroring Fee rate, used by Copy functionality
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool InnerMirroringFee {
    get { if ((_hasBits0 & 536870912) != 0) { return innerMirroringFee_; } else { return InnerMirroringFeeDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      innerMirroringFee_ = value;
    }
  }
  /// <summary>Gets whether the "innerMirroringFee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasInnerMirroringFee {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "innerMirroringFee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearInnerMirroringFee() {
    _hasBits0 &= ~536870912;
  }

  /// <summary>Field number for the "totalVolumeInUsd" field.</summary>
  public const int TotalVolumeInUsdFieldNumber = 45;
  private readonly static long TotalVolumeInUsdDefaultValue = 0L;

  private long totalVolumeInUsd_;
  /// <summary>
  /// Total USD volume of the Trader from the beginning of time
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TotalVolumeInUsd {
    get { if ((_hasBits0 & 1073741824) != 0) { return totalVolumeInUsd_; } else { return TotalVolumeInUsdDefaultValue; } }
    set {
      _hasBits0 |= 1073741824;
      totalVolumeInUsd_ = value;
    }
  }
  /// <summary>Gets whether the "totalVolumeInUsd" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTotalVolumeInUsd {
    get { return (_hasBits0 & 1073741824) != 0; }
  }
  /// <summary>Clears the value of the "totalVolumeInUsd" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTotalVolumeInUsd() {
    _hasBits0 &= ~1073741824;
  }

  /// <summary>Field number for the "spreadBetting" field.</summary>
  public const int SpreadBettingFieldNumber = 46;
  private readonly static bool SpreadBettingDefaultValue = false;

  private bool spreadBetting_;
  /// <summary>
  /// TRUE for Spread Betting Traders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SpreadBetting {
    get { if ((_hasBits0 & -2147483648) != 0) { return spreadBetting_; } else { return SpreadBettingDefaultValue; } }
    set {
      _hasBits0 |= -2147483648;
      spreadBetting_ = value;
    }
  }
  /// <summary>Gets whether the "spreadBetting" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSpreadBetting {
    get { return (_hasBits0 & -2147483648) != 0; }
  }
  /// <summary>Clears the value of the "spreadBetting" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSpreadBetting() {
    _hasBits0 &= ~-2147483648;
  }

  /// <summary>Field number for the "stake" field.</summary>
  public const int StakeFieldNumber = 47;
  private readonly static long StakeDefaultValue = 0L;

  private long stake_;
  /// <summary>
  /// Stake, filled under this Deal (for Spread Betting)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Stake {
    get { if ((_hasBits1 & 1) != 0) { return stake_; } else { return StakeDefaultValue; } }
    set {
      _hasBits1 |= 1;
      stake_ = value;
    }
  }
  /// <summary>Gets whether the "stake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStake {
    get { return (_hasBits1 & 1) != 0; }
  }
  /// <summary>Clears the value of the "stake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStake() {
    _hasBits1 &= ~1;
  }

  /// <summary>Field number for the "desiredVWAP" field.</summary>
  public const int DesiredVWAPFieldNumber = 48;
  private readonly static double DesiredVWAPDefaultValue = 0D;

  private double desiredVWAP_;
  /// <summary>
  /// Price desired by the Trader as an execution price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double DesiredVWAP {
    get { if ((_hasBits1 & 2) != 0) { return desiredVWAP_; } else { return DesiredVWAPDefaultValue; } }
    set {
      _hasBits1 |= 2;
      desiredVWAP_ = value;
    }
  }
  /// <summary>Gets whether the "desiredVWAP" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDesiredVWAP {
    get { return (_hasBits1 & 2) != 0; }
  }
  /// <summary>Clears the value of the "desiredVWAP" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDesiredVWAP() {
    _hasBits1 &= ~2;
  }

  /// <summary>Field number for the "marketVWAP" field.</summary>
  public const int MarketVWAPFieldNumber = 49;
  private readonly static double MarketVWAPDefaultValue = 0D;

  private double marketVWAP_;
  /// <summary>
  /// Real market VWAP at the moment of execution of the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarketVWAP {
    get { if ((_hasBits1 & 4) != 0) { return marketVWAP_; } else { return MarketVWAPDefaultValue; } }
    set {
      _hasBits1 |= 4;
      marketVWAP_ = value;
    }
  }
  /// <summary>Gets whether the "marketVWAP" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarketVWAP {
    get { return (_hasBits1 & 4) != 0; }
  }
  /// <summary>Clears the value of the "marketVWAP" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarketVWAP() {
    _hasBits1 &= ~4;
  }

  /// <summary>Field number for the "tolerance" field.</summary>
  public const int ToleranceFieldNumber = 50;
  private readonly static int ToleranceDefaultValue = 0;

  private int tolerance_;
  /// <summary>
  /// Tolerance distance
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Tolerance {
    get { if ((_hasBits1 & 8) != 0) { return tolerance_; } else { return ToleranceDefaultValue; } }
    set {
      _hasBits1 |= 8;
      tolerance_ = value;
    }
  }
  /// <summary>Gets whether the "tolerance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTolerance {
    get { return (_hasBits1 & 8) != 0; }
  }
  /// <summary>Clears the value of the "tolerance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTolerance() {
    _hasBits1 &= ~8;
  }

  /// <summary>Field number for the "rejectReason" field.</summary>
  public const int RejectReasonFieldNumber = 51;
  private readonly static string RejectReasonDefaultValue = "";

  private string rejectReason_;
  /// <summary>
  /// Reason why Order was rejected
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string RejectReason {
    get { return rejectReason_ ?? RejectReasonDefaultValue; }
    set {
      rejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "rejectReason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRejectReason {
    get { return rejectReason_ != null; }
  }
  /// <summary>Clears the value of the "rejectReason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRejectReason() {
    rejectReason_ = null;
  }

  /// <summary>Field number for the "manual" field.</summary>
  public const int ManualFieldNumber = 52;
  private readonly static bool ManualDefaultValue = false;

  private bool manual_;
  /// <summary>
  /// If TRUE then Deal is Manual Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Manual {
    get { if ((_hasBits1 & 16) != 0) { return manual_; } else { return ManualDefaultValue; } }
    set {
      _hasBits1 |= 16;
      manual_ = value;
    }
  }
  /// <summary>Gets whether the "manual" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManual {
    get { return (_hasBits1 & 16) != 0; }
  }
  /// <summary>Clears the value of the "manual" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManual() {
    _hasBits1 &= ~16;
  }

  /// <summary>Field number for the "filledEurVolume" field.</summary>
  public const int FilledEurVolumeFieldNumber = 55;
  private readonly static long FilledEurVolumeDefaultValue = 0L;

  private long filledEurVolume_;
  /// <summary>
  /// Filled volume in EUR
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FilledEurVolume {
    get { if ((_hasBits1 & 32) != 0) { return filledEurVolume_; } else { return FilledEurVolumeDefaultValue; } }
    set {
      _hasBits1 |= 32;
      filledEurVolume_ = value;
    }
  }
  /// <summary>Gets whether the "filledEurVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilledEurVolume {
    get { return (_hasBits1 & 32) != 0; }
  }
  /// <summary>Clears the value of the "filledEurVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilledEurVolume() {
    _hasBits1 &= ~32;
  }

  /// <summary>Field number for the "filledGbpVolume" field.</summary>
  public const int FilledGbpVolumeFieldNumber = 56;
  private readonly static long FilledGbpVolumeDefaultValue = 0L;

  private long filledGbpVolume_;
  /// <summary>
  /// Filled volume in GBP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FilledGbpVolume {
    get { if ((_hasBits1 & 64) != 0) { return filledGbpVolume_; } else { return FilledGbpVolumeDefaultValue; } }
    set {
      _hasBits1 |= 64;
      filledGbpVolume_ = value;
    }
  }
  /// <summary>Gets whether the "filledGbpVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilledGbpVolume {
    get { return (_hasBits1 & 64) != 0; }
  }
  /// <summary>Clears the value of the "filledGbpVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilledGbpVolume() {
    _hasBits1 &= ~64;
  }

  /// <summary>Field number for the "equity" field.</summary>
  public const int EquityFieldNumber = 57;
  private readonly static long EquityDefaultValue = 0L;

  private long equity_;
  /// <summary>
  /// Trader's equity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Equity {
    get { if ((_hasBits1 & 128) != 0) { return equity_; } else { return EquityDefaultValue; } }
    set {
      _hasBits1 |= 128;
      equity_ = value;
    }
  }
  /// <summary>Gets whether the "equity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEquity {
    get { return (_hasBits1 & 128) != 0; }
  }
  /// <summary>Clears the value of the "equity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEquity() {
    _hasBits1 &= ~128;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 58;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission, mirroringCommission, pocketCommission
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits1 & 256) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits1 |= 256;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits1 & 256) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits1 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoDeal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoDeal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DealId != other.DealId) return false;
    if (OrderId != other.OrderId) return false;
    if (PositionId != other.PositionId) return false;
    if (TraderId != other.TraderId) return false;
    if (Volume != other.Volume) return false;
    if (FilledVolume != other.FilledVolume) return false;
    if (SymbolId != other.SymbolId) return false;
    if (CreateTimestamp != other.CreateTimestamp) return false;
    if (ExecutionTimestamp != other.ExecutionTimestamp) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExecutionPrice, other.ExecutionPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
    if (TradeSide != other.TradeSide) return false;
    if (DealStatus != other.DealStatus) return false;
    if (DealType != other.DealType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRate, other.MarginRate)) return false;
    if (Commission != other.Commission) return false;
    if (ClientRequestId != other.ClientRequestId) return false;
    if (BookType != other.BookType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LpExecutionPrice, other.LpExecutionPrice)) return false;
    if (LpOrderId != other.LpOrderId) return false;
    if (Label != other.Label) return false;
    if (Channel != other.Channel) return false;
    if (Comment != other.Comment) return false;
    if (PriceSnapshotId != other.PriceSnapshotId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseToUsdConversionRate, other.BaseToUsdConversionRate)) return false;
    if (FeedId != other.FeedId) return false;
    if (!object.Equals(ClosePositionDetail, other.ClosePositionDetail)) return false;
    if (ServerOrderId != other.ServerOrderId) return false;
    if (IntroducingBrokerCommission != other.IntroducingBrokerCommission) return false;
    if (PocketCommission != other.PocketCommission) return false;
    if (PocketMarkup != other.PocketMarkup) return false;
    if (IntroducedByBrokerId != other.IntroducedByBrokerId) return false;
    if (MirroringCommission != other.MirroringCommission) return false;
    if (MeasurementUnits != other.MeasurementUnits) return false;
    if (LotSize != other.LotSize) return false;
    if (Markup != other.Markup) return false;
    if (InnerMirroringFee != other.InnerMirroringFee) return false;
    if (TotalVolumeInUsd != other.TotalVolumeInUsd) return false;
    if (SpreadBetting != other.SpreadBetting) return false;
    if (Stake != other.Stake) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DesiredVWAP, other.DesiredVWAP)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarketVWAP, other.MarketVWAP)) return false;
    if (Tolerance != other.Tolerance) return false;
    if (RejectReason != other.RejectReason) return false;
    if (Manual != other.Manual) return false;
    if (FilledEurVolume != other.FilledEurVolume) return false;
    if (FilledGbpVolume != other.FilledGbpVolume) return false;
    if (Equity != other.Equity) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDealId) hash ^= DealId.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasFilledVolume) hash ^= FilledVolume.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasCreateTimestamp) hash ^= CreateTimestamp.GetHashCode();
    if (HasExecutionTimestamp) hash ^= ExecutionTimestamp.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExecutionPrice);
    if (HasLimitPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
    if (HasTradeSide) hash ^= TradeSide.GetHashCode();
    if (HasDealStatus) hash ^= DealStatus.GetHashCode();
    if (HasDealType) hash ^= DealType.GetHashCode();
    if (HasMarginRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRate);
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasClientRequestId) hash ^= ClientRequestId.GetHashCode();
    if (HasBookType) hash ^= BookType.GetHashCode();
    if (HasLpExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LpExecutionPrice);
    if (HasLpOrderId) hash ^= LpOrderId.GetHashCode();
    if (HasLabel) hash ^= Label.GetHashCode();
    if (HasChannel) hash ^= Channel.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasPriceSnapshotId) hash ^= PriceSnapshotId.GetHashCode();
    if (HasBaseToUsdConversionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseToUsdConversionRate);
    if (HasFeedId) hash ^= FeedId.GetHashCode();
    if (closePositionDetail_ != null) hash ^= ClosePositionDetail.GetHashCode();
    if (HasServerOrderId) hash ^= ServerOrderId.GetHashCode();
    if (HasIntroducingBrokerCommission) hash ^= IntroducingBrokerCommission.GetHashCode();
    if (HasPocketCommission) hash ^= PocketCommission.GetHashCode();
    if (HasPocketMarkup) hash ^= PocketMarkup.GetHashCode();
    if (HasIntroducedByBrokerId) hash ^= IntroducedByBrokerId.GetHashCode();
    if (HasMirroringCommission) hash ^= MirroringCommission.GetHashCode();
    if (HasMeasurementUnits) hash ^= MeasurementUnits.GetHashCode();
    if (HasLotSize) hash ^= LotSize.GetHashCode();
    if (HasMarkup) hash ^= Markup.GetHashCode();
    if (HasInnerMirroringFee) hash ^= InnerMirroringFee.GetHashCode();
    if (HasTotalVolumeInUsd) hash ^= TotalVolumeInUsd.GetHashCode();
    if (HasSpreadBetting) hash ^= SpreadBetting.GetHashCode();
    if (HasStake) hash ^= Stake.GetHashCode();
    if (HasDesiredVWAP) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DesiredVWAP);
    if (HasMarketVWAP) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarketVWAP);
    if (HasTolerance) hash ^= Tolerance.GetHashCode();
    if (HasRejectReason) hash ^= RejectReason.GetHashCode();
    if (HasManual) hash ^= Manual.GetHashCode();
    if (HasFilledEurVolume) hash ^= FilledEurVolume.GetHashCode();
    if (HasFilledGbpVolume) hash ^= FilledGbpVolume.GetHashCode();
    if (HasEquity) hash ^= Equity.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasOrderId) {
      output.WriteRawTag(16);
      output.WriteInt64(OrderId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasTraderId) {
      output.WriteRawTag(32);
      output.WriteInt64(TraderId);
    }
    if (HasVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(Volume);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(48);
      output.WriteInt64(FilledVolume);
    }
    if (HasSymbolId) {
      output.WriteRawTag(56);
      output.WriteInt64(SymbolId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(80);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(89);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(97);
      output.WriteDouble(LimitPrice);
    }
    if (HasTradeSide) {
      output.WriteRawTag(104);
      output.WriteEnum((int) TradeSide);
    }
    if (HasDealStatus) {
      output.WriteRawTag(112);
      output.WriteEnum((int) DealStatus);
    }
    if (HasDealType) {
      output.WriteRawTag(120);
      output.WriteEnum((int) DealType);
    }
    if (HasMarginRate) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(MarginRate);
    }
    if (HasCommission) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(Commission);
    }
    if (HasClientRequestId) {
      output.WriteRawTag(146, 1);
      output.WriteString(ClientRequestId);
    }
    if (HasBookType) {
      output.WriteRawTag(152, 1);
      output.WriteEnum((int) BookType);
    }
    if (HasLpExecutionPrice) {
      output.WriteRawTag(161, 1);
      output.WriteDouble(LpExecutionPrice);
    }
    if (HasLpOrderId) {
      output.WriteRawTag(170, 1);
      output.WriteString(LpOrderId);
    }
    if (HasLabel) {
      output.WriteRawTag(178, 1);
      output.WriteString(Label);
    }
    if (HasChannel) {
      output.WriteRawTag(186, 1);
      output.WriteString(Channel);
    }
    if (HasComment) {
      output.WriteRawTag(194, 1);
      output.WriteString(Comment);
    }
    if (HasPriceSnapshotId) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(PriceSnapshotId);
    }
    if (HasBaseToUsdConversionRate) {
      output.WriteRawTag(209, 1);
      output.WriteDouble(BaseToUsdConversionRate);
    }
    if (HasFeedId) {
      output.WriteRawTag(248, 1);
      output.WriteInt64(FeedId);
    }
    if (closePositionDetail_ != null) {
      output.WriteRawTag(130, 2);
      output.WriteMessage(ClosePositionDetail);
    }
    if (HasServerOrderId) {
      output.WriteRawTag(138, 2);
      output.WriteString(ServerOrderId);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(160, 2);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(168, 2);
      output.WriteInt64(PocketMarkup);
    }
    if (HasIntroducedByBrokerId) {
      output.WriteRawTag(184, 2);
      output.WriteInt64(IntroducedByBrokerId);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(192, 2);
      output.WriteInt64(MirroringCommission);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(202, 2);
      output.WriteString(MeasurementUnits);
    }
    if (HasLotSize) {
      output.WriteRawTag(208, 2);
      output.WriteInt64(LotSize);
    }
    if (HasMarkup) {
      output.WriteRawTag(216, 2);
      output.WriteInt64(Markup);
    }
    if (HasInnerMirroringFee) {
      output.WriteRawTag(224, 2);
      output.WriteBool(InnerMirroringFee);
    }
    if (HasTotalVolumeInUsd) {
      output.WriteRawTag(232, 2);
      output.WriteInt64(TotalVolumeInUsd);
    }
    if (HasSpreadBetting) {
      output.WriteRawTag(240, 2);
      output.WriteBool(SpreadBetting);
    }
    if (HasStake) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(Stake);
    }
    if (HasDesiredVWAP) {
      output.WriteRawTag(129, 3);
      output.WriteDouble(DesiredVWAP);
    }
    if (HasMarketVWAP) {
      output.WriteRawTag(137, 3);
      output.WriteDouble(MarketVWAP);
    }
    if (HasTolerance) {
      output.WriteRawTag(144, 3);
      output.WriteInt32(Tolerance);
    }
    if (HasRejectReason) {
      output.WriteRawTag(154, 3);
      output.WriteString(RejectReason);
    }
    if (HasManual) {
      output.WriteRawTag(160, 3);
      output.WriteBool(Manual);
    }
    if (HasFilledEurVolume) {
      output.WriteRawTag(184, 3);
      output.WriteInt64(FilledEurVolume);
    }
    if (HasFilledGbpVolume) {
      output.WriteRawTag(192, 3);
      output.WriteInt64(FilledGbpVolume);
    }
    if (HasEquity) {
      output.WriteRawTag(200, 3);
      output.WriteInt64(Equity);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(208, 3);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasOrderId) {
      output.WriteRawTag(16);
      output.WriteInt64(OrderId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasTraderId) {
      output.WriteRawTag(32);
      output.WriteInt64(TraderId);
    }
    if (HasVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(Volume);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(48);
      output.WriteInt64(FilledVolume);
    }
    if (HasSymbolId) {
      output.WriteRawTag(56);
      output.WriteInt64(SymbolId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(80);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(89);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(97);
      output.WriteDouble(LimitPrice);
    }
    if (HasTradeSide) {
      output.WriteRawTag(104);
      output.WriteEnum((int) TradeSide);
    }
    if (HasDealStatus) {
      output.WriteRawTag(112);
      output.WriteEnum((int) DealStatus);
    }
    if (HasDealType) {
      output.WriteRawTag(120);
      output.WriteEnum((int) DealType);
    }
    if (HasMarginRate) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(MarginRate);
    }
    if (HasCommission) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(Commission);
    }
    if (HasClientRequestId) {
      output.WriteRawTag(146, 1);
      output.WriteString(ClientRequestId);
    }
    if (HasBookType) {
      output.WriteRawTag(152, 1);
      output.WriteEnum((int) BookType);
    }
    if (HasLpExecutionPrice) {
      output.WriteRawTag(161, 1);
      output.WriteDouble(LpExecutionPrice);
    }
    if (HasLpOrderId) {
      output.WriteRawTag(170, 1);
      output.WriteString(LpOrderId);
    }
    if (HasLabel) {
      output.WriteRawTag(178, 1);
      output.WriteString(Label);
    }
    if (HasChannel) {
      output.WriteRawTag(186, 1);
      output.WriteString(Channel);
    }
    if (HasComment) {
      output.WriteRawTag(194, 1);
      output.WriteString(Comment);
    }
    if (HasPriceSnapshotId) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(PriceSnapshotId);
    }
    if (HasBaseToUsdConversionRate) {
      output.WriteRawTag(209, 1);
      output.WriteDouble(BaseToUsdConversionRate);
    }
    if (HasFeedId) {
      output.WriteRawTag(248, 1);
      output.WriteInt64(FeedId);
    }
    if (closePositionDetail_ != null) {
      output.WriteRawTag(130, 2);
      output.WriteMessage(ClosePositionDetail);
    }
    if (HasServerOrderId) {
      output.WriteRawTag(138, 2);
      output.WriteString(ServerOrderId);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(152, 2);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      output.WriteRawTag(160, 2);
      output.WriteInt64(PocketCommission);
    }
    if (HasPocketMarkup) {
      output.WriteRawTag(168, 2);
      output.WriteInt64(PocketMarkup);
    }
    if (HasIntroducedByBrokerId) {
      output.WriteRawTag(184, 2);
      output.WriteInt64(IntroducedByBrokerId);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(192, 2);
      output.WriteInt64(MirroringCommission);
    }
    if (HasMeasurementUnits) {
      output.WriteRawTag(202, 2);
      output.WriteString(MeasurementUnits);
    }
    if (HasLotSize) {
      output.WriteRawTag(208, 2);
      output.WriteInt64(LotSize);
    }
    if (HasMarkup) {
      output.WriteRawTag(216, 2);
      output.WriteInt64(Markup);
    }
    if (HasInnerMirroringFee) {
      output.WriteRawTag(224, 2);
      output.WriteBool(InnerMirroringFee);
    }
    if (HasTotalVolumeInUsd) {
      output.WriteRawTag(232, 2);
      output.WriteInt64(TotalVolumeInUsd);
    }
    if (HasSpreadBetting) {
      output.WriteRawTag(240, 2);
      output.WriteBool(SpreadBetting);
    }
    if (HasStake) {
      output.WriteRawTag(248, 2);
      output.WriteInt64(Stake);
    }
    if (HasDesiredVWAP) {
      output.WriteRawTag(129, 3);
      output.WriteDouble(DesiredVWAP);
    }
    if (HasMarketVWAP) {
      output.WriteRawTag(137, 3);
      output.WriteDouble(MarketVWAP);
    }
    if (HasTolerance) {
      output.WriteRawTag(144, 3);
      output.WriteInt32(Tolerance);
    }
    if (HasRejectReason) {
      output.WriteRawTag(154, 3);
      output.WriteString(RejectReason);
    }
    if (HasManual) {
      output.WriteRawTag(160, 3);
      output.WriteBool(Manual);
    }
    if (HasFilledEurVolume) {
      output.WriteRawTag(184, 3);
      output.WriteInt64(FilledEurVolume);
    }
    if (HasFilledGbpVolume) {
      output.WriteRawTag(192, 3);
      output.WriteInt64(FilledGbpVolume);
    }
    if (HasEquity) {
      output.WriteRawTag(200, 3);
      output.WriteInt64(Equity);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(208, 3);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDealId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealId);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasFilledVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FilledVolume);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasCreateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasExecutionPrice) {
      size += 1 + 8;
    }
    if (HasLimitPrice) {
      size += 1 + 8;
    }
    if (HasTradeSide) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeSide);
    }
    if (HasDealStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DealStatus);
    }
    if (HasDealType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DealType);
    }
    if (HasMarginRate) {
      size += 2 + 8;
    }
    if (HasCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasClientRequestId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientRequestId);
    }
    if (HasBookType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BookType);
    }
    if (HasLpExecutionPrice) {
      size += 2 + 8;
    }
    if (HasLpOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(LpOrderId);
    }
    if (HasLabel) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (HasChannel) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Channel);
    }
    if (HasComment) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasPriceSnapshotId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PriceSnapshotId);
    }
    if (HasBaseToUsdConversionRate) {
      size += 2 + 8;
    }
    if (HasFeedId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(FeedId);
    }
    if (closePositionDetail_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClosePositionDetail);
    }
    if (HasServerOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ServerOrderId);
    }
    if (HasIntroducingBrokerCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerCommission);
    }
    if (HasPocketCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketCommission);
    }
    if (HasPocketMarkup) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PocketMarkup);
    }
    if (HasIntroducedByBrokerId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(IntroducedByBrokerId);
    }
    if (HasMirroringCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MirroringCommission);
    }
    if (HasMeasurementUnits) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(MeasurementUnits);
    }
    if (HasLotSize) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LotSize);
    }
    if (HasMarkup) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Markup);
    }
    if (HasInnerMirroringFee) {
      size += 2 + 1;
    }
    if (HasTotalVolumeInUsd) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalVolumeInUsd);
    }
    if (HasSpreadBetting) {
      size += 2 + 1;
    }
    if (HasStake) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Stake);
    }
    if (HasDesiredVWAP) {
      size += 2 + 8;
    }
    if (HasMarketVWAP) {
      size += 2 + 8;
    }
    if (HasTolerance) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tolerance);
    }
    if (HasRejectReason) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectReason);
    }
    if (HasManual) {
      size += 2 + 1;
    }
    if (HasFilledEurVolume) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(FilledEurVolume);
    }
    if (HasFilledGbpVolume) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(FilledGbpVolume);
    }
    if (HasEquity) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Equity);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoDeal other) {
    if (other == null) {
      return;
    }
    if (other.HasDealId) {
      DealId = other.DealId;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasFilledVolume) {
      FilledVolume = other.FilledVolume;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasCreateTimestamp) {
      CreateTimestamp = other.CreateTimestamp;
    }
    if (other.HasExecutionTimestamp) {
      ExecutionTimestamp = other.ExecutionTimestamp;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasExecutionPrice) {
      ExecutionPrice = other.ExecutionPrice;
    }
    if (other.HasLimitPrice) {
      LimitPrice = other.LimitPrice;
    }
    if (other.HasTradeSide) {
      TradeSide = other.TradeSide;
    }
    if (other.HasDealStatus) {
      DealStatus = other.DealStatus;
    }
    if (other.HasDealType) {
      DealType = other.DealType;
    }
    if (other.HasMarginRate) {
      MarginRate = other.MarginRate;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasClientRequestId) {
      ClientRequestId = other.ClientRequestId;
    }
    if (other.HasBookType) {
      BookType = other.BookType;
    }
    if (other.HasLpExecutionPrice) {
      LpExecutionPrice = other.LpExecutionPrice;
    }
    if (other.HasLpOrderId) {
      LpOrderId = other.LpOrderId;
    }
    if (other.HasLabel) {
      Label = other.Label;
    }
    if (other.HasChannel) {
      Channel = other.Channel;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasPriceSnapshotId) {
      PriceSnapshotId = other.PriceSnapshotId;
    }
    if (other.HasBaseToUsdConversionRate) {
      BaseToUsdConversionRate = other.BaseToUsdConversionRate;
    }
    if (other.HasFeedId) {
      FeedId = other.FeedId;
    }
    if (other.closePositionDetail_ != null) {
      if (closePositionDetail_ == null) {
        ClosePositionDetail = new global::ProtoClosePositionDetail();
      }
      ClosePositionDetail.MergeFrom(other.ClosePositionDetail);
    }
    if (other.HasServerOrderId) {
      ServerOrderId = other.ServerOrderId;
    }
    if (other.HasIntroducingBrokerCommission) {
      IntroducingBrokerCommission = other.IntroducingBrokerCommission;
    }
    if (other.HasPocketCommission) {
      PocketCommission = other.PocketCommission;
    }
    if (other.HasPocketMarkup) {
      PocketMarkup = other.PocketMarkup;
    }
    if (other.HasIntroducedByBrokerId) {
      IntroducedByBrokerId = other.IntroducedByBrokerId;
    }
    if (other.HasMirroringCommission) {
      MirroringCommission = other.MirroringCommission;
    }
    if (other.HasMeasurementUnits) {
      MeasurementUnits = other.MeasurementUnits;
    }
    if (other.HasLotSize) {
      LotSize = other.LotSize;
    }
    if (other.HasMarkup) {
      Markup = other.Markup;
    }
    if (other.HasInnerMirroringFee) {
      InnerMirroringFee = other.InnerMirroringFee;
    }
    if (other.HasTotalVolumeInUsd) {
      TotalVolumeInUsd = other.TotalVolumeInUsd;
    }
    if (other.HasSpreadBetting) {
      SpreadBetting = other.SpreadBetting;
    }
    if (other.HasStake) {
      Stake = other.Stake;
    }
    if (other.HasDesiredVWAP) {
      DesiredVWAP = other.DesiredVWAP;
    }
    if (other.HasMarketVWAP) {
      MarketVWAP = other.MarketVWAP;
    }
    if (other.HasTolerance) {
      Tolerance = other.Tolerance;
    }
    if (other.HasRejectReason) {
      RejectReason = other.RejectReason;
    }
    if (other.HasManual) {
      Manual = other.Manual;
    }
    if (other.HasFilledEurVolume) {
      FilledEurVolume = other.FilledEurVolume;
    }
    if (other.HasFilledGbpVolume) {
      FilledGbpVolume = other.FilledGbpVolume;
    }
    if (other.HasEquity) {
      Equity = other.Equity;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          OrderId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          TraderId = input.ReadInt64();
          break;
        }
        case 40: {
          Volume = input.ReadInt64();
          break;
        }
        case 48: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 56: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 64: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 80: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 89: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 97: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 104: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 112: {
          DealStatus = (global::ProtoDealStatus) input.ReadEnum();
          break;
        }
        case 120: {
          DealType = (global::ProtoDealType) input.ReadEnum();
          break;
        }
        case 129: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 136: {
          Commission = input.ReadInt64();
          break;
        }
        case 146: {
          ClientRequestId = input.ReadString();
          break;
        }
        case 152: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 161: {
          LpExecutionPrice = input.ReadDouble();
          break;
        }
        case 170: {
          LpOrderId = input.ReadString();
          break;
        }
        case 178: {
          Label = input.ReadString();
          break;
        }
        case 186: {
          Channel = input.ReadString();
          break;
        }
        case 194: {
          Comment = input.ReadString();
          break;
        }
        case 200: {
          PriceSnapshotId = input.ReadInt64();
          break;
        }
        case 209: {
          BaseToUsdConversionRate = input.ReadDouble();
          break;
        }
        case 248: {
          FeedId = input.ReadInt64();
          break;
        }
        case 258: {
          if (closePositionDetail_ == null) {
            ClosePositionDetail = new global::ProtoClosePositionDetail();
          }
          input.ReadMessage(ClosePositionDetail);
          break;
        }
        case 266: {
          ServerOrderId = input.ReadString();
          break;
        }
        case 280: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 288: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 296: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 312: {
          IntroducedByBrokerId = input.ReadInt64();
          break;
        }
        case 320: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 330: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 336: {
          LotSize = input.ReadInt64();
          break;
        }
        case 344: {
          Markup = input.ReadInt64();
          break;
        }
        case 352: {
          InnerMirroringFee = input.ReadBool();
          break;
        }
        case 360: {
          TotalVolumeInUsd = input.ReadInt64();
          break;
        }
        case 368: {
          SpreadBetting = input.ReadBool();
          break;
        }
        case 376: {
          Stake = input.ReadInt64();
          break;
        }
        case 385: {
          DesiredVWAP = input.ReadDouble();
          break;
        }
        case 393: {
          MarketVWAP = input.ReadDouble();
          break;
        }
        case 400: {
          Tolerance = input.ReadInt32();
          break;
        }
        case 410: {
          RejectReason = input.ReadString();
          break;
        }
        case 416: {
          Manual = input.ReadBool();
          break;
        }
        case 440: {
          FilledEurVolume = input.ReadInt64();
          break;
        }
        case 448: {
          FilledGbpVolume = input.ReadInt64();
          break;
        }
        case 456: {
          Equity = input.ReadInt64();
          break;
        }
        case 464: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          OrderId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          TraderId = input.ReadInt64();
          break;
        }
        case 40: {
          Volume = input.ReadInt64();
          break;
        }
        case 48: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 56: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 64: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 80: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 89: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 97: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 104: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 112: {
          DealStatus = (global::ProtoDealStatus) input.ReadEnum();
          break;
        }
        case 120: {
          DealType = (global::ProtoDealType) input.ReadEnum();
          break;
        }
        case 129: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 136: {
          Commission = input.ReadInt64();
          break;
        }
        case 146: {
          ClientRequestId = input.ReadString();
          break;
        }
        case 152: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 161: {
          LpExecutionPrice = input.ReadDouble();
          break;
        }
        case 170: {
          LpOrderId = input.ReadString();
          break;
        }
        case 178: {
          Label = input.ReadString();
          break;
        }
        case 186: {
          Channel = input.ReadString();
          break;
        }
        case 194: {
          Comment = input.ReadString();
          break;
        }
        case 200: {
          PriceSnapshotId = input.ReadInt64();
          break;
        }
        case 209: {
          BaseToUsdConversionRate = input.ReadDouble();
          break;
        }
        case 248: {
          FeedId = input.ReadInt64();
          break;
        }
        case 258: {
          if (closePositionDetail_ == null) {
            ClosePositionDetail = new global::ProtoClosePositionDetail();
          }
          input.ReadMessage(ClosePositionDetail);
          break;
        }
        case 266: {
          ServerOrderId = input.ReadString();
          break;
        }
        case 280: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 288: {
          PocketCommission = input.ReadInt64();
          break;
        }
        case 296: {
          PocketMarkup = input.ReadInt64();
          break;
        }
        case 312: {
          IntroducedByBrokerId = input.ReadInt64();
          break;
        }
        case 320: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 330: {
          MeasurementUnits = input.ReadString();
          break;
        }
        case 336: {
          LotSize = input.ReadInt64();
          break;
        }
        case 344: {
          Markup = input.ReadInt64();
          break;
        }
        case 352: {
          InnerMirroringFee = input.ReadBool();
          break;
        }
        case 360: {
          TotalVolumeInUsd = input.ReadInt64();
          break;
        }
        case 368: {
          SpreadBetting = input.ReadBool();
          break;
        }
        case 376: {
          Stake = input.ReadInt64();
          break;
        }
        case 385: {
          DesiredVWAP = input.ReadDouble();
          break;
        }
        case 393: {
          MarketVWAP = input.ReadDouble();
          break;
        }
        case 400: {
          Tolerance = input.ReadInt32();
          break;
        }
        case 410: {
          RejectReason = input.ReadString();
          break;
        }
        case 416: {
          Manual = input.ReadBool();
          break;
        }
        case 440: {
          FilledEurVolume = input.ReadInt64();
          break;
        }
        case 448: {
          FilledGbpVolume = input.ReadInt64();
          break;
        }
        case 456: {
          Equity = input.ReadInt64();
          break;
        }
        case 464: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Closing Deal entity
/// </summary>
public sealed partial class ProtoLightClosingDeal : pb::IMessage<ProtoLightClosingDeal>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLightClosingDeal> _parser = new pb::MessageParser<ProtoLightClosingDeal>(() => new ProtoLightClosingDeal());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLightClosingDeal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightClosingDeal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightClosingDeal(ProtoLightClosingDeal other) : this() {
    _hasBits0 = other._hasBits0;
    dealId_ = other.dealId_;
    orderId_ = other.orderId_;
    positionId_ = other.positionId_;
    volume_ = other.volume_;
    filledVolume_ = other.filledVolume_;
    symbolId_ = other.symbolId_;
    createTimestamp_ = other.createTimestamp_;
    executionTimestamp_ = other.executionTimestamp_;
    executionPrice_ = other.executionPrice_;
    tradeSide_ = other.tradeSide_;
    dealStatus_ = other.dealStatus_;
    dealType_ = other.dealType_;
    commission_ = other.commission_;
    label_ = other.label_;
    channel_ = other.channel_;
    comment_ = other.comment_;
    priceSnapshotId_ = other.priceSnapshotId_;
    baseToUsdConversionRate_ = other.baseToUsdConversionRate_;
    closePositionDetail_ = other.closePositionDetail_ != null ? other.closePositionDetail_.Clone() : null;
    introducingBrokerCommission_ = other.introducingBrokerCommission_;
    mirroringCommission_ = other.mirroringCommission_;
    lotSize_ = other.lotSize_;
    stake_ = other.stake_;
    offsetDeals_ = other.offsetDeals_.Clone();
    moneyDigits_ = other.moneyDigits_;
    marginRate_ = other.marginRate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightClosingDeal Clone() {
    return new ProtoLightClosingDeal(this);
  }

  /// <summary>Field number for the "dealId" field.</summary>
  public const int DealIdFieldNumber = 1;
  private readonly static long DealIdDefaultValue = 0L;

  private long dealId_;
  /// <summary>
  /// ID of Closing Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DealId {
    get { if ((_hasBits0 & 1) != 0) { return dealId_; } else { return DealIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dealId_ = value;
    }
  }
  /// <summary>Gets whether the "dealId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "dealId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 2;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// ID or related Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OrderId {
    get { if ((_hasBits0 & 2) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 3;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// ID of related Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 4;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Requested volume
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 8) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "filledVolume" field.</summary>
  public const int FilledVolumeFieldNumber = 5;
  private readonly static long FilledVolumeDefaultValue = 0L;

  private long filledVolume_;
  /// <summary>
  /// Volume, filled under this Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FilledVolume {
    get { if ((_hasBits0 & 16) != 0) { return filledVolume_; } else { return FilledVolumeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      filledVolume_ = value;
    }
  }
  /// <summary>Gets whether the "filledVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilledVolume {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "filledVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilledVolume() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 6;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// ID of Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 32) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "createTimestamp" field.</summary>
  public const int CreateTimestampFieldNumber = 7;
  private readonly static long CreateTimestampDefaultValue = 0L;

  private long createTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Deal creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CreateTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return createTimestamp_; } else { return CreateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      createTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "createTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCreateTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "createTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCreateTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "executionTimestamp" field.</summary>
  public const int ExecutionTimestampFieldNumber = 8;
  private readonly static long ExecutionTimestampDefaultValue = 0L;

  private long executionTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Deal execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutionTimestamp {
    get { if ((_hasBits0 & 128) != 0) { return executionTimestamp_; } else { return ExecutionTimestampDefaultValue; } }
    set {
      _hasBits0 |= 128;
      executionTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "executionTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionTimestamp {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "executionTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionTimestamp() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "executionPrice" field.</summary>
  public const int ExecutionPriceFieldNumber = 9;
  private readonly static double ExecutionPriceDefaultValue = 0D;

  private double executionPrice_;
  /// <summary>
  /// Execution price of the Deal, including all markups
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double ExecutionPrice {
    get { if ((_hasBits0 & 256) != 0) { return executionPrice_; } else { return ExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 256;
      executionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "executionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPrice {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "executionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPrice() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "tradeSide" field.</summary>
  public const int TradeSideFieldNumber = 10;
  private readonly static global::ProtoTradeSide TradeSideDefaultValue = global::ProtoTradeSide.Buy;

  private global::ProtoTradeSide tradeSide_;
  /// <summary>
  /// Side of the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTradeSide TradeSide {
    get { if ((_hasBits0 & 512) != 0) { return tradeSide_; } else { return TradeSideDefaultValue; } }
    set {
      _hasBits0 |= 512;
      tradeSide_ = value;
    }
  }
  /// <summary>Gets whether the "tradeSide" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeSide {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "tradeSide" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeSide() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "dealStatus" field.</summary>
  public const int DealStatusFieldNumber = 11;
  private readonly static global::ProtoDealStatus DealStatusDefaultValue = global::ProtoDealStatus.Filled;

  private global::ProtoDealStatus dealStatus_;
  /// <summary>
  /// Status of the Deal Default: DEAL_STATUS_FILLED
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDealStatus DealStatus {
    get { if ((_hasBits0 & 1024) != 0) { return dealStatus_; } else { return DealStatusDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      dealStatus_ = value;
    }
  }
  /// <summary>Gets whether the "dealStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealStatus {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "dealStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealStatus() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "dealType" field.</summary>
  public const int DealTypeFieldNumber = 12;
  private readonly static global::ProtoDealType DealTypeDefaultValue = global::ProtoDealType.MarketDeal;

  private global::ProtoDealType dealType_;
  /// <summary>
  /// Type of the Deal Default: DEAL_TYPE_MARKET
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDealType DealType {
    get { if ((_hasBits0 & 2048) != 0) { return dealType_; } else { return DealTypeDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      dealType_ = value;
    }
  }
  /// <summary>Gets whether the "dealType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealType {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "dealType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealType() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 13;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Amount of trading commission associated with the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 4096) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 14;
  private readonly static string LabelDefaultValue = "";

  private string label_;
  /// <summary>
  /// Label field value from corresponding Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Label {
    get { return label_ ?? LabelDefaultValue; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "label" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLabel {
    get { return label_ != null; }
  }
  /// <summary>Clears the value of the "label" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLabel() {
    label_ = null;
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 15;
  private readonly static string ChannelDefaultValue = "";

  private string channel_;
  /// <summary>
  /// Channel value specified in the corresponding Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Channel {
    get { return channel_ ?? ChannelDefaultValue; }
    set {
      channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "channel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChannel {
    get { return channel_ != null; }
  }
  /// <summary>Clears the value of the "channel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChannel() {
    channel_ = null;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 16;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment value specified in the corresponding Order request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "priceSnapshotId" field.</summary>
  public const int PriceSnapshotIdFieldNumber = 17;
  private readonly static long PriceSnapshotIdDefaultValue = 0L;

  private long priceSnapshotId_;
  /// <summary>
  /// ID of the related Price Snapshot (snapshot of the prices at the moment of creation of the Deal)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PriceSnapshotId {
    get { if ((_hasBits0 & 8192) != 0) { return priceSnapshotId_; } else { return PriceSnapshotIdDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      priceSnapshotId_ = value;
    }
  }
  /// <summary>Gets whether the "priceSnapshotId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPriceSnapshotId {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "priceSnapshotId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPriceSnapshotId() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "baseToUsdConversionRate" field.</summary>
  public const int BaseToUsdConversionRateFieldNumber = 18;
  private readonly static double BaseToUsdConversionRateDefaultValue = 0D;

  private double baseToUsdConversionRate_;
  /// <summary>
  /// Base Asset to USD conversion rate
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double BaseToUsdConversionRate {
    get { if ((_hasBits0 & 16384) != 0) { return baseToUsdConversionRate_; } else { return BaseToUsdConversionRateDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      baseToUsdConversionRate_ = value;
    }
  }
  /// <summary>Gets whether the "baseToUsdConversionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseToUsdConversionRate {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "baseToUsdConversionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseToUsdConversionRate() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "closePositionDetail" field.</summary>
  public const int ClosePositionDetailFieldNumber = 19;
  private global::ProtoLightClosePositionDetail closePositionDetail_;
  /// <summary>
  /// Related trading details for Closing Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoLightClosePositionDetail ClosePositionDetail {
    get { return closePositionDetail_; }
    set {
      closePositionDetail_ = value;
    }
  }

  /// <summary>Field number for the "introducingBrokerCommission" field.</summary>
  public const int IntroducingBrokerCommissionFieldNumber = 20;
  private readonly static long IntroducingBrokerCommissionDefaultValue = 0L;

  private long introducingBrokerCommission_;
  /// <summary>
  /// Additional commission which will be paid to the IB for the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerCommission {
    get { if ((_hasBits0 & 32768) != 0) { return introducingBrokerCommission_; } else { return IntroducingBrokerCommissionDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      introducingBrokerCommission_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommission {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommission() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "mirroringCommission" field.</summary>
  public const int MirroringCommissionFieldNumber = 21;
  private readonly static long MirroringCommissionDefaultValue = 0L;

  private long mirroringCommission_;
  /// <summary>
  /// Amount of commission which Trader pays to Spotware for providing some Strategy in Copy
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MirroringCommission {
    get { if ((_hasBits0 & 65536) != 0) { return mirroringCommission_; } else { return MirroringCommissionDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      mirroringCommission_ = value;
    }
  }
  /// <summary>Gets whether the "mirroringCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMirroringCommission {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "mirroringCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMirroringCommission() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "lotSize" field.</summary>
  public const int LotSizeFieldNumber = 22;
  private readonly static long LotSizeDefaultValue = 0L;

  private long lotSize_;
  /// <summary>
  /// Amount of units of the base Asset in one lot of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LotSize {
    get { if ((_hasBits0 & 131072) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      lotSize_ = value;
    }
  }
  /// <summary>Gets whether the "lotSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLotSize {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "lotSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLotSize() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "stake" field.</summary>
  public const int StakeFieldNumber = 23;
  private readonly static long StakeDefaultValue = 0L;

  private long stake_;
  /// <summary>
  /// Stake, filled under this Deal (for Spread Betting)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Stake {
    get { if ((_hasBits0 & 262144) != 0) { return stake_; } else { return StakeDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      stake_ = value;
    }
  }
  /// <summary>Gets whether the "stake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStake {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "stake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStake() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "offsetDeals" field.</summary>
  public const int OffsetDealsFieldNumber = 24;
  private static readonly pb::FieldCodec<global::ProtoLightOffsetDeal> _repeated_offsetDeals_codec
      = pb::FieldCodec.ForMessage(194, global::ProtoLightOffsetDeal.Parser);
  private readonly pbc::RepeatedField<global::ProtoLightOffsetDeal> offsetDeals_ = new pbc::RepeatedField<global::ProtoLightOffsetDeal>();
  /// <summary>
  /// Deals that were offset by a this Deal and that are offsetting this Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoLightOffsetDeal> OffsetDeals {
    get { return offsetDeals_; }
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 25;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission,mirroringCommission, introducingBrokerCommission
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 524288) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "marginRate" field.</summary>
  public const int MarginRateFieldNumber = 26;
  private readonly static double MarginRateDefaultValue = 0D;

  private double marginRate_;
  /// <summary>
  /// Base Asset to deposit Asset conversion rate
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginRate {
    get { if ((_hasBits0 & 1048576) != 0) { return marginRate_; } else { return MarginRateDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      marginRate_ = value;
    }
  }
  /// <summary>Gets whether the "marginRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginRate {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "marginRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginRate() {
    _hasBits0 &= ~1048576;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLightClosingDeal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLightClosingDeal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DealId != other.DealId) return false;
    if (OrderId != other.OrderId) return false;
    if (PositionId != other.PositionId) return false;
    if (Volume != other.Volume) return false;
    if (FilledVolume != other.FilledVolume) return false;
    if (SymbolId != other.SymbolId) return false;
    if (CreateTimestamp != other.CreateTimestamp) return false;
    if (ExecutionTimestamp != other.ExecutionTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExecutionPrice, other.ExecutionPrice)) return false;
    if (TradeSide != other.TradeSide) return false;
    if (DealStatus != other.DealStatus) return false;
    if (DealType != other.DealType) return false;
    if (Commission != other.Commission) return false;
    if (Label != other.Label) return false;
    if (Channel != other.Channel) return false;
    if (Comment != other.Comment) return false;
    if (PriceSnapshotId != other.PriceSnapshotId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseToUsdConversionRate, other.BaseToUsdConversionRate)) return false;
    if (!object.Equals(ClosePositionDetail, other.ClosePositionDetail)) return false;
    if (IntroducingBrokerCommission != other.IntroducingBrokerCommission) return false;
    if (MirroringCommission != other.MirroringCommission) return false;
    if (LotSize != other.LotSize) return false;
    if (Stake != other.Stake) return false;
    if(!offsetDeals_.Equals(other.offsetDeals_)) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRate, other.MarginRate)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDealId) hash ^= DealId.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasFilledVolume) hash ^= FilledVolume.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasCreateTimestamp) hash ^= CreateTimestamp.GetHashCode();
    if (HasExecutionTimestamp) hash ^= ExecutionTimestamp.GetHashCode();
    if (HasExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExecutionPrice);
    if (HasTradeSide) hash ^= TradeSide.GetHashCode();
    if (HasDealStatus) hash ^= DealStatus.GetHashCode();
    if (HasDealType) hash ^= DealType.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasLabel) hash ^= Label.GetHashCode();
    if (HasChannel) hash ^= Channel.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasPriceSnapshotId) hash ^= PriceSnapshotId.GetHashCode();
    if (HasBaseToUsdConversionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseToUsdConversionRate);
    if (closePositionDetail_ != null) hash ^= ClosePositionDetail.GetHashCode();
    if (HasIntroducingBrokerCommission) hash ^= IntroducingBrokerCommission.GetHashCode();
    if (HasMirroringCommission) hash ^= MirroringCommission.GetHashCode();
    if (HasLotSize) hash ^= LotSize.GetHashCode();
    if (HasStake) hash ^= Stake.GetHashCode();
    hash ^= offsetDeals_.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (HasMarginRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRate);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasOrderId) {
      output.WriteRawTag(16);
      output.WriteInt64(OrderId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(Volume);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(FilledVolume);
    }
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(73);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasTradeSide) {
      output.WriteRawTag(80);
      output.WriteEnum((int) TradeSide);
    }
    if (HasDealStatus) {
      output.WriteRawTag(88);
      output.WriteEnum((int) DealStatus);
    }
    if (HasDealType) {
      output.WriteRawTag(96);
      output.WriteEnum((int) DealType);
    }
    if (HasCommission) {
      output.WriteRawTag(104);
      output.WriteInt64(Commission);
    }
    if (HasLabel) {
      output.WriteRawTag(114);
      output.WriteString(Label);
    }
    if (HasChannel) {
      output.WriteRawTag(122);
      output.WriteString(Channel);
    }
    if (HasComment) {
      output.WriteRawTag(130, 1);
      output.WriteString(Comment);
    }
    if (HasPriceSnapshotId) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(PriceSnapshotId);
    }
    if (HasBaseToUsdConversionRate) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(BaseToUsdConversionRate);
    }
    if (closePositionDetail_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(ClosePositionDetail);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(MirroringCommission);
    }
    if (HasLotSize) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(LotSize);
    }
    if (HasStake) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(Stake);
    }
    offsetDeals_.WriteTo(output, _repeated_offsetDeals_codec);
    if (HasMoneyDigits) {
      output.WriteRawTag(200, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasMarginRate) {
      output.WriteRawTag(209, 1);
      output.WriteDouble(MarginRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasOrderId) {
      output.WriteRawTag(16);
      output.WriteInt64(OrderId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(Volume);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(FilledVolume);
    }
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(73);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasTradeSide) {
      output.WriteRawTag(80);
      output.WriteEnum((int) TradeSide);
    }
    if (HasDealStatus) {
      output.WriteRawTag(88);
      output.WriteEnum((int) DealStatus);
    }
    if (HasDealType) {
      output.WriteRawTag(96);
      output.WriteEnum((int) DealType);
    }
    if (HasCommission) {
      output.WriteRawTag(104);
      output.WriteInt64(Commission);
    }
    if (HasLabel) {
      output.WriteRawTag(114);
      output.WriteString(Label);
    }
    if (HasChannel) {
      output.WriteRawTag(122);
      output.WriteString(Channel);
    }
    if (HasComment) {
      output.WriteRawTag(130, 1);
      output.WriteString(Comment);
    }
    if (HasPriceSnapshotId) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(PriceSnapshotId);
    }
    if (HasBaseToUsdConversionRate) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(BaseToUsdConversionRate);
    }
    if (closePositionDetail_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(ClosePositionDetail);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(MirroringCommission);
    }
    if (HasLotSize) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(LotSize);
    }
    if (HasStake) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(Stake);
    }
    offsetDeals_.WriteTo(ref output, _repeated_offsetDeals_codec);
    if (HasMoneyDigits) {
      output.WriteRawTag(200, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasMarginRate) {
      output.WriteRawTag(209, 1);
      output.WriteDouble(MarginRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDealId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealId);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasFilledVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FilledVolume);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasCreateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      size += 1 + 8;
    }
    if (HasTradeSide) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeSide);
    }
    if (HasDealStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DealStatus);
    }
    if (HasDealType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DealType);
    }
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasLabel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (HasChannel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
    }
    if (HasComment) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasPriceSnapshotId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PriceSnapshotId);
    }
    if (HasBaseToUsdConversionRate) {
      size += 2 + 8;
    }
    if (closePositionDetail_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClosePositionDetail);
    }
    if (HasIntroducingBrokerCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerCommission);
    }
    if (HasMirroringCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MirroringCommission);
    }
    if (HasLotSize) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LotSize);
    }
    if (HasStake) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Stake);
    }
    size += offsetDeals_.CalculateSize(_repeated_offsetDeals_codec);
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (HasMarginRate) {
      size += 2 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLightClosingDeal other) {
    if (other == null) {
      return;
    }
    if (other.HasDealId) {
      DealId = other.DealId;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasFilledVolume) {
      FilledVolume = other.FilledVolume;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasCreateTimestamp) {
      CreateTimestamp = other.CreateTimestamp;
    }
    if (other.HasExecutionTimestamp) {
      ExecutionTimestamp = other.ExecutionTimestamp;
    }
    if (other.HasExecutionPrice) {
      ExecutionPrice = other.ExecutionPrice;
    }
    if (other.HasTradeSide) {
      TradeSide = other.TradeSide;
    }
    if (other.HasDealStatus) {
      DealStatus = other.DealStatus;
    }
    if (other.HasDealType) {
      DealType = other.DealType;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasLabel) {
      Label = other.Label;
    }
    if (other.HasChannel) {
      Channel = other.Channel;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasPriceSnapshotId) {
      PriceSnapshotId = other.PriceSnapshotId;
    }
    if (other.HasBaseToUsdConversionRate) {
      BaseToUsdConversionRate = other.BaseToUsdConversionRate;
    }
    if (other.closePositionDetail_ != null) {
      if (closePositionDetail_ == null) {
        ClosePositionDetail = new global::ProtoLightClosePositionDetail();
      }
      ClosePositionDetail.MergeFrom(other.ClosePositionDetail);
    }
    if (other.HasIntroducingBrokerCommission) {
      IntroducingBrokerCommission = other.IntroducingBrokerCommission;
    }
    if (other.HasMirroringCommission) {
      MirroringCommission = other.MirroringCommission;
    }
    if (other.HasLotSize) {
      LotSize = other.LotSize;
    }
    if (other.HasStake) {
      Stake = other.Stake;
    }
    offsetDeals_.Add(other.offsetDeals_);
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    if (other.HasMarginRate) {
      MarginRate = other.MarginRate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          OrderId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          Volume = input.ReadInt64();
          break;
        }
        case 40: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 56: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 73: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 80: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 88: {
          DealStatus = (global::ProtoDealStatus) input.ReadEnum();
          break;
        }
        case 96: {
          DealType = (global::ProtoDealType) input.ReadEnum();
          break;
        }
        case 104: {
          Commission = input.ReadInt64();
          break;
        }
        case 114: {
          Label = input.ReadString();
          break;
        }
        case 122: {
          Channel = input.ReadString();
          break;
        }
        case 130: {
          Comment = input.ReadString();
          break;
        }
        case 136: {
          PriceSnapshotId = input.ReadInt64();
          break;
        }
        case 145: {
          BaseToUsdConversionRate = input.ReadDouble();
          break;
        }
        case 154: {
          if (closePositionDetail_ == null) {
            ClosePositionDetail = new global::ProtoLightClosePositionDetail();
          }
          input.ReadMessage(ClosePositionDetail);
          break;
        }
        case 160: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 168: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 176: {
          LotSize = input.ReadInt64();
          break;
        }
        case 184: {
          Stake = input.ReadInt64();
          break;
        }
        case 194: {
          offsetDeals_.AddEntriesFrom(input, _repeated_offsetDeals_codec);
          break;
        }
        case 200: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 209: {
          MarginRate = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          OrderId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          Volume = input.ReadInt64();
          break;
        }
        case 40: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 56: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 73: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 80: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 88: {
          DealStatus = (global::ProtoDealStatus) input.ReadEnum();
          break;
        }
        case 96: {
          DealType = (global::ProtoDealType) input.ReadEnum();
          break;
        }
        case 104: {
          Commission = input.ReadInt64();
          break;
        }
        case 114: {
          Label = input.ReadString();
          break;
        }
        case 122: {
          Channel = input.ReadString();
          break;
        }
        case 130: {
          Comment = input.ReadString();
          break;
        }
        case 136: {
          PriceSnapshotId = input.ReadInt64();
          break;
        }
        case 145: {
          BaseToUsdConversionRate = input.ReadDouble();
          break;
        }
        case 154: {
          if (closePositionDetail_ == null) {
            ClosePositionDetail = new global::ProtoLightClosePositionDetail();
          }
          input.ReadMessage(ClosePositionDetail);
          break;
        }
        case 160: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 168: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 176: {
          LotSize = input.ReadInt64();
          break;
        }
        case 184: {
          Stake = input.ReadInt64();
          break;
        }
        case 194: {
          offsetDeals_.AddEntriesFrom(ref input, _repeated_offsetDeals_codec);
          break;
        }
        case 200: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 209: {
          MarginRate = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Trading details for Closing Deal (with limited number of fields)
/// </summary>
public sealed partial class ProtoLightClosePositionDetail : pb::IMessage<ProtoLightClosePositionDetail>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLightClosePositionDetail> _parser = new pb::MessageParser<ProtoLightClosePositionDetail>(() => new ProtoLightClosePositionDetail());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLightClosePositionDetail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightClosePositionDetail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightClosePositionDetail(ProtoLightClosePositionDetail other) : this() {
    _hasBits0 = other._hasBits0;
    entryPrice_ = other.entryPrice_;
    profit_ = other.profit_;
    swap_ = other.swap_;
    commission_ = other.commission_;
    balance_ = other.balance_;
    quoteToDepositConversionRate_ = other.quoteToDepositConversionRate_;
    closedVolume_ = other.closedVolume_;
    balanceVersion_ = other.balanceVersion_;
    introducingBrokerCommission_ = other.introducingBrokerCommission_;
    mirroringCommission_ = other.mirroringCommission_;
    minEquity_ = other.minEquity_;
    maxEquity_ = other.maxEquity_;
    offsetDealTimestamp_ = other.offsetDealTimestamp_;
    closedStake_ = other.closedStake_;
    moneyDigits_ = other.moneyDigits_;
    pnlConversionFee_ = other.pnlConversionFee_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightClosePositionDetail Clone() {
    return new ProtoLightClosePositionDetail(this);
  }

  /// <summary>Field number for the "entryPrice" field.</summary>
  public const int EntryPriceFieldNumber = 1;
  private readonly static double EntryPriceDefaultValue = 0D;

  private double entryPrice_;
  /// <summary>
  /// Position price at the moment of filling the closing Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EntryPrice {
    get { if ((_hasBits0 & 1) != 0) { return entryPrice_; } else { return EntryPriceDefaultValue; } }
    set {
      _hasBits0 |= 1;
      entryPrice_ = value;
    }
  }
  /// <summary>Gets whether the "entryPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEntryPrice {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "entryPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEntryPrice() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "profit" field.</summary>
  public const int ProfitFieldNumber = 2;
  private readonly static long ProfitDefaultValue = 0L;

  private long profit_;
  /// <summary>
  /// Amount of realized gross profit after Closing Deal execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Profit {
    get { if ((_hasBits0 & 2) != 0) { return profit_; } else { return ProfitDefaultValue; } }
    set {
      _hasBits0 |= 2;
      profit_ = value;
    }
  }
  /// <summary>Gets whether the "profit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProfit {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "profit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProfit() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "swap" field.</summary>
  public const int SwapFieldNumber = 3;
  private readonly static long SwapDefaultValue = 0L;

  private long swap_;
  /// <summary>
  /// Amount of realized Swap related to closed volume
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Swap {
    get { if ((_hasBits0 & 4) != 0) { return swap_; } else { return SwapDefaultValue; } }
    set {
      _hasBits0 |= 4;
      swap_ = value;
    }
  }
  /// <summary>Gets whether the "swap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwap {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "swap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwap() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 4;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Amount of realized commission related to closed volume
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 8) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 8;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 5;
  private readonly static long BalanceDefaultValue = 0L;

  private long balance_;
  /// <summary>
  /// Trader's balance after Closing Deal execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Balance {
    get { if ((_hasBits0 & 16) != 0) { return balance_; } else { return BalanceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      balance_ = value;
    }
  }
  /// <summary>Gets whether the "balance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalance {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "balance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalance() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "quoteToDepositConversionRate" field.</summary>
  public const int QuoteToDepositConversionRateFieldNumber = 6;
  private readonly static double QuoteToDepositConversionRateDefaultValue = 0D;

  private double quoteToDepositConversionRate_;
  /// <summary>
  /// Quote/Deposit currency conversion rate on the time of Closing Deal execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double QuoteToDepositConversionRate {
    get { if ((_hasBits0 & 32) != 0) { return quoteToDepositConversionRate_; } else { return QuoteToDepositConversionRateDefaultValue; } }
    set {
      _hasBits0 |= 32;
      quoteToDepositConversionRate_ = value;
    }
  }
  /// <summary>Gets whether the "quoteToDepositConversionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuoteToDepositConversionRate {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "quoteToDepositConversionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuoteToDepositConversionRate() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "closedVolume" field.</summary>
  public const int ClosedVolumeFieldNumber = 7;
  private readonly static long ClosedVolumeDefaultValue = 0L;

  private long closedVolume_;
  /// <summary>
  /// Closed volume in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ClosedVolume {
    get { if ((_hasBits0 & 64) != 0) { return closedVolume_; } else { return ClosedVolumeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      closedVolume_ = value;
    }
  }
  /// <summary>Gets whether the "closedVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosedVolume {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "closedVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosedVolume() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "balanceVersion" field.</summary>
  public const int BalanceVersionFieldNumber = 8;
  private readonly static long BalanceVersionDefaultValue = 0L;

  private long balanceVersion_;
  /// <summary>
  /// Balance version of the Account related to Closing Deal operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceVersion {
    get { if ((_hasBits0 & 128) != 0) { return balanceVersion_; } else { return BalanceVersionDefaultValue; } }
    set {
      _hasBits0 |= 128;
      balanceVersion_ = value;
    }
  }
  /// <summary>Gets whether the "balanceVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceVersion {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "balanceVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceVersion() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "introducingBrokerCommission" field.</summary>
  public const int IntroducingBrokerCommissionFieldNumber = 9;
  private readonly static long IntroducingBrokerCommissionDefaultValue = 0L;

  private long introducingBrokerCommission_;
  /// <summary>
  /// Additional commission which will be paid to the IB for the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerCommission {
    get { if ((_hasBits0 & 256) != 0) { return introducingBrokerCommission_; } else { return IntroducingBrokerCommissionDefaultValue; } }
    set {
      _hasBits0 |= 256;
      introducingBrokerCommission_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommission {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommission() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "mirroringCommission" field.</summary>
  public const int MirroringCommissionFieldNumber = 10;
  private readonly static long MirroringCommissionDefaultValue = 0L;

  private long mirroringCommission_;
  /// <summary>
  /// Amount of commission which Trader pays to Spotware for providing some Strategy in Copy
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MirroringCommission {
    get { if ((_hasBits0 & 512) != 0) { return mirroringCommission_; } else { return MirroringCommissionDefaultValue; } }
    set {
      _hasBits0 |= 512;
      mirroringCommission_ = value;
    }
  }
  /// <summary>Gets whether the "mirroringCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMirroringCommission {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "mirroringCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMirroringCommission() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "minEquity" field.</summary>
  public const int MinEquityFieldNumber = 11;
  private readonly static long MinEquityDefaultValue = 0L;

  private long minEquity_;
  /// <summary>
  /// Minimum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinEquity {
    get { if ((_hasBits0 & 1024) != 0) { return minEquity_; } else { return MinEquityDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      minEquity_ = value;
    }
  }
  /// <summary>Gets whether the "minEquity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinEquity {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "minEquity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinEquity() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "maxEquity" field.</summary>
  public const int MaxEquityFieldNumber = 12;
  private readonly static long MaxEquityDefaultValue = 0L;

  private long maxEquity_;
  /// <summary>
  /// Maximum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxEquity {
    get { if ((_hasBits0 & 2048) != 0) { return maxEquity_; } else { return MaxEquityDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      maxEquity_ = value;
    }
  }
  /// <summary>Gets whether the "maxEquity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxEquity {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "maxEquity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxEquity() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "offsetDealTimestamp" field.</summary>
  public const int OffsetDealTimestampFieldNumber = 13;
  private readonly static long OffsetDealTimestampDefaultValue = 0L;

  private long offsetDealTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of execution of the first offset opening Deal for the Closing Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OffsetDealTimestamp {
    get { if ((_hasBits0 & 4096) != 0) { return offsetDealTimestamp_; } else { return OffsetDealTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      offsetDealTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "offsetDealTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOffsetDealTimestamp {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "offsetDealTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOffsetDealTimestamp() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "closedStake" field.</summary>
  public const int ClosedStakeFieldNumber = 16;
  private readonly static long ClosedStakeDefaultValue = 0L;

  private long closedStake_;
  /// <summary>
  /// Stake, realized by the related Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ClosedStake {
    get { if ((_hasBits0 & 8192) != 0) { return closedStake_; } else { return ClosedStakeDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      closedStake_ = value;
    }
  }
  /// <summary>Gets whether the "closedStake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosedStake {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "closedStake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosedStake() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 17;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, mirroringCommission, introducingBrokerCommission, balance, pnlConversionFee
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 16384) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "pnlConversionFee" field.</summary>
  public const int PnlConversionFeeFieldNumber = 18;
  private readonly static long PnlConversionFeeDefaultValue = 0L;

  private long pnlConversionFee_;
  /// <summary>
  /// Conversion Fee applied to the Deal in account's ccy when Trader symbol's quote Asset ID &lt;> ProtoOATrader.depositAssetId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PnlConversionFee {
    get { if ((_hasBits0 & 32768) != 0) { return pnlConversionFee_; } else { return PnlConversionFeeDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      pnlConversionFee_ = value;
    }
  }
  /// <summary>Gets whether the "pnlConversionFee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPnlConversionFee {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "pnlConversionFee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPnlConversionFee() {
    _hasBits0 &= ~32768;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLightClosePositionDetail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLightClosePositionDetail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EntryPrice, other.EntryPrice)) return false;
    if (Profit != other.Profit) return false;
    if (Swap != other.Swap) return false;
    if (Commission != other.Commission) return false;
    if (Balance != other.Balance) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(QuoteToDepositConversionRate, other.QuoteToDepositConversionRate)) return false;
    if (ClosedVolume != other.ClosedVolume) return false;
    if (BalanceVersion != other.BalanceVersion) return false;
    if (IntroducingBrokerCommission != other.IntroducingBrokerCommission) return false;
    if (MirroringCommission != other.MirroringCommission) return false;
    if (MinEquity != other.MinEquity) return false;
    if (MaxEquity != other.MaxEquity) return false;
    if (OffsetDealTimestamp != other.OffsetDealTimestamp) return false;
    if (ClosedStake != other.ClosedStake) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    if (PnlConversionFee != other.PnlConversionFee) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEntryPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EntryPrice);
    if (HasProfit) hash ^= Profit.GetHashCode();
    if (HasSwap) hash ^= Swap.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasBalance) hash ^= Balance.GetHashCode();
    if (HasQuoteToDepositConversionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(QuoteToDepositConversionRate);
    if (HasClosedVolume) hash ^= ClosedVolume.GetHashCode();
    if (HasBalanceVersion) hash ^= BalanceVersion.GetHashCode();
    if (HasIntroducingBrokerCommission) hash ^= IntroducingBrokerCommission.GetHashCode();
    if (HasMirroringCommission) hash ^= MirroringCommission.GetHashCode();
    if (HasMinEquity) hash ^= MinEquity.GetHashCode();
    if (HasMaxEquity) hash ^= MaxEquity.GetHashCode();
    if (HasOffsetDealTimestamp) hash ^= OffsetDealTimestamp.GetHashCode();
    if (HasClosedStake) hash ^= ClosedStake.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (HasPnlConversionFee) hash ^= PnlConversionFee.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasEntryPrice) {
      output.WriteRawTag(9);
      output.WriteDouble(EntryPrice);
    }
    if (HasProfit) {
      output.WriteRawTag(16);
      output.WriteInt64(Profit);
    }
    if (HasSwap) {
      output.WriteRawTag(24);
      output.WriteInt64(Swap);
    }
    if (HasCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(Commission);
    }
    if (HasBalance) {
      output.WriteRawTag(40);
      output.WriteInt64(Balance);
    }
    if (HasQuoteToDepositConversionRate) {
      output.WriteRawTag(49);
      output.WriteDouble(QuoteToDepositConversionRate);
    }
    if (HasClosedVolume) {
      output.WriteRawTag(56);
      output.WriteInt64(ClosedVolume);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(64);
      output.WriteInt64(BalanceVersion);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(72);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(80);
      output.WriteInt64(MirroringCommission);
    }
    if (HasMinEquity) {
      output.WriteRawTag(88);
      output.WriteInt64(MinEquity);
    }
    if (HasMaxEquity) {
      output.WriteRawTag(96);
      output.WriteInt64(MaxEquity);
    }
    if (HasOffsetDealTimestamp) {
      output.WriteRawTag(104);
      output.WriteInt64(OffsetDealTimestamp);
    }
    if (HasClosedStake) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(ClosedStake);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(PnlConversionFee);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasEntryPrice) {
      output.WriteRawTag(9);
      output.WriteDouble(EntryPrice);
    }
    if (HasProfit) {
      output.WriteRawTag(16);
      output.WriteInt64(Profit);
    }
    if (HasSwap) {
      output.WriteRawTag(24);
      output.WriteInt64(Swap);
    }
    if (HasCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(Commission);
    }
    if (HasBalance) {
      output.WriteRawTag(40);
      output.WriteInt64(Balance);
    }
    if (HasQuoteToDepositConversionRate) {
      output.WriteRawTag(49);
      output.WriteDouble(QuoteToDepositConversionRate);
    }
    if (HasClosedVolume) {
      output.WriteRawTag(56);
      output.WriteInt64(ClosedVolume);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(64);
      output.WriteInt64(BalanceVersion);
    }
    if (HasIntroducingBrokerCommission) {
      output.WriteRawTag(72);
      output.WriteInt64(IntroducingBrokerCommission);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(80);
      output.WriteInt64(MirroringCommission);
    }
    if (HasMinEquity) {
      output.WriteRawTag(88);
      output.WriteInt64(MinEquity);
    }
    if (HasMaxEquity) {
      output.WriteRawTag(96);
      output.WriteInt64(MaxEquity);
    }
    if (HasOffsetDealTimestamp) {
      output.WriteRawTag(104);
      output.WriteInt64(OffsetDealTimestamp);
    }
    if (HasClosedStake) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(ClosedStake);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(PnlConversionFee);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasEntryPrice) {
      size += 1 + 8;
    }
    if (HasProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Profit);
    }
    if (HasSwap) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Swap);
    }
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasBalance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
    }
    if (HasQuoteToDepositConversionRate) {
      size += 1 + 8;
    }
    if (HasClosedVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClosedVolume);
    }
    if (HasBalanceVersion) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceVersion);
    }
    if (HasIntroducingBrokerCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerCommission);
    }
    if (HasMirroringCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MirroringCommission);
    }
    if (HasMinEquity) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinEquity);
    }
    if (HasMaxEquity) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxEquity);
    }
    if (HasOffsetDealTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OffsetDealTimestamp);
    }
    if (HasClosedStake) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ClosedStake);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PnlConversionFee);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLightClosePositionDetail other) {
    if (other == null) {
      return;
    }
    if (other.HasEntryPrice) {
      EntryPrice = other.EntryPrice;
    }
    if (other.HasProfit) {
      Profit = other.Profit;
    }
    if (other.HasSwap) {
      Swap = other.Swap;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasBalance) {
      Balance = other.Balance;
    }
    if (other.HasQuoteToDepositConversionRate) {
      QuoteToDepositConversionRate = other.QuoteToDepositConversionRate;
    }
    if (other.HasClosedVolume) {
      ClosedVolume = other.ClosedVolume;
    }
    if (other.HasBalanceVersion) {
      BalanceVersion = other.BalanceVersion;
    }
    if (other.HasIntroducingBrokerCommission) {
      IntroducingBrokerCommission = other.IntroducingBrokerCommission;
    }
    if (other.HasMirroringCommission) {
      MirroringCommission = other.MirroringCommission;
    }
    if (other.HasMinEquity) {
      MinEquity = other.MinEquity;
    }
    if (other.HasMaxEquity) {
      MaxEquity = other.MaxEquity;
    }
    if (other.HasOffsetDealTimestamp) {
      OffsetDealTimestamp = other.OffsetDealTimestamp;
    }
    if (other.HasClosedStake) {
      ClosedStake = other.ClosedStake;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    if (other.HasPnlConversionFee) {
      PnlConversionFee = other.PnlConversionFee;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          EntryPrice = input.ReadDouble();
          break;
        }
        case 16: {
          Profit = input.ReadInt64();
          break;
        }
        case 24: {
          Swap = input.ReadInt64();
          break;
        }
        case 32: {
          Commission = input.ReadInt64();
          break;
        }
        case 40: {
          Balance = input.ReadInt64();
          break;
        }
        case 49: {
          QuoteToDepositConversionRate = input.ReadDouble();
          break;
        }
        case 56: {
          ClosedVolume = input.ReadInt64();
          break;
        }
        case 64: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 72: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 80: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 88: {
          MinEquity = input.ReadInt64();
          break;
        }
        case 96: {
          MaxEquity = input.ReadInt64();
          break;
        }
        case 104: {
          OffsetDealTimestamp = input.ReadInt64();
          break;
        }
        case 128: {
          ClosedStake = input.ReadInt64();
          break;
        }
        case 136: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 144: {
          PnlConversionFee = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          EntryPrice = input.ReadDouble();
          break;
        }
        case 16: {
          Profit = input.ReadInt64();
          break;
        }
        case 24: {
          Swap = input.ReadInt64();
          break;
        }
        case 32: {
          Commission = input.ReadInt64();
          break;
        }
        case 40: {
          Balance = input.ReadInt64();
          break;
        }
        case 49: {
          QuoteToDepositConversionRate = input.ReadDouble();
          break;
        }
        case 56: {
          ClosedVolume = input.ReadInt64();
          break;
        }
        case 64: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 72: {
          IntroducingBrokerCommission = input.ReadInt64();
          break;
        }
        case 80: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 88: {
          MinEquity = input.ReadInt64();
          break;
        }
        case 96: {
          MaxEquity = input.ReadInt64();
          break;
        }
        case 104: {
          OffsetDealTimestamp = input.ReadInt64();
          break;
        }
        case 128: {
          ClosedStake = input.ReadInt64();
          break;
        }
        case 136: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 144: {
          PnlConversionFee = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Offset Deal entity
/// </summary>
public sealed partial class ProtoLightOffsetDeal : pb::IMessage<ProtoLightOffsetDeal>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLightOffsetDeal> _parser = new pb::MessageParser<ProtoLightOffsetDeal>(() => new ProtoLightOffsetDeal());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLightOffsetDeal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightOffsetDeal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightOffsetDeal(ProtoLightOffsetDeal other) : this() {
    _hasBits0 = other._hasBits0;
    dealId_ = other.dealId_;
    filledVolume_ = other.filledVolume_;
    executionTimestamp_ = other.executionTimestamp_;
    executionPrice_ = other.executionPrice_;
    stake_ = other.stake_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightOffsetDeal Clone() {
    return new ProtoLightOffsetDeal(this);
  }

  /// <summary>Field number for the "dealId" field.</summary>
  public const int DealIdFieldNumber = 1;
  private readonly static long DealIdDefaultValue = 0L;

  private long dealId_;
  /// <summary>
  /// ID of offset Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DealId {
    get { if ((_hasBits0 & 1) != 0) { return dealId_; } else { return DealIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dealId_ = value;
    }
  }
  /// <summary>Gets whether the "dealId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "dealId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "filledVolume" field.</summary>
  public const int FilledVolumeFieldNumber = 2;
  private readonly static long FilledVolumeDefaultValue = 0L;

  private long filledVolume_;
  /// <summary>
  /// Volume, filled under this Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FilledVolume {
    get { if ((_hasBits0 & 2) != 0) { return filledVolume_; } else { return FilledVolumeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      filledVolume_ = value;
    }
  }
  /// <summary>Gets whether the "filledVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilledVolume {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "filledVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilledVolume() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "executionTimestamp" field.</summary>
  public const int ExecutionTimestampFieldNumber = 3;
  private readonly static long ExecutionTimestampDefaultValue = 0L;

  private long executionTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Deal creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutionTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return executionTimestamp_; } else { return ExecutionTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      executionTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "executionTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "executionTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "executionPrice" field.</summary>
  public const int ExecutionPriceFieldNumber = 4;
  private readonly static double ExecutionPriceDefaultValue = 0D;

  private double executionPrice_;
  /// <summary>
  /// Execution price of the Deal, including all markups
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double ExecutionPrice {
    get { if ((_hasBits0 & 8) != 0) { return executionPrice_; } else { return ExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 8;
      executionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "executionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPrice {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "executionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPrice() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "stake" field.</summary>
  public const int StakeFieldNumber = 5;
  private readonly static ulong StakeDefaultValue = 0UL;

  private ulong stake_;
  /// <summary>
  /// Stake, filled under this Deal (for Spread Betting)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Stake {
    get { if ((_hasBits0 & 16) != 0) { return stake_; } else { return StakeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      stake_ = value;
    }
  }
  /// <summary>Gets whether the "stake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStake {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "stake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStake() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLightOffsetDeal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLightOffsetDeal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DealId != other.DealId) return false;
    if (FilledVolume != other.FilledVolume) return false;
    if (ExecutionTimestamp != other.ExecutionTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExecutionPrice, other.ExecutionPrice)) return false;
    if (Stake != other.Stake) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDealId) hash ^= DealId.GetHashCode();
    if (HasFilledVolume) hash ^= FilledVolume.GetHashCode();
    if (HasExecutionTimestamp) hash ^= ExecutionTimestamp.GetHashCode();
    if (HasExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExecutionPrice);
    if (HasStake) hash ^= Stake.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(FilledVolume);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(33);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasStake) {
      output.WriteRawTag(40);
      output.WriteUInt64(Stake);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(FilledVolume);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(33);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasStake) {
      output.WriteRawTag(40);
      output.WriteUInt64(Stake);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDealId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealId);
    }
    if (HasFilledVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FilledVolume);
    }
    if (HasExecutionTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      size += 1 + 8;
    }
    if (HasStake) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Stake);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLightOffsetDeal other) {
    if (other == null) {
      return;
    }
    if (other.HasDealId) {
      DealId = other.DealId;
    }
    if (other.HasFilledVolume) {
      FilledVolume = other.FilledVolume;
    }
    if (other.HasExecutionTimestamp) {
      ExecutionTimestamp = other.ExecutionTimestamp;
    }
    if (other.HasExecutionPrice) {
      ExecutionPrice = other.ExecutionPrice;
    }
    if (other.HasStake) {
      Stake = other.Stake;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 24: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 33: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 40: {
          Stake = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 24: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 33: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 40: {
          Stake = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Asset Class entity
/// </summary>
public sealed partial class ProtoAssetClass : pb::IMessage<ProtoAssetClass>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoAssetClass> _parser = new pb::MessageParser<ProtoAssetClass>(() => new ProtoAssetClass());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoAssetClass> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoAssetClass() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoAssetClass(ProtoAssetClass other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    sortingNumber_ = other.sortingNumber_;
    defaultLots_ = other.defaultLots_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoAssetClass Clone() {
    return new ProtoAssetClass(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static long IdDefaultValue = 0L;

  private long id_;
  /// <summary>
  /// ID of Asset Class
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of Asset class
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "sortingNumber" field.</summary>
  public const int SortingNumberFieldNumber = 3;
  private readonly static double SortingNumberDefaultValue = 0D;

  private double sortingNumber_;
  /// <summary>
  /// Number used for sorting of Asset Classes in UI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SortingNumber {
    get { if ((_hasBits0 & 2) != 0) { return sortingNumber_; } else { return SortingNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      sortingNumber_ = value;
    }
  }
  /// <summary>Gets whether the "sortingNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSortingNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "sortingNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSortingNumber() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "defaultLots" field.</summary>
  public const int DefaultLotsFieldNumber = 6;
  private readonly static bool DefaultLotsDefaultValue = false;

  private bool defaultLots_;
  /// <summary>
  /// Specifies what is the default trading unit for the Symbols of the Asset Class (TRUE=Lots; FALSE=Units)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool DefaultLots {
    get { if ((_hasBits0 & 4) != 0) { return defaultLots_; } else { return DefaultLotsDefaultValue; } }
    set {
      _hasBits0 |= 4;
      defaultLots_ = value;
    }
  }
  /// <summary>Gets whether the "defaultLots" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDefaultLots {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "defaultLots" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDefaultLots() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoAssetClass);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoAssetClass other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SortingNumber, other.SortingNumber)) return false;
    if (DefaultLots != other.DefaultLots) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasSortingNumber) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SortingNumber);
    if (HasDefaultLots) hash ^= DefaultLots.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(25);
      output.WriteDouble(SortingNumber);
    }
    if (HasDefaultLots) {
      output.WriteRawTag(48);
      output.WriteBool(DefaultLots);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(25);
      output.WriteDouble(SortingNumber);
    }
    if (HasDefaultLots) {
      output.WriteRawTag(48);
      output.WriteBool(DefaultLots);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasSortingNumber) {
      size += 1 + 8;
    }
    if (HasDefaultLots) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoAssetClass other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasSortingNumber) {
      SortingNumber = other.SortingNumber;
    }
    if (other.HasDefaultLots) {
      DefaultLots = other.DefaultLots;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 25: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 48: {
          DefaultLots = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 25: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 48: {
          DefaultLots = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Details of a Deal that was offset by a specific Deal or is offsetting a specific Deal
/// </summary>
public sealed partial class ProtoDealOffset : pb::IMessage<ProtoDealOffset>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoDealOffset> _parser = new pb::MessageParser<ProtoDealOffset>(() => new ProtoDealOffset());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoDealOffset> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDealOffset() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDealOffset(ProtoDealOffset other) : this() {
    _hasBits0 = other._hasBits0;
    dealId_ = other.dealId_;
    volume_ = other.volume_;
    stake_ = other.stake_;
    executionTimestamp_ = other.executionTimestamp_;
    executionPrice_ = other.executionPrice_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDealOffset Clone() {
    return new ProtoDealOffset(this);
  }

  /// <summary>Field number for the "dealId" field.</summary>
  public const int DealIdFieldNumber = 1;
  private readonly static long DealIdDefaultValue = 0L;

  private long dealId_;
  /// <summary>
  /// The unique ID of the execution Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DealId {
    get { if ((_hasBits0 & 1) != 0) { return dealId_; } else { return DealIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dealId_ = value;
    }
  }
  /// <summary>Gets whether the "dealId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "dealId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 2;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Matched volume, in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 2) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "stake" field.</summary>
  public const int StakeFieldNumber = 3;
  private readonly static ulong StakeDefaultValue = 0UL;

  private ulong stake_;
  /// <summary>
  /// Stake for Spread Betting
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Stake {
    get { if ((_hasBits0 & 4) != 0) { return stake_; } else { return StakeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      stake_ = value;
    }
  }
  /// <summary>Gets whether the "stake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStake {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "stake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStake() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "executionTimestamp" field.</summary>
  public const int ExecutionTimestampFieldNumber = 4;
  private readonly static long ExecutionTimestampDefaultValue = 0L;

  private long executionTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of execution of the offset Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutionTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return executionTimestamp_; } else { return ExecutionTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      executionTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "executionTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "executionTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "executionPrice" field.</summary>
  public const int ExecutionPriceFieldNumber = 5;
  private readonly static double ExecutionPriceDefaultValue = 0D;

  private double executionPrice_;
  /// <summary>
  /// Execution price of the offset Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double ExecutionPrice {
    get { if ((_hasBits0 & 16) != 0) { return executionPrice_; } else { return ExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      executionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "executionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPrice {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "executionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPrice() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoDealOffset);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoDealOffset other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DealId != other.DealId) return false;
    if (Volume != other.Volume) return false;
    if (Stake != other.Stake) return false;
    if (ExecutionTimestamp != other.ExecutionTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExecutionPrice, other.ExecutionPrice)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDealId) hash ^= DealId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasStake) hash ^= Stake.GetHashCode();
    if (HasExecutionTimestamp) hash ^= ExecutionTimestamp.GetHashCode();
    if (HasExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExecutionPrice);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(Volume);
    }
    if (HasStake) {
      output.WriteRawTag(24);
      output.WriteUInt64(Stake);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(41);
      output.WriteDouble(ExecutionPrice);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(Volume);
    }
    if (HasStake) {
      output.WriteRawTag(24);
      output.WriteUInt64(Stake);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(41);
      output.WriteDouble(ExecutionPrice);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDealId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasStake) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Stake);
    }
    if (HasExecutionTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTimestamp);
    }
    if (HasExecutionPrice) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoDealOffset other) {
    if (other == null) {
      return;
    }
    if (other.HasDealId) {
      DealId = other.DealId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasStake) {
      Stake = other.Stake;
    }
    if (other.HasExecutionTimestamp) {
      ExecutionTimestamp = other.ExecutionTimestamp;
    }
    if (other.HasExecutionPrice) {
      ExecutionPrice = other.ExecutionPrice;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          Volume = input.ReadInt64();
          break;
        }
        case 24: {
          Stake = input.ReadUInt64();
          break;
        }
        case 32: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 41: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          Volume = input.ReadInt64();
          break;
        }
        case 24: {
          Stake = input.ReadUInt64();
          break;
        }
        case 32: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 41: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Record with info about changes in SL/TP for specific Order
/// </summary>
public sealed partial class ProtoStopLossTakeProfitChangeRecord : pb::IMessage<ProtoStopLossTakeProfitChangeRecord>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoStopLossTakeProfitChangeRecord> _parser = new pb::MessageParser<ProtoStopLossTakeProfitChangeRecord>(() => new ProtoStopLossTakeProfitChangeRecord());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoStopLossTakeProfitChangeRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoStopLossTakeProfitChangeRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoStopLossTakeProfitChangeRecord(ProtoStopLossTakeProfitChangeRecord other) : this() {
    _hasBits0 = other._hasBits0;
    newStopLoss_ = other.newStopLoss_;
    newTakeProfit_ = other.newTakeProfit_;
    createTimestamp_ = other.createTimestamp_;
    orderId_ = other.orderId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoStopLossTakeProfitChangeRecord Clone() {
    return new ProtoStopLossTakeProfitChangeRecord(this);
  }

  /// <summary>Field number for the "newStopLoss" field.</summary>
  public const int NewStopLossFieldNumber = 1;
  private readonly static double NewStopLossDefaultValue = 0D;

  private double newStopLoss_;
  /// <summary>
  /// New value of Stop Loss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double NewStopLoss {
    get { if ((_hasBits0 & 1) != 0) { return newStopLoss_; } else { return NewStopLossDefaultValue; } }
    set {
      _hasBits0 |= 1;
      newStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "newStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNewStopLoss {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "newStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNewStopLoss() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "newTakeProfit" field.</summary>
  public const int NewTakeProfitFieldNumber = 2;
  private readonly static double NewTakeProfitDefaultValue = 0D;

  private double newTakeProfit_;
  /// <summary>
  /// New value of Take Profit
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double NewTakeProfit {
    get { if ((_hasBits0 & 2) != 0) { return newTakeProfit_; } else { return NewTakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 2;
      newTakeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "newTakeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNewTakeProfit {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "newTakeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNewTakeProfit() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "createTimestamp" field.</summary>
  public const int CreateTimestampFieldNumber = 3;
  private readonly static long CreateTimestampDefaultValue = 0L;

  private long createTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of when the record was created
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CreateTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return createTimestamp_; } else { return CreateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      createTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "createTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCreateTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "createTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCreateTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 4;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// ID of related Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OrderId {
    get { if ((_hasBits0 & 8) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoStopLossTakeProfitChangeRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoStopLossTakeProfitChangeRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NewStopLoss, other.NewStopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NewTakeProfit, other.NewTakeProfit)) return false;
    if (CreateTimestamp != other.CreateTimestamp) return false;
    if (OrderId != other.OrderId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNewStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NewStopLoss);
    if (HasNewTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NewTakeProfit);
    if (HasCreateTimestamp) hash ^= CreateTimestamp.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasNewStopLoss) {
      output.WriteRawTag(9);
      output.WriteDouble(NewStopLoss);
    }
    if (HasNewTakeProfit) {
      output.WriteRawTag(17);
      output.WriteDouble(NewTakeProfit);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasOrderId) {
      output.WriteRawTag(32);
      output.WriteInt64(OrderId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasNewStopLoss) {
      output.WriteRawTag(9);
      output.WriteDouble(NewStopLoss);
    }
    if (HasNewTakeProfit) {
      output.WriteRawTag(17);
      output.WriteDouble(NewTakeProfit);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasOrderId) {
      output.WriteRawTag(32);
      output.WriteInt64(OrderId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasNewStopLoss) {
      size += 1 + 8;
    }
    if (HasNewTakeProfit) {
      size += 1 + 8;
    }
    if (HasCreateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimestamp);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoStopLossTakeProfitChangeRecord other) {
    if (other == null) {
      return;
    }
    if (other.HasNewStopLoss) {
      NewStopLoss = other.NewStopLoss;
    }
    if (other.HasNewTakeProfit) {
      NewTakeProfit = other.NewTakeProfit;
    }
    if (other.HasCreateTimestamp) {
      CreateTimestamp = other.CreateTimestamp;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          NewStopLoss = input.ReadDouble();
          break;
        }
        case 17: {
          NewTakeProfit = input.ReadDouble();
          break;
        }
        case 24: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 32: {
          OrderId = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          NewStopLoss = input.ReadDouble();
          break;
        }
        case 17: {
          NewTakeProfit = input.ReadDouble();
          break;
        }
        case 24: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 32: {
          OrderId = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Swap calculation record
/// </summary>
public sealed partial class ProtoSwapCalculationRecord : pb::IMessage<ProtoSwapCalculationRecord>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoSwapCalculationRecord> _parser = new pb::MessageParser<ProtoSwapCalculationRecord>(() => new ProtoSwapCalculationRecord());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoSwapCalculationRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapCalculationRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapCalculationRecord(ProtoSwapCalculationRecord other) : this() {
    _hasBits0 = other._hasBits0;
    chargedSwap_ = other.chargedSwap_;
    currentSwap_ = other.currentSwap_;
    createTimestamp_ = other.createTimestamp_;
    depositCurrency_ = other.depositCurrency_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapCalculationRecord Clone() {
    return new ProtoSwapCalculationRecord(this);
  }

  /// <summary>Field number for the "chargedSwap" field.</summary>
  public const int ChargedSwapFieldNumber = 1;
  private readonly static long ChargedSwapDefaultValue = 0L;

  private long chargedSwap_;
  /// <summary>
  /// Amount of SWAP charged for the specified Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ChargedSwap {
    get { if ((_hasBits0 & 1) != 0) { return chargedSwap_; } else { return ChargedSwapDefaultValue; } }
    set {
      _hasBits0 |= 1;
      chargedSwap_ = value;
    }
  }
  /// <summary>Gets whether the "chargedSwap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChargedSwap {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "chargedSwap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChargedSwap() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "currentSwap" field.</summary>
  public const int CurrentSwapFieldNumber = 2;
  private readonly static long CurrentSwapDefaultValue = 0L;

  private long currentSwap_;
  /// <summary>
  /// Full amount of SWAP for the specified Position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CurrentSwap {
    get { if ((_hasBits0 & 2) != 0) { return currentSwap_; } else { return CurrentSwapDefaultValue; } }
    set {
      _hasBits0 |= 2;
      currentSwap_ = value;
    }
  }
  /// <summary>Gets whether the "currentSwap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCurrentSwap {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "currentSwap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCurrentSwap() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "createTimestamp" field.</summary>
  public const int CreateTimestampFieldNumber = 3;
  private readonly static long CreateTimestampDefaultValue = 0L;

  private long createTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of Swap calculation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CreateTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return createTimestamp_; } else { return CreateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      createTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "createTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCreateTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "createTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCreateTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "depositCurrency" field.</summary>
  public const int DepositCurrencyFieldNumber = 4;
  private readonly static string DepositCurrencyDefaultValue = "";

  private string depositCurrency_;
  /// <summary>
  /// Deposit currency of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DepositCurrency {
    get { return depositCurrency_ ?? DepositCurrencyDefaultValue; }
    set {
      depositCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "depositCurrency" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositCurrency {
    get { return depositCurrency_ != null; }
  }
  /// <summary>Clears the value of the "depositCurrency" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositCurrency() {
    depositCurrency_ = null;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 5;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects chargedSwap, currentSwap
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 8) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 8;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoSwapCalculationRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoSwapCalculationRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChargedSwap != other.ChargedSwap) return false;
    if (CurrentSwap != other.CurrentSwap) return false;
    if (CreateTimestamp != other.CreateTimestamp) return false;
    if (DepositCurrency != other.DepositCurrency) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasChargedSwap) hash ^= ChargedSwap.GetHashCode();
    if (HasCurrentSwap) hash ^= CurrentSwap.GetHashCode();
    if (HasCreateTimestamp) hash ^= CreateTimestamp.GetHashCode();
    if (HasDepositCurrency) hash ^= DepositCurrency.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasChargedSwap) {
      output.WriteRawTag(8);
      output.WriteInt64(ChargedSwap);
    }
    if (HasCurrentSwap) {
      output.WriteRawTag(16);
      output.WriteInt64(CurrentSwap);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasDepositCurrency) {
      output.WriteRawTag(34);
      output.WriteString(DepositCurrency);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(40);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasChargedSwap) {
      output.WriteRawTag(8);
      output.WriteInt64(ChargedSwap);
    }
    if (HasCurrentSwap) {
      output.WriteRawTag(16);
      output.WriteInt64(CurrentSwap);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasDepositCurrency) {
      output.WriteRawTag(34);
      output.WriteString(DepositCurrency);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(40);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasChargedSwap) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChargedSwap);
    }
    if (HasCurrentSwap) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentSwap);
    }
    if (HasCreateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimestamp);
    }
    if (HasDepositCurrency) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DepositCurrency);
    }
    if (HasMoneyDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoSwapCalculationRecord other) {
    if (other == null) {
      return;
    }
    if (other.HasChargedSwap) {
      ChargedSwap = other.ChargedSwap;
    }
    if (other.HasCurrentSwap) {
      CurrentSwap = other.CurrentSwap;
    }
    if (other.HasCreateTimestamp) {
      CreateTimestamp = other.CreateTimestamp;
    }
    if (other.HasDepositCurrency) {
      DepositCurrency = other.DepositCurrency;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChargedSwap = input.ReadInt64();
          break;
        }
        case 16: {
          CurrentSwap = input.ReadInt64();
          break;
        }
        case 24: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 34: {
          DepositCurrency = input.ReadString();
          break;
        }
        case 40: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ChargedSwap = input.ReadInt64();
          break;
        }
        case 16: {
          CurrentSwap = input.ReadInt64();
          break;
        }
        case 24: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 34: {
          DepositCurrency = input.ReadString();
          break;
        }
        case 40: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Trader session info
/// </summary>
public sealed partial class ProtoTraderSessionInfo : pb::IMessage<ProtoTraderSessionInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoTraderSessionInfo> _parser = new pb::MessageParser<ProtoTraderSessionInfo>(() => new ProtoTraderSessionInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoTraderSessionInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTraderSessionInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTraderSessionInfo(ProtoTraderSessionInfo other) : this() {
    _hasBits0 = other._hasBits0;
    sessionId_ = other.sessionId_;
    traderId_ = other.traderId_;
    proxyId_ = other.proxyId_;
    geoInfo_ = other.geoInfo_ != null ? other.geoInfo_.Clone() : null;
    applicationType_ = other.applicationType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTraderSessionInfo Clone() {
    return new ProtoTraderSessionInfo(this);
  }

  /// <summary>Field number for the "sessionId" field.</summary>
  public const int SessionIdFieldNumber = 1;
  private readonly static ulong SessionIdDefaultValue = 0UL;

  private ulong sessionId_;
  /// <summary>
  /// ID of Trader Session
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SessionId {
    get { if ((_hasBits0 & 1) != 0) { return sessionId_; } else { return SessionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      sessionId_ = value;
    }
  }
  /// <summary>Gets whether the "sessionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSessionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "sessionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSessionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 2;
  private readonly static ulong TraderIdDefaultValue = 0UL;

  private ulong traderId_;
  /// <summary>
  /// ID of Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TraderId {
    get { if ((_hasBits0 & 2) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "proxyId" field.</summary>
  public const int ProxyIdFieldNumber = 3;
  private readonly static string ProxyIdDefaultValue = "";

  private string proxyId_;
  /// <summary>
  /// ID of Proxy
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ProxyId {
    get { return proxyId_ ?? ProxyIdDefaultValue; }
    set {
      proxyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "proxyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProxyId {
    get { return proxyId_ != null; }
  }
  /// <summary>Clears the value of the "proxyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProxyId() {
    proxyId_ = null;
  }

  /// <summary>Field number for the "geoInfo" field.</summary>
  public const int GeoInfoFieldNumber = 4;
  private global::ProtoGeoInfo geoInfo_;
  /// <summary>
  /// Info about Trader geolocation (based on their ip address)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoGeoInfo GeoInfo {
    get { return geoInfo_; }
    set {
      geoInfo_ = value;
    }
  }

  /// <summary>Field number for the "applicationType" field.</summary>
  public const int ApplicationTypeFieldNumber = 5;
  private readonly static string ApplicationTypeDefaultValue = "";

  private string applicationType_;
  /// <summary>
  /// Application used by Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ApplicationType {
    get { return applicationType_ ?? ApplicationTypeDefaultValue; }
    set {
      applicationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "applicationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasApplicationType {
    get { return applicationType_ != null; }
  }
  /// <summary>Clears the value of the "applicationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearApplicationType() {
    applicationType_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoTraderSessionInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoTraderSessionInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionId != other.SessionId) return false;
    if (TraderId != other.TraderId) return false;
    if (ProxyId != other.ProxyId) return false;
    if (!object.Equals(GeoInfo, other.GeoInfo)) return false;
    if (ApplicationType != other.ApplicationType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSessionId) hash ^= SessionId.GetHashCode();
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasProxyId) hash ^= ProxyId.GetHashCode();
    if (geoInfo_ != null) hash ^= GeoInfo.GetHashCode();
    if (HasApplicationType) hash ^= ApplicationType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSessionId) {
      output.WriteRawTag(8);
      output.WriteUInt64(SessionId);
    }
    if (HasTraderId) {
      output.WriteRawTag(16);
      output.WriteUInt64(TraderId);
    }
    if (HasProxyId) {
      output.WriteRawTag(26);
      output.WriteString(ProxyId);
    }
    if (geoInfo_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(GeoInfo);
    }
    if (HasApplicationType) {
      output.WriteRawTag(42);
      output.WriteString(ApplicationType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSessionId) {
      output.WriteRawTag(8);
      output.WriteUInt64(SessionId);
    }
    if (HasTraderId) {
      output.WriteRawTag(16);
      output.WriteUInt64(TraderId);
    }
    if (HasProxyId) {
      output.WriteRawTag(26);
      output.WriteString(ProxyId);
    }
    if (geoInfo_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(GeoInfo);
    }
    if (HasApplicationType) {
      output.WriteRawTag(42);
      output.WriteString(ApplicationType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSessionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionId);
    }
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraderId);
    }
    if (HasProxyId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProxyId);
    }
    if (geoInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeoInfo);
    }
    if (HasApplicationType) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ApplicationType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoTraderSessionInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasSessionId) {
      SessionId = other.SessionId;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasProxyId) {
      ProxyId = other.ProxyId;
    }
    if (other.geoInfo_ != null) {
      if (geoInfo_ == null) {
        GeoInfo = new global::ProtoGeoInfo();
      }
      GeoInfo.MergeFrom(other.GeoInfo);
    }
    if (other.HasApplicationType) {
      ApplicationType = other.ApplicationType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SessionId = input.ReadUInt64();
          break;
        }
        case 16: {
          TraderId = input.ReadUInt64();
          break;
        }
        case 26: {
          ProxyId = input.ReadString();
          break;
        }
        case 34: {
          if (geoInfo_ == null) {
            GeoInfo = new global::ProtoGeoInfo();
          }
          input.ReadMessage(GeoInfo);
          break;
        }
        case 42: {
          ApplicationType = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SessionId = input.ReadUInt64();
          break;
        }
        case 16: {
          TraderId = input.ReadUInt64();
          break;
        }
        case 26: {
          ProxyId = input.ReadString();
          break;
        }
        case 34: {
          if (geoInfo_ == null) {
            GeoInfo = new global::ProtoGeoInfo();
          }
          input.ReadMessage(GeoInfo);
          break;
        }
        case 42: {
          ApplicationType = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Symbol Category
/// </summary>
public sealed partial class ProtoSymbolCategory : pb::IMessage<ProtoSymbolCategory>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoSymbolCategory> _parser = new pb::MessageParser<ProtoSymbolCategory>(() => new ProtoSymbolCategory());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoSymbolCategory> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSymbolCategory() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSymbolCategory(ProtoSymbolCategory other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    assetClassId_ = other.assetClassId_;
    name_ = other.name_;
    color_ = other.color_;
    sortingNumber_ = other.sortingNumber_;
    expanded_ = other.expanded_;
    isDefault_ = other.isDefault_;
    isDomEnabled_ = other.isDomEnabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSymbolCategory Clone() {
    return new ProtoSymbolCategory(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static long IdDefaultValue = 0L;

  private long id_;
  /// <summary>
  /// ID of the Symbol Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "assetClassId" field.</summary>
  public const int AssetClassIdFieldNumber = 2;
  private readonly static long AssetClassIdDefaultValue = 0L;

  private long assetClassId_;
  /// <summary>
  /// ID of the Asset Class which contains Symbol Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AssetClassId {
    get { if ((_hasBits0 & 2) != 0) { return assetClassId_; } else { return AssetClassIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      assetClassId_ = value;
    }
  }
  /// <summary>Gets whether the "assetClassId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAssetClassId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "assetClassId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAssetClassId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Symbol Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 4;
  private readonly static string ColorDefaultValue = "";

  private string color_;
  /// <summary>
  /// Color used in UI for the Symbol Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Color {
    get { return color_ ?? ColorDefaultValue; }
    set {
      color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "color" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasColor {
    get { return color_ != null; }
  }
  /// <summary>Clears the value of the "color" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearColor() {
    color_ = null;
  }

  /// <summary>Field number for the "sortingNumber" field.</summary>
  public const int SortingNumberFieldNumber = 5;
  private readonly static double SortingNumberDefaultValue = 0D;

  private double sortingNumber_;
  /// <summary>
  /// Sorting number used in UI for the Symbol Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SortingNumber {
    get { if ((_hasBits0 & 4) != 0) { return sortingNumber_; } else { return SortingNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      sortingNumber_ = value;
    }
  }
  /// <summary>Gets whether the "sortingNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSortingNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "sortingNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSortingNumber() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "expanded" field.</summary>
  public const int ExpandedFieldNumber = 6;
  private readonly static bool ExpandedDefaultValue = false;

  private bool expanded_;
  /// <summary>
  /// If TRUE then Category is displayed in UI expanded, otherwise - collapsed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Expanded {
    get { if ((_hasBits0 & 8) != 0) { return expanded_; } else { return ExpandedDefaultValue; } }
    set {
      _hasBits0 |= 8;
      expanded_ = value;
    }
  }
  /// <summary>Gets whether the "expanded" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExpanded {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "expanded" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExpanded() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "isDefault" field.</summary>
  public const int IsDefaultFieldNumber = 7;
  private readonly static bool IsDefaultDefaultValue = false;

  private bool isDefault_;
  /// <summary>
  /// IF TRUE then Category is shown by default in UI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDefault {
    get { if ((_hasBits0 & 16) != 0) { return isDefault_; } else { return IsDefaultDefaultValue; } }
    set {
      _hasBits0 |= 16;
      isDefault_ = value;
    }
  }
  /// <summary>Gets whether the "isDefault" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDefault {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "isDefault" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDefault() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "isDomEnabled" field.</summary>
  public const int IsDomEnabledFieldNumber = 8;
  private readonly static bool IsDomEnabledDefaultValue = false;

  private bool isDomEnabled_;
  /// <summary>
  /// IF TRUE then Depth of market is displayed in UI for Symbols in this Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDomEnabled {
    get { if ((_hasBits0 & 32) != 0) { return isDomEnabled_; } else { return IsDomEnabledDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isDomEnabled_ = value;
    }
  }
  /// <summary>Gets whether the "isDomEnabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsDomEnabled {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "isDomEnabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsDomEnabled() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoSymbolCategory);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoSymbolCategory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (AssetClassId != other.AssetClassId) return false;
    if (Name != other.Name) return false;
    if (Color != other.Color) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SortingNumber, other.SortingNumber)) return false;
    if (Expanded != other.Expanded) return false;
    if (IsDefault != other.IsDefault) return false;
    if (IsDomEnabled != other.IsDomEnabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasAssetClassId) hash ^= AssetClassId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasColor) hash ^= Color.GetHashCode();
    if (HasSortingNumber) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SortingNumber);
    if (HasExpanded) hash ^= Expanded.GetHashCode();
    if (HasIsDefault) hash ^= IsDefault.GetHashCode();
    if (HasIsDomEnabled) hash ^= IsDomEnabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasAssetClassId) {
      output.WriteRawTag(16);
      output.WriteInt64(AssetClassId);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasColor) {
      output.WriteRawTag(34);
      output.WriteString(Color);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(41);
      output.WriteDouble(SortingNumber);
    }
    if (HasExpanded) {
      output.WriteRawTag(48);
      output.WriteBool(Expanded);
    }
    if (HasIsDefault) {
      output.WriteRawTag(56);
      output.WriteBool(IsDefault);
    }
    if (HasIsDomEnabled) {
      output.WriteRawTag(64);
      output.WriteBool(IsDomEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasAssetClassId) {
      output.WriteRawTag(16);
      output.WriteInt64(AssetClassId);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (HasColor) {
      output.WriteRawTag(34);
      output.WriteString(Color);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(41);
      output.WriteDouble(SortingNumber);
    }
    if (HasExpanded) {
      output.WriteRawTag(48);
      output.WriteBool(Expanded);
    }
    if (HasIsDefault) {
      output.WriteRawTag(56);
      output.WriteBool(IsDefault);
    }
    if (HasIsDomEnabled) {
      output.WriteRawTag(64);
      output.WriteBool(IsDomEnabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (HasAssetClassId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AssetClassId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasColor) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
    }
    if (HasSortingNumber) {
      size += 1 + 8;
    }
    if (HasExpanded) {
      size += 1 + 1;
    }
    if (HasIsDefault) {
      size += 1 + 1;
    }
    if (HasIsDomEnabled) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoSymbolCategory other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasAssetClassId) {
      AssetClassId = other.AssetClassId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasColor) {
      Color = other.Color;
    }
    if (other.HasSortingNumber) {
      SortingNumber = other.SortingNumber;
    }
    if (other.HasExpanded) {
      Expanded = other.Expanded;
    }
    if (other.HasIsDefault) {
      IsDefault = other.IsDefault;
    }
    if (other.HasIsDomEnabled) {
      IsDomEnabled = other.IsDomEnabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          AssetClassId = input.ReadInt64();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Color = input.ReadString();
          break;
        }
        case 41: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 48: {
          Expanded = input.ReadBool();
          break;
        }
        case 56: {
          IsDefault = input.ReadBool();
          break;
        }
        case 64: {
          IsDomEnabled = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          AssetClassId = input.ReadInt64();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Color = input.ReadString();
          break;
        }
        case 41: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 48: {
          Expanded = input.ReadBool();
          break;
        }
        case 56: {
          IsDefault = input.ReadBool();
          break;
        }
        case 64: {
          IsDomEnabled = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Max Auto Execution settings for specific Symbol. Applied for Dealing Desk Groups
/// </summary>
public sealed partial class ProtoMaxAutoExecutionSizeSymbol : pb::IMessage<ProtoMaxAutoExecutionSizeSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoMaxAutoExecutionSizeSymbol> _parser = new pb::MessageParser<ProtoMaxAutoExecutionSizeSymbol>(() => new ProtoMaxAutoExecutionSizeSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoMaxAutoExecutionSizeSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMaxAutoExecutionSizeSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMaxAutoExecutionSizeSymbol(ProtoMaxAutoExecutionSizeSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    maxAutoExecutionSize_ = other.maxAutoExecutionSize_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMaxAutoExecutionSizeSymbol Clone() {
    return new ProtoMaxAutoExecutionSizeSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static ulong SymbolIdDefaultValue = 0UL;

  private ulong symbolId_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "maxAutoExecutionSize" field.</summary>
  public const int MaxAutoExecutionSizeFieldNumber = 2;
  private readonly static ulong MaxAutoExecutionSizeDefaultValue = 0UL;

  private ulong maxAutoExecutionSize_;
  /// <summary>
  /// If Order size is larger than this value it will be passed to the Dealer, in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong MaxAutoExecutionSize {
    get { if ((_hasBits0 & 2) != 0) { return maxAutoExecutionSize_; } else { return MaxAutoExecutionSizeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      maxAutoExecutionSize_ = value;
    }
  }
  /// <summary>Gets whether the "maxAutoExecutionSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxAutoExecutionSize {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "maxAutoExecutionSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxAutoExecutionSize() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoMaxAutoExecutionSizeSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoMaxAutoExecutionSizeSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (MaxAutoExecutionSize != other.MaxAutoExecutionSize) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasMaxAutoExecutionSize) hash ^= MaxAutoExecutionSize.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteUInt64(SymbolId);
    }
    if (HasMaxAutoExecutionSize) {
      output.WriteRawTag(16);
      output.WriteUInt64(MaxAutoExecutionSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteUInt64(SymbolId);
    }
    if (HasMaxAutoExecutionSize) {
      output.WriteRawTag(16);
      output.WriteUInt64(MaxAutoExecutionSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SymbolId);
    }
    if (HasMaxAutoExecutionSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxAutoExecutionSize);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoMaxAutoExecutionSizeSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasMaxAutoExecutionSize) {
      MaxAutoExecutionSize = other.MaxAutoExecutionSize;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadUInt64();
          break;
        }
        case 16: {
          MaxAutoExecutionSize = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadUInt64();
          break;
        }
        case 16: {
          MaxAutoExecutionSize = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Profile with Max Auto execution settings. Applied for Dealing Desk Groups
/// </summary>
public sealed partial class ProtoMaxAutoExecutionSizeProfile : pb::IMessage<ProtoMaxAutoExecutionSizeProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoMaxAutoExecutionSizeProfile> _parser = new pb::MessageParser<ProtoMaxAutoExecutionSizeProfile>(() => new ProtoMaxAutoExecutionSizeProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoMaxAutoExecutionSizeProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMaxAutoExecutionSizeProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMaxAutoExecutionSizeProfile(ProtoMaxAutoExecutionSizeProfile other) : this() {
    _hasBits0 = other._hasBits0;
    profileId_ = other.profileId_;
    name_ = other.name_;
    description_ = other.description_;
    symbol_ = other.symbol_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoMaxAutoExecutionSizeProfile Clone() {
    return new ProtoMaxAutoExecutionSizeProfile(this);
  }

  /// <summary>Field number for the "profileId" field.</summary>
  public const int ProfileIdFieldNumber = 1;
  private readonly static ulong ProfileIdDefaultValue = 0UL;

  private ulong profileId_;
  /// <summary>
  /// Profile ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong ProfileId {
    get { if ((_hasBits0 & 1) != 0) { return profileId_; } else { return ProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      profileId_ = value;
    }
  }
  /// <summary>Gets whether the "profileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "profileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Profile name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Profile description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "symbol" field.</summary>
  public const int SymbolFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ProtoMaxAutoExecutionSizeSymbol> _repeated_symbol_codec
      = pb::FieldCodec.ForMessage(34, global::ProtoMaxAutoExecutionSizeSymbol.Parser);
  private readonly pbc::RepeatedField<global::ProtoMaxAutoExecutionSizeSymbol> symbol_ = new pbc::RepeatedField<global::ProtoMaxAutoExecutionSizeSymbol>();
  /// <summary>
  /// Symbol setting entity
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoMaxAutoExecutionSizeSymbol> Symbol {
    get { return symbol_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoMaxAutoExecutionSizeProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoMaxAutoExecutionSizeProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProfileId != other.ProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if(!symbol_.Equals(other.symbol_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasProfileId) hash ^= ProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    hash ^= symbol_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasProfileId) {
      output.WriteRawTag(8);
      output.WriteUInt64(ProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    symbol_.WriteTo(output, _repeated_symbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasProfileId) {
      output.WriteRawTag(8);
      output.WriteUInt64(ProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    symbol_.WriteTo(ref output, _repeated_symbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    size += symbol_.CalculateSize(_repeated_symbol_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoMaxAutoExecutionSizeProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasProfileId) {
      ProfileId = other.ProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    symbol_.Add(other.symbol_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ProfileId = input.ReadUInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ProfileId = input.ReadUInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          symbol_.AddEntriesFrom(ref input, _repeated_symbol_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Symbol setting for manual execution
/// </summary>
public sealed partial class ProtoDealingSymbol : pb::IMessage<ProtoDealingSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoDealingSymbol> _parser = new pb::MessageParser<ProtoDealingSymbol>(() => new ProtoDealingSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoDealingSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDealingSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDealingSymbol(ProtoDealingSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    alwaysManual_ = other.alwaysManual_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDealingSymbol Clone() {
    return new ProtoDealingSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "alwaysManual" field.</summary>
  public const int AlwaysManualFieldNumber = 2;
  private readonly static bool AlwaysManualDefaultValue = false;

  private bool alwaysManual_;
  /// <summary>
  /// If TRUE then execution for this Symbol is always manual
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AlwaysManual {
    get { if ((_hasBits0 & 2) != 0) { return alwaysManual_; } else { return AlwaysManualDefaultValue; } }
    set {
      _hasBits0 |= 2;
      alwaysManual_ = value;
    }
  }
  /// <summary>Gets whether the "alwaysManual" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAlwaysManual {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "alwaysManual" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAlwaysManual() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoDealingSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoDealingSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (AlwaysManual != other.AlwaysManual) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasAlwaysManual) hash ^= AlwaysManual.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasAlwaysManual) {
      output.WriteRawTag(16);
      output.WriteBool(AlwaysManual);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasAlwaysManual) {
      output.WriteRawTag(16);
      output.WriteBool(AlwaysManual);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasAlwaysManual) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoDealingSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasAlwaysManual) {
      AlwaysManual = other.AlwaysManual;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          AlwaysManual = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          AlwaysManual = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Manual Deal
/// </summary>
public sealed partial class ProtoManualDeal : pb::IMessage<ProtoManualDeal>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoManualDeal> _parser = new pb::MessageParser<ProtoManualDeal>(() => new ProtoManualDeal());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoManualDeal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManualDeal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManualDeal(ProtoManualDeal other) : this() {
    _hasBits0 = other._hasBits0;
    traderId_ = other.traderId_;
    traderLogin_ = other.traderLogin_;
    traderName_ = other.traderName_;
    positionId_ = other.positionId_;
    symbolId_ = other.symbolId_;
    orderId_ = other.orderId_;
    orderType_ = other.orderType_;
    tradeSide_ = other.tradeSide_;
    bookType_ = other.bookType_;
    closingOrder_ = other.closingOrder_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    checkTolerance_ = other.checkTolerance_;
    limitPrice_ = other.limitPrice_;
    desiredVWAP_ = other.desiredVWAP_;
    dealId_ = other.dealId_;
    volume_ = other.volume_;
    stake_ = other.stake_;
    triggerPrice_ = other.triggerPrice_;
    groupId_ = other.groupId_;
    reason_ = other.reason_;
    timestamp_ = other.timestamp_;
    managerId_ = other.managerId_;
    managerLogin_ = other.managerLogin_;
    markup_ = other.markup_;
    stopOut_ = other.stopOut_;
    closeWithPID_ = other.closeWithPID_;
    depositAssetId_ = other.depositAssetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManualDeal Clone() {
    return new ProtoManualDeal(this);
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 1;
  private readonly static long TraderIdDefaultValue = 0L;

  private long traderId_;
  /// <summary>
  /// ID of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderId {
    get { if ((_hasBits0 & 1) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "traderLogin" field.</summary>
  public const int TraderLoginFieldNumber = 2;
  private readonly static long TraderLoginDefaultValue = 0L;

  private long traderLogin_;
  /// <summary>
  /// Login of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderLogin {
    get { if ((_hasBits0 & 2) != 0) { return traderLogin_; } else { return TraderLoginDefaultValue; } }
    set {
      _hasBits0 |= 2;
      traderLogin_ = value;
    }
  }
  /// <summary>Gets whether the "traderLogin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderLogin {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "traderLogin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderLogin() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "traderName" field.</summary>
  public const int TraderNameFieldNumber = 3;
  private readonly static string TraderNameDefaultValue = "";

  private string traderName_;
  /// <summary>
  /// Name of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TraderName {
    get { return traderName_ ?? TraderNameDefaultValue; }
    set {
      traderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "traderName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderName {
    get { return traderName_ != null; }
  }
  /// <summary>Clears the value of the "traderName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderName() {
    traderName_ = null;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 5;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// Position ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 6;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 8) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 7;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// Order ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OrderId {
    get { if ((_hasBits0 & 16) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "orderType" field.</summary>
  public const int OrderTypeFieldNumber = 8;
  private readonly static global::ProtoOrderType OrderTypeDefaultValue = global::ProtoOrderType.Market;

  private global::ProtoOrderType orderType_;
  /// <summary>
  /// Order type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOrderType OrderType {
    get { if ((_hasBits0 & 32) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      orderType_ = value;
    }
  }
  /// <summary>Gets whether the "orderType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderType {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "orderType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderType() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "tradeSide" field.</summary>
  public const int TradeSideFieldNumber = 9;
  private readonly static global::ProtoTradeSide TradeSideDefaultValue = global::ProtoTradeSide.Buy;

  private global::ProtoTradeSide tradeSide_;
  /// <summary>
  /// Trade side of the Deal Default: TRADE_SIDE_BUY
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoTradeSide TradeSide {
    get { if ((_hasBits0 & 64) != 0) { return tradeSide_; } else { return TradeSideDefaultValue; } }
    set {
      _hasBits0 |= 64;
      tradeSide_ = value;
    }
  }
  /// <summary>Gets whether the "tradeSide" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeSide {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "tradeSide" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeSide() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "bookType" field.</summary>
  public const int BookTypeFieldNumber = 10;
  private readonly static global::ProtoBookType BookTypeDefaultValue = global::ProtoBookType.BookA;

  private global::ProtoBookType bookType_;
  /// <summary>
  /// Book type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoBookType BookType {
    get { if ((_hasBits0 & 128) != 0) { return bookType_; } else { return BookTypeDefaultValue; } }
    set {
      _hasBits0 |= 128;
      bookType_ = value;
    }
  }
  /// <summary>Gets whether the "bookType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBookType {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "bookType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBookType() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "closingOrder" field.</summary>
  public const int ClosingOrderFieldNumber = 11;
  private readonly static bool ClosingOrderDefaultValue = false;

  private bool closingOrder_;
  /// <summary>
  /// Related closing Order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ClosingOrder {
    get { if ((_hasBits0 & 256) != 0) { return closingOrder_; } else { return ClosingOrderDefaultValue; } }
    set {
      _hasBits0 |= 256;
      closingOrder_ = value;
    }
  }
  /// <summary>Gets whether the "closingOrder" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosingOrder {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "closingOrder" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosingOrder() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 12;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then Stop Loss is Guaranteed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 512) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 512;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "checkTolerance" field.</summary>
  public const int CheckToleranceFieldNumber = 13;
  private readonly static bool CheckToleranceDefaultValue = false;

  private bool checkTolerance_;
  /// <summary>
  /// Specifies whether tolerance check should be applied at the moment of execution or not
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckTolerance {
    get { if ((_hasBits0 & 1024) != 0) { return checkTolerance_; } else { return CheckToleranceDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      checkTolerance_ = value;
    }
  }
  /// <summary>Gets whether the "checkTolerance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCheckTolerance {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "checkTolerance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCheckTolerance() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "limitPrice" field.</summary>
  public const int LimitPriceFieldNumber = 14;
  private readonly static long LimitPriceDefaultValue = 0L;

  private long limitPrice_;
  /// <summary>
  /// Limit price for Deals from Market Range Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LimitPrice {
    get { if ((_hasBits0 & 2048) != 0) { return limitPrice_; } else { return LimitPriceDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      limitPrice_ = value;
    }
  }
  /// <summary>Gets whether the "limitPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitPrice {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "limitPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitPrice() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "desiredVWAP" field.</summary>
  public const int DesiredVWAPFieldNumber = 15;
  private readonly static long DesiredVWAPDefaultValue = 0L;

  private long desiredVWAP_;
  /// <summary>
  /// Price desired by the Trader as an execution price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DesiredVWAP {
    get { if ((_hasBits0 & 4096) != 0) { return desiredVWAP_; } else { return DesiredVWAPDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      desiredVWAP_ = value;
    }
  }
  /// <summary>Gets whether the "desiredVWAP" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDesiredVWAP {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "desiredVWAP" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDesiredVWAP() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "dealId" field.</summary>
  public const int DealIdFieldNumber = 16;
  private readonly static long DealIdDefaultValue = 0L;

  private long dealId_;
  /// <summary>
  /// ID of the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DealId {
    get { if ((_hasBits0 & 8192) != 0) { return dealId_; } else { return DealIdDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      dealId_ = value;
    }
  }
  /// <summary>Gets whether the "dealId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealId {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "dealId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealId() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 17;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume in cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 16384) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "stake" field.</summary>
  public const int StakeFieldNumber = 18;
  private readonly static long StakeDefaultValue = 0L;

  private long stake_;
  /// <summary>
  /// Stake (for Spread Betting)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Stake {
    get { if ((_hasBits0 & 32768) != 0) { return stake_; } else { return StakeDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      stake_ = value;
    }
  }
  /// <summary>Gets whether the "stake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStake {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "stake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStake() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "triggerPrice" field.</summary>
  public const int TriggerPriceFieldNumber = 19;
  private readonly static long TriggerPriceDefaultValue = 0L;

  private long triggerPrice_;
  /// <summary>
  /// Price which triggered the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TriggerPrice {
    get { if ((_hasBits0 & 65536) != 0) { return triggerPrice_; } else { return TriggerPriceDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      triggerPrice_ = value;
    }
  }
  /// <summary>Gets whether the "triggerPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTriggerPrice {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "triggerPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTriggerPrice() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "groupId" field.</summary>
  public const int GroupIdFieldNumber = 20;
  private readonly static long GroupIdDefaultValue = 0L;

  private long groupId_;
  /// <summary>
  /// ID of Trader's Group
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GroupId {
    get { if ((_hasBits0 & 131072) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      groupId_ = value;
    }
  }
  /// <summary>Gets whether the "groupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGroupId {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "groupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGroupId() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 21;
  private readonly static global::ProtoManualDealReason ReasonDefaultValue = global::ProtoManualDealReason.ManualDealReasonAlwaysManual;

  private global::ProtoManualDealReason reason_;
  /// <summary>
  /// Reason for manual execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoManualDealReason Reason {
    get { if ((_hasBits0 & 262144) != 0) { return reason_; } else { return ReasonDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      reason_ = value;
    }
  }
  /// <summary>Gets whether the "reason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasReason {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "reason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearReason() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 22;
  private readonly static long TimestampDefaultValue = 0L;

  private long timestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Manual Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Timestamp {
    get { if ((_hasBits0 & 524288) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimestamp {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimestamp() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "managerId" field.</summary>
  public const int ManagerIdFieldNumber = 23;
  private readonly static long ManagerIdDefaultValue = 0L;

  private long managerId_;
  /// <summary>
  /// ID of the Manager, who processed the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerId {
    get { if ((_hasBits0 & 1048576) != 0) { return managerId_; } else { return ManagerIdDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      managerId_ = value;
    }
  }
  /// <summary>Gets whether the "managerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerId {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "managerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerId() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "managerLogin" field.</summary>
  public const int ManagerLoginFieldNumber = 24;
  private readonly static long ManagerLoginDefaultValue = 0L;

  private long managerLogin_;
  /// <summary>
  /// Login of the Manager, who processed the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerLogin {
    get { if ((_hasBits0 & 2097152) != 0) { return managerLogin_; } else { return ManagerLoginDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      managerLogin_ = value;
    }
  }
  /// <summary>Gets whether the "managerLogin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerLogin {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "managerLogin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerLogin() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "markup" field.</summary>
  public const int MarkupFieldNumber = 25;
  private readonly static long MarkupDefaultValue = 0L;

  private long markup_;
  /// <summary>
  /// Total (Symbol + Price Stream) absolute amount of points of markup for the moment of generating of the Deal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Markup {
    get { if ((_hasBits0 & 4194304) != 0) { return markup_; } else { return MarkupDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      markup_ = value;
    }
  }
  /// <summary>Gets whether the "markup" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarkup {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "markup" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarkup() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "stopOut" field.</summary>
  public const int StopOutFieldNumber = 26;
  private readonly static bool StopOutDefaultValue = false;

  private bool stopOut_;
  /// <summary>
  /// If TRUE then Deal was generated by Stop Out
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool StopOut {
    get { if ((_hasBits0 & 8388608) != 0) { return stopOut_; } else { return StopOutDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      stopOut_ = value;
    }
  }
  /// <summary>Gets whether the "stopOut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopOut {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "stopOut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopOut() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "closeWithPID" field.</summary>
  public const int CloseWithPIDFieldNumber = 27;
  private readonly static long CloseWithPIDDefaultValue = 0L;

  private long closeWithPID_;
  /// <summary>
  /// Some number which may be used to aggregate Deals into Positions on the hedged accounts in UI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CloseWithPID {
    get { if ((_hasBits0 & 16777216) != 0) { return closeWithPID_; } else { return CloseWithPIDDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      closeWithPID_ = value;
    }
  }
  /// <summary>Gets whether the "closeWithPID" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCloseWithPID {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "closeWithPID" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCloseWithPID() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "depositAssetId" field.</summary>
  public const int DepositAssetIdFieldNumber = 28;
  private readonly static long DepositAssetIdDefaultValue = 0L;

  private long depositAssetId_;
  /// <summary>
  /// ID of the deposit Asset of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DepositAssetId {
    get { if ((_hasBits0 & 33554432) != 0) { return depositAssetId_; } else { return DepositAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      depositAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "depositAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositAssetId {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "depositAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositAssetId() {
    _hasBits0 &= ~33554432;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoManualDeal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoManualDeal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TraderId != other.TraderId) return false;
    if (TraderLogin != other.TraderLogin) return false;
    if (TraderName != other.TraderName) return false;
    if (PositionId != other.PositionId) return false;
    if (SymbolId != other.SymbolId) return false;
    if (OrderId != other.OrderId) return false;
    if (OrderType != other.OrderType) return false;
    if (TradeSide != other.TradeSide) return false;
    if (BookType != other.BookType) return false;
    if (ClosingOrder != other.ClosingOrder) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (CheckTolerance != other.CheckTolerance) return false;
    if (LimitPrice != other.LimitPrice) return false;
    if (DesiredVWAP != other.DesiredVWAP) return false;
    if (DealId != other.DealId) return false;
    if (Volume != other.Volume) return false;
    if (Stake != other.Stake) return false;
    if (TriggerPrice != other.TriggerPrice) return false;
    if (GroupId != other.GroupId) return false;
    if (Reason != other.Reason) return false;
    if (Timestamp != other.Timestamp) return false;
    if (ManagerId != other.ManagerId) return false;
    if (ManagerLogin != other.ManagerLogin) return false;
    if (Markup != other.Markup) return false;
    if (StopOut != other.StopOut) return false;
    if (CloseWithPID != other.CloseWithPID) return false;
    if (DepositAssetId != other.DepositAssetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasTraderLogin) hash ^= TraderLogin.GetHashCode();
    if (HasTraderName) hash ^= TraderName.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasOrderType) hash ^= OrderType.GetHashCode();
    if (HasTradeSide) hash ^= TradeSide.GetHashCode();
    if (HasBookType) hash ^= BookType.GetHashCode();
    if (HasClosingOrder) hash ^= ClosingOrder.GetHashCode();
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasCheckTolerance) hash ^= CheckTolerance.GetHashCode();
    if (HasLimitPrice) hash ^= LimitPrice.GetHashCode();
    if (HasDesiredVWAP) hash ^= DesiredVWAP.GetHashCode();
    if (HasDealId) hash ^= DealId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasStake) hash ^= Stake.GetHashCode();
    if (HasTriggerPrice) hash ^= TriggerPrice.GetHashCode();
    if (HasGroupId) hash ^= GroupId.GetHashCode();
    if (HasReason) hash ^= Reason.GetHashCode();
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (HasManagerId) hash ^= ManagerId.GetHashCode();
    if (HasManagerLogin) hash ^= ManagerLogin.GetHashCode();
    if (HasMarkup) hash ^= Markup.GetHashCode();
    if (HasStopOut) hash ^= StopOut.GetHashCode();
    if (HasCloseWithPID) hash ^= CloseWithPID.GetHashCode();
    if (HasDepositAssetId) hash ^= DepositAssetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTraderId) {
      output.WriteRawTag(8);
      output.WriteInt64(TraderId);
    }
    if (HasTraderLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(TraderLogin);
    }
    if (HasTraderName) {
      output.WriteRawTag(26);
      output.WriteString(TraderName);
    }
    if (HasPositionId) {
      output.WriteRawTag(40);
      output.WriteInt64(PositionId);
    }
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (HasOrderId) {
      output.WriteRawTag(56);
      output.WriteInt64(OrderId);
    }
    if (HasOrderType) {
      output.WriteRawTag(64);
      output.WriteEnum((int) OrderType);
    }
    if (HasTradeSide) {
      output.WriteRawTag(72);
      output.WriteEnum((int) TradeSide);
    }
    if (HasBookType) {
      output.WriteRawTag(80);
      output.WriteEnum((int) BookType);
    }
    if (HasClosingOrder) {
      output.WriteRawTag(88);
      output.WriteBool(ClosingOrder);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(96);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasCheckTolerance) {
      output.WriteRawTag(104);
      output.WriteBool(CheckTolerance);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(112);
      output.WriteInt64(LimitPrice);
    }
    if (HasDesiredVWAP) {
      output.WriteRawTag(120);
      output.WriteInt64(DesiredVWAP);
    }
    if (HasDealId) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(DealId);
    }
    if (HasVolume) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(Volume);
    }
    if (HasStake) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Stake);
    }
    if (HasTriggerPrice) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(TriggerPrice);
    }
    if (HasGroupId) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(GroupId);
    }
    if (HasReason) {
      output.WriteRawTag(168, 1);
      output.WriteEnum((int) Reason);
    }
    if (HasTimestamp) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(Timestamp);
    }
    if (HasManagerId) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(ManagerId);
    }
    if (HasManagerLogin) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(ManagerLogin);
    }
    if (HasMarkup) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(Markup);
    }
    if (HasStopOut) {
      output.WriteRawTag(208, 1);
      output.WriteBool(StopOut);
    }
    if (HasCloseWithPID) {
      output.WriteRawTag(216, 1);
      output.WriteInt64(CloseWithPID);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(224, 1);
      output.WriteInt64(DepositAssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTraderId) {
      output.WriteRawTag(8);
      output.WriteInt64(TraderId);
    }
    if (HasTraderLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(TraderLogin);
    }
    if (HasTraderName) {
      output.WriteRawTag(26);
      output.WriteString(TraderName);
    }
    if (HasPositionId) {
      output.WriteRawTag(40);
      output.WriteInt64(PositionId);
    }
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (HasOrderId) {
      output.WriteRawTag(56);
      output.WriteInt64(OrderId);
    }
    if (HasOrderType) {
      output.WriteRawTag(64);
      output.WriteEnum((int) OrderType);
    }
    if (HasTradeSide) {
      output.WriteRawTag(72);
      output.WriteEnum((int) TradeSide);
    }
    if (HasBookType) {
      output.WriteRawTag(80);
      output.WriteEnum((int) BookType);
    }
    if (HasClosingOrder) {
      output.WriteRawTag(88);
      output.WriteBool(ClosingOrder);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(96);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasCheckTolerance) {
      output.WriteRawTag(104);
      output.WriteBool(CheckTolerance);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(112);
      output.WriteInt64(LimitPrice);
    }
    if (HasDesiredVWAP) {
      output.WriteRawTag(120);
      output.WriteInt64(DesiredVWAP);
    }
    if (HasDealId) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(DealId);
    }
    if (HasVolume) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(Volume);
    }
    if (HasStake) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Stake);
    }
    if (HasTriggerPrice) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(TriggerPrice);
    }
    if (HasGroupId) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(GroupId);
    }
    if (HasReason) {
      output.WriteRawTag(168, 1);
      output.WriteEnum((int) Reason);
    }
    if (HasTimestamp) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(Timestamp);
    }
    if (HasManagerId) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(ManagerId);
    }
    if (HasManagerLogin) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(ManagerLogin);
    }
    if (HasMarkup) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(Markup);
    }
    if (HasStopOut) {
      output.WriteRawTag(208, 1);
      output.WriteBool(StopOut);
    }
    if (HasCloseWithPID) {
      output.WriteRawTag(216, 1);
      output.WriteInt64(CloseWithPID);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(224, 1);
      output.WriteInt64(DepositAssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderId);
    }
    if (HasTraderLogin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderLogin);
    }
    if (HasTraderName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderName);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasOrderType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
    }
    if (HasTradeSide) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeSide);
    }
    if (HasBookType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BookType);
    }
    if (HasClosingOrder) {
      size += 1 + 1;
    }
    if (HasGuaranteedStopLoss) {
      size += 1 + 1;
    }
    if (HasCheckTolerance) {
      size += 1 + 1;
    }
    if (HasLimitPrice) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimitPrice);
    }
    if (HasDesiredVWAP) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DesiredVWAP);
    }
    if (HasDealId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DealId);
    }
    if (HasVolume) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasStake) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Stake);
    }
    if (HasTriggerPrice) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(TriggerPrice);
    }
    if (HasGroupId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
    }
    if (HasReason) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
    }
    if (HasTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (HasManagerId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ManagerId);
    }
    if (HasManagerLogin) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ManagerLogin);
    }
    if (HasMarkup) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Markup);
    }
    if (HasStopOut) {
      size += 2 + 1;
    }
    if (HasCloseWithPID) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(CloseWithPID);
    }
    if (HasDepositAssetId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(DepositAssetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoManualDeal other) {
    if (other == null) {
      return;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasTraderLogin) {
      TraderLogin = other.TraderLogin;
    }
    if (other.HasTraderName) {
      TraderName = other.TraderName;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasOrderType) {
      OrderType = other.OrderType;
    }
    if (other.HasTradeSide) {
      TradeSide = other.TradeSide;
    }
    if (other.HasBookType) {
      BookType = other.BookType;
    }
    if (other.HasClosingOrder) {
      ClosingOrder = other.ClosingOrder;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasCheckTolerance) {
      CheckTolerance = other.CheckTolerance;
    }
    if (other.HasLimitPrice) {
      LimitPrice = other.LimitPrice;
    }
    if (other.HasDesiredVWAP) {
      DesiredVWAP = other.DesiredVWAP;
    }
    if (other.HasDealId) {
      DealId = other.DealId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasStake) {
      Stake = other.Stake;
    }
    if (other.HasTriggerPrice) {
      TriggerPrice = other.TriggerPrice;
    }
    if (other.HasGroupId) {
      GroupId = other.GroupId;
    }
    if (other.HasReason) {
      Reason = other.Reason;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    if (other.HasManagerId) {
      ManagerId = other.ManagerId;
    }
    if (other.HasManagerLogin) {
      ManagerLogin = other.ManagerLogin;
    }
    if (other.HasMarkup) {
      Markup = other.Markup;
    }
    if (other.HasStopOut) {
      StopOut = other.StopOut;
    }
    if (other.HasCloseWithPID) {
      CloseWithPID = other.CloseWithPID;
    }
    if (other.HasDepositAssetId) {
      DepositAssetId = other.DepositAssetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TraderId = input.ReadInt64();
          break;
        }
        case 16: {
          TraderLogin = input.ReadInt64();
          break;
        }
        case 26: {
          TraderName = input.ReadString();
          break;
        }
        case 40: {
          PositionId = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 56: {
          OrderId = input.ReadInt64();
          break;
        }
        case 64: {
          OrderType = (global::ProtoOrderType) input.ReadEnum();
          break;
        }
        case 72: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 80: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 88: {
          ClosingOrder = input.ReadBool();
          break;
        }
        case 96: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 104: {
          CheckTolerance = input.ReadBool();
          break;
        }
        case 112: {
          LimitPrice = input.ReadInt64();
          break;
        }
        case 120: {
          DesiredVWAP = input.ReadInt64();
          break;
        }
        case 128: {
          DealId = input.ReadInt64();
          break;
        }
        case 136: {
          Volume = input.ReadInt64();
          break;
        }
        case 144: {
          Stake = input.ReadInt64();
          break;
        }
        case 152: {
          TriggerPrice = input.ReadInt64();
          break;
        }
        case 160: {
          GroupId = input.ReadInt64();
          break;
        }
        case 168: {
          Reason = (global::ProtoManualDealReason) input.ReadEnum();
          break;
        }
        case 176: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 184: {
          ManagerId = input.ReadInt64();
          break;
        }
        case 192: {
          ManagerLogin = input.ReadInt64();
          break;
        }
        case 200: {
          Markup = input.ReadInt64();
          break;
        }
        case 208: {
          StopOut = input.ReadBool();
          break;
        }
        case 216: {
          CloseWithPID = input.ReadInt64();
          break;
        }
        case 224: {
          DepositAssetId = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TraderId = input.ReadInt64();
          break;
        }
        case 16: {
          TraderLogin = input.ReadInt64();
          break;
        }
        case 26: {
          TraderName = input.ReadString();
          break;
        }
        case 40: {
          PositionId = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 56: {
          OrderId = input.ReadInt64();
          break;
        }
        case 64: {
          OrderType = (global::ProtoOrderType) input.ReadEnum();
          break;
        }
        case 72: {
          TradeSide = (global::ProtoTradeSide) input.ReadEnum();
          break;
        }
        case 80: {
          BookType = (global::ProtoBookType) input.ReadEnum();
          break;
        }
        case 88: {
          ClosingOrder = input.ReadBool();
          break;
        }
        case 96: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 104: {
          CheckTolerance = input.ReadBool();
          break;
        }
        case 112: {
          LimitPrice = input.ReadInt64();
          break;
        }
        case 120: {
          DesiredVWAP = input.ReadInt64();
          break;
        }
        case 128: {
          DealId = input.ReadInt64();
          break;
        }
        case 136: {
          Volume = input.ReadInt64();
          break;
        }
        case 144: {
          Stake = input.ReadInt64();
          break;
        }
        case 152: {
          TriggerPrice = input.ReadInt64();
          break;
        }
        case 160: {
          GroupId = input.ReadInt64();
          break;
        }
        case 168: {
          Reason = (global::ProtoManualDealReason) input.ReadEnum();
          break;
        }
        case 176: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 184: {
          ManagerId = input.ReadInt64();
          break;
        }
        case 192: {
          ManagerLogin = input.ReadInt64();
          break;
        }
        case 200: {
          Markup = input.ReadInt64();
          break;
        }
        case 208: {
          StopOut = input.ReadBool();
          break;
        }
        case 216: {
          CloseWithPID = input.ReadInt64();
          break;
        }
        case 224: {
          DepositAssetId = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Symbol entity (with limited number of fields)
/// </summary>
public sealed partial class ProtoLightSymbol : pb::IMessage<ProtoLightSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLightSymbol> _parser = new pb::MessageParser<ProtoLightSymbol>(() => new ProtoLightSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLightSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightSymbol(ProtoLightSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    symbolCategoryId_ = other.symbolCategoryId_;
    sortingNumber_ = other.sortingNumber_;
    name_ = other.name_;
    description_ = other.description_;
    tags_ = other.tags_;
    favorite_ = other.favorite_;
    enabled_ = other.enabled_;
    baseAssetId_ = other.baseAssetId_;
    quoteAssetId_ = other.quoteAssetId_;
    translation_ = other.translation_;
    unifiedSymbolId_ = other.unifiedSymbolId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightSymbol Clone() {
    return new ProtoLightSymbol(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static long IdDefaultValue = 0L;

  private long id_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "symbolCategoryId" field.</summary>
  public const int SymbolCategoryIdFieldNumber = 2;
  private readonly static long SymbolCategoryIdDefaultValue = 0L;

  private long symbolCategoryId_;
  /// <summary>
  /// Symbol Category ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolCategoryId {
    get { if ((_hasBits0 & 2) != 0) { return symbolCategoryId_; } else { return SymbolCategoryIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      symbolCategoryId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolCategoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolCategoryId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "symbolCategoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolCategoryId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "sortingNumber" field.</summary>
  public const int SortingNumberFieldNumber = 3;
  private readonly static double SortingNumberDefaultValue = 0D;

  private double sortingNumber_;
  /// <summary>
  /// Number used to sort Symbols in Symbol Lists responses
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SortingNumber {
    get { if ((_hasBits0 & 4) != 0) { return sortingNumber_; } else { return SortingNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      sortingNumber_ = value;
    }
  }
  /// <summary>Gets whether the "sortingNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSortingNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "sortingNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSortingNumber() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Symbol name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 5;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Symbol description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "tags" field.</summary>
  public const int TagsFieldNumber = 6;
  private readonly static string TagsDefaultValue = "";

  private string tags_;
  /// <summary>
  /// Custom tags. Used for searching Symbols
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Tags {
    get { return tags_ ?? TagsDefaultValue; }
    set {
      tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "tags" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTags {
    get { return tags_ != null; }
  }
  /// <summary>Clears the value of the "tags" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTags() {
    tags_ = null;
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 7;
  private readonly static bool FavoriteDefaultValue = false;

  private bool favorite_;
  /// <summary>
  /// Specifies whether Symbol is favorite
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Favorite {
    get { if ((_hasBits0 & 8) != 0) { return favorite_; } else { return FavoriteDefaultValue; } }
    set {
      _hasBits0 |= 8;
      favorite_ = value;
    }
  }
  /// <summary>Gets whether the "favorite" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFavorite {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "favorite" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFavorite() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 8;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// Specifies if Symbol is available for the tTraders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 16) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 16;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "baseAssetId" field.</summary>
  public const int BaseAssetIdFieldNumber = 9;
  private readonly static long BaseAssetIdDefaultValue = 0L;

  private long baseAssetId_;
  /// <summary>
  /// ID of base Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BaseAssetId {
    get { if ((_hasBits0 & 32) != 0) { return baseAssetId_; } else { return BaseAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      baseAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "baseAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseAssetId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "baseAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseAssetId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "quoteAssetId" field.</summary>
  public const int QuoteAssetIdFieldNumber = 10;
  private readonly static long QuoteAssetIdDefaultValue = 0L;

  private long quoteAssetId_;
  /// <summary>
  /// ID of quote Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long QuoteAssetId {
    get { if ((_hasBits0 & 64) != 0) { return quoteAssetId_; } else { return QuoteAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      quoteAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "quoteAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuoteAssetId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "quoteAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuoteAssetId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "translation" field.</summary>
  public const int TranslationFieldNumber = 11;
  private readonly static string TranslationDefaultValue = "";

  private string translation_;
  /// <summary>
  /// Localisation setting for Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Translation {
    get { return translation_ ?? TranslationDefaultValue; }
    set {
      translation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "translation" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTranslation {
    get { return translation_ != null; }
  }
  /// <summary>Clears the value of the "translation" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTranslation() {
    translation_ = null;
  }

  /// <summary>Field number for the "unifiedSymbolId" field.</summary>
  public const int UnifiedSymbolIdFieldNumber = 12;
  private readonly static int UnifiedSymbolIdDefaultValue = 0;

  private int unifiedSymbolId_;
  /// <summary>
  /// Additional Symbol ID used for matching symbols of different Brokers
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int UnifiedSymbolId {
    get { if ((_hasBits0 & 128) != 0) { return unifiedSymbolId_; } else { return UnifiedSymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      unifiedSymbolId_ = value;
    }
  }
  /// <summary>Gets whether the "unifiedSymbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUnifiedSymbolId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "unifiedSymbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUnifiedSymbolId() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLightSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLightSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SymbolCategoryId != other.SymbolCategoryId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SortingNumber, other.SortingNumber)) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (Tags != other.Tags) return false;
    if (Favorite != other.Favorite) return false;
    if (Enabled != other.Enabled) return false;
    if (BaseAssetId != other.BaseAssetId) return false;
    if (QuoteAssetId != other.QuoteAssetId) return false;
    if (Translation != other.Translation) return false;
    if (UnifiedSymbolId != other.UnifiedSymbolId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasSymbolCategoryId) hash ^= SymbolCategoryId.GetHashCode();
    if (HasSortingNumber) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SortingNumber);
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasTags) hash ^= Tags.GetHashCode();
    if (HasFavorite) hash ^= Favorite.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasBaseAssetId) hash ^= BaseAssetId.GetHashCode();
    if (HasQuoteAssetId) hash ^= QuoteAssetId.GetHashCode();
    if (HasTranslation) hash ^= Translation.GetHashCode();
    if (HasUnifiedSymbolId) hash ^= UnifiedSymbolId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasSymbolCategoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(25);
      output.WriteDouble(SortingNumber);
    }
    if (HasName) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(42);
      output.WriteString(Description);
    }
    if (HasTags) {
      output.WriteRawTag(50);
      output.WriteString(Tags);
    }
    if (HasFavorite) {
      output.WriteRawTag(56);
      output.WriteBool(Favorite);
    }
    if (HasEnabled) {
      output.WriteRawTag(64);
      output.WriteBool(Enabled);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(72);
      output.WriteInt64(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      output.WriteRawTag(80);
      output.WriteInt64(QuoteAssetId);
    }
    if (HasTranslation) {
      output.WriteRawTag(90);
      output.WriteString(Translation);
    }
    if (HasUnifiedSymbolId) {
      output.WriteRawTag(96);
      output.WriteInt32(UnifiedSymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasSymbolCategoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasSortingNumber) {
      output.WriteRawTag(25);
      output.WriteDouble(SortingNumber);
    }
    if (HasName) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(42);
      output.WriteString(Description);
    }
    if (HasTags) {
      output.WriteRawTag(50);
      output.WriteString(Tags);
    }
    if (HasFavorite) {
      output.WriteRawTag(56);
      output.WriteBool(Favorite);
    }
    if (HasEnabled) {
      output.WriteRawTag(64);
      output.WriteBool(Enabled);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(72);
      output.WriteInt64(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      output.WriteRawTag(80);
      output.WriteInt64(QuoteAssetId);
    }
    if (HasTranslation) {
      output.WriteRawTag(90);
      output.WriteString(Translation);
    }
    if (HasUnifiedSymbolId) {
      output.WriteRawTag(96);
      output.WriteInt32(UnifiedSymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (HasSymbolCategoryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolCategoryId);
    }
    if (HasSortingNumber) {
      size += 1 + 8;
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasTags) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
    }
    if (HasFavorite) {
      size += 1 + 1;
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasBaseAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuoteAssetId);
    }
    if (HasTranslation) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Translation);
    }
    if (HasUnifiedSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnifiedSymbolId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLightSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasSymbolCategoryId) {
      SymbolCategoryId = other.SymbolCategoryId;
    }
    if (other.HasSortingNumber) {
      SortingNumber = other.SortingNumber;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasTags) {
      Tags = other.Tags;
    }
    if (other.HasFavorite) {
      Favorite = other.Favorite;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasBaseAssetId) {
      BaseAssetId = other.BaseAssetId;
    }
    if (other.HasQuoteAssetId) {
      QuoteAssetId = other.QuoteAssetId;
    }
    if (other.HasTranslation) {
      Translation = other.Translation;
    }
    if (other.HasUnifiedSymbolId) {
      UnifiedSymbolId = other.UnifiedSymbolId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 25: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          Description = input.ReadString();
          break;
        }
        case 50: {
          Tags = input.ReadString();
          break;
        }
        case 56: {
          Favorite = input.ReadBool();
          break;
        }
        case 64: {
          Enabled = input.ReadBool();
          break;
        }
        case 72: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 80: {
          QuoteAssetId = input.ReadInt64();
          break;
        }
        case 90: {
          Translation = input.ReadString();
          break;
        }
        case 96: {
          UnifiedSymbolId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 25: {
          SortingNumber = input.ReadDouble();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          Description = input.ReadString();
          break;
        }
        case 50: {
          Tags = input.ReadString();
          break;
        }
        case 56: {
          Favorite = input.ReadBool();
          break;
        }
        case 64: {
          Enabled = input.ReadBool();
          break;
        }
        case 72: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 80: {
          QuoteAssetId = input.ReadInt64();
          break;
        }
        case 90: {
          Translation = input.ReadString();
          break;
        }
        case 96: {
          UnifiedSymbolId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Symbol description
/// </summary>
public sealed partial class ProtoSymbolDescription : pb::IMessage<ProtoSymbolDescription>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoSymbolDescription> _parser = new pb::MessageParser<ProtoSymbolDescription>(() => new ProtoSymbolDescription());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoSymbolDescription> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSymbolDescription() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSymbolDescription(ProtoSymbolDescription other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    longDescription_ = other.longDescription_;
    symbolLogo_ = other.symbolLogo_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSymbolDescription Clone() {
    return new ProtoSymbolDescription(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "longDescription" field.</summary>
  public const int LongDescriptionFieldNumber = 2;
  private readonly static string LongDescriptionDefaultValue = "";

  private string longDescription_;
  /// <summary>
  /// Long description of the symbol. Max length = 5120 symbols
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LongDescription {
    get { return longDescription_ ?? LongDescriptionDefaultValue; }
    set {
      longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "longDescription" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLongDescription {
    get { return longDescription_ != null; }
  }
  /// <summary>Clears the value of the "longDescription" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLongDescription() {
    longDescription_ = null;
  }

  /// <summary>Field number for the "symbolLogo" field.</summary>
  public const int SymbolLogoFieldNumber = 3;
  private readonly static pb::ByteString SymbolLogoDefaultValue = pb::ByteString.Empty;

  private pb::ByteString symbolLogo_;
  /// <summary>
  /// PNG file that contains Symbol logo. Max bytes = 65536
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString SymbolLogo {
    get { return symbolLogo_ ?? SymbolLogoDefaultValue; }
    set {
      symbolLogo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "symbolLogo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolLogo {
    get { return symbolLogo_ != null; }
  }
  /// <summary>Clears the value of the "symbolLogo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolLogo() {
    symbolLogo_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoSymbolDescription);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoSymbolDescription other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (LongDescription != other.LongDescription) return false;
    if (SymbolLogo != other.SymbolLogo) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasLongDescription) hash ^= LongDescription.GetHashCode();
    if (HasSymbolLogo) hash ^= SymbolLogo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasLongDescription) {
      output.WriteRawTag(18);
      output.WriteString(LongDescription);
    }
    if (HasSymbolLogo) {
      output.WriteRawTag(26);
      output.WriteBytes(SymbolLogo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasLongDescription) {
      output.WriteRawTag(18);
      output.WriteString(LongDescription);
    }
    if (HasSymbolLogo) {
      output.WriteRawTag(26);
      output.WriteBytes(SymbolLogo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasLongDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
    }
    if (HasSymbolLogo) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SymbolLogo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoSymbolDescription other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasLongDescription) {
      LongDescription = other.LongDescription;
    }
    if (other.HasSymbolLogo) {
      SymbolLogo = other.SymbolLogo;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          LongDescription = input.ReadString();
          break;
        }
        case 26: {
          SymbolLogo = input.ReadBytes();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          LongDescription = input.ReadString();
          break;
        }
        case 26: {
          SymbolLogo = input.ReadBytes();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Dynamic Leverage entity (see https://help.ctrader.com/ctrader/trading/dynamic-leverage)
/// </summary>
public sealed partial class ProtoDynamicLeverage : pb::IMessage<ProtoDynamicLeverage>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoDynamicLeverage> _parser = new pb::MessageParser<ProtoDynamicLeverage>(() => new ProtoDynamicLeverage());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoDynamicLeverage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicLeverage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicLeverage(ProtoDynamicLeverage other) : this() {
    _hasBits0 = other._hasBits0;
    leverageId_ = other.leverageId_;
    name_ = other.name_;
    description_ = other.description_;
    tiers_ = other.tiers_.Clone();
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicLeverage Clone() {
    return new ProtoDynamicLeverage(this);
  }

  /// <summary>Field number for the "leverageId" field.</summary>
  public const int LeverageIdFieldNumber = 1;
  private readonly static long LeverageIdDefaultValue = 0L;

  private long leverageId_;
  /// <summary>
  /// ID of Dynamic Leverage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LeverageId {
    get { if ((_hasBits0 & 1) != 0) { return leverageId_; } else { return LeverageIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      leverageId_ = value;
    }
  }
  /// <summary>Gets whether the "leverageId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeverageId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "leverageId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeverageId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of Dynamic Leverage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Dynamic Leverage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "tiers" field.</summary>
  public const int TiersFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ProtoDynamicLeverageTier> _repeated_tiers_codec
      = pb::FieldCodec.ForMessage(34, global::ProtoDynamicLeverageTier.Parser);
  private readonly pbc::RepeatedField<global::ProtoDynamicLeverageTier> tiers_ = new pbc::RepeatedField<global::ProtoDynamicLeverageTier>();
  /// <summary>
  /// Tier of Dynamic Leverage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoDynamicLeverageTier> Tiers {
    get { return tiers_; }
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 5;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when record was updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 2) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoDynamicLeverage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoDynamicLeverage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LeverageId != other.LeverageId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if(!tiers_.Equals(other.tiers_)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasLeverageId) hash ^= LeverageId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    hash ^= tiers_.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasLeverageId) {
      output.WriteRawTag(8);
      output.WriteInt64(LeverageId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    tiers_.WriteTo(output, _repeated_tiers_codec);
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasLeverageId) {
      output.WriteRawTag(8);
      output.WriteInt64(LeverageId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    tiers_.WriteTo(ref output, _repeated_tiers_codec);
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasLeverageId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeverageId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    size += tiers_.CalculateSize(_repeated_tiers_codec);
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoDynamicLeverage other) {
    if (other == null) {
      return;
    }
    if (other.HasLeverageId) {
      LeverageId = other.LeverageId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    tiers_.Add(other.tiers_);
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LeverageId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          tiers_.AddEntriesFrom(input, _repeated_tiers_codec);
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          LeverageId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          tiers_.AddEntriesFrom(ref input, _repeated_tiers_codec);
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Dynamic Leverage tier entity
/// </summary>
public sealed partial class ProtoDynamicLeverageTier : pb::IMessage<ProtoDynamicLeverageTier>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoDynamicLeverageTier> _parser = new pb::MessageParser<ProtoDynamicLeverageTier>(() => new ProtoDynamicLeverageTier());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoDynamicLeverageTier> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicLeverageTier() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicLeverageTier(ProtoDynamicLeverageTier other) : this() {
    _hasBits0 = other._hasBits0;
    volume_ = other.volume_;
    leverage_ = other.leverage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoDynamicLeverageTier Clone() {
    return new ProtoDynamicLeverageTier(this);
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 1;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume of Tier as max USD volume of the Open Position (per side) to apply specified Leverage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "leverage" field.</summary>
  public const int LeverageFieldNumber = 2;
  private readonly static int LeverageDefaultValue = 0;

  private int leverage_;
  /// <summary>
  /// Leverage of Tier
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Leverage {
    get { if ((_hasBits0 & 2) != 0) { return leverage_; } else { return LeverageDefaultValue; } }
    set {
      _hasBits0 |= 2;
      leverage_ = value;
    }
  }
  /// <summary>Gets whether the "leverage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeverage {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "leverage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeverage() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoDynamicLeverageTier);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoDynamicLeverageTier other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Volume != other.Volume) return false;
    if (Leverage != other.Leverage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasLeverage) hash ^= Leverage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasVolume) {
      output.WriteRawTag(8);
      output.WriteInt64(Volume);
    }
    if (HasLeverage) {
      output.WriteRawTag(16);
      output.WriteInt32(Leverage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasVolume) {
      output.WriteRawTag(8);
      output.WriteInt64(Volume);
    }
    if (HasLeverage) {
      output.WriteRawTag(16);
      output.WriteInt32(Leverage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasLeverage) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leverage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoDynamicLeverageTier other) {
    if (other == null) {
      return;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasLeverage) {
      Leverage = other.Leverage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Volume = input.ReadInt64();
          break;
        }
        case 16: {
          Leverage = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Volume = input.ReadInt64();
          break;
        }
        case 16: {
          Leverage = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// GSL Schedule entity
/// </summary>
public sealed partial class ProtoGSLSchedule : pb::IMessage<ProtoGSLSchedule>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoGSLSchedule> _parser = new pb::MessageParser<ProtoGSLSchedule>(() => new ProtoGSLSchedule());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoGSLSchedule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGSLSchedule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGSLSchedule(ProtoGSLSchedule other) : this() {
    _hasBits0 = other._hasBits0;
    scheduleId_ = other.scheduleId_;
    name_ = other.name_;
    tiers_ = other.tiers_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGSLSchedule Clone() {
    return new ProtoGSLSchedule(this);
  }

  /// <summary>Field number for the "scheduleId" field.</summary>
  public const int ScheduleIdFieldNumber = 1;
  private readonly static long ScheduleIdDefaultValue = 0L;

  private long scheduleId_;
  /// <summary>
  /// ID of GSL Schedule
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ScheduleId {
    get { if ((_hasBits0 & 1) != 0) { return scheduleId_; } else { return ScheduleIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      scheduleId_ = value;
    }
  }
  /// <summary>Gets whether the "scheduleId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScheduleId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "scheduleId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScheduleId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of this GSL Schedule
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "tiers" field.</summary>
  public const int TiersFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoGSLScheduleTier> _repeated_tiers_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoGSLScheduleTier.Parser);
  private readonly pbc::RepeatedField<global::ProtoGSLScheduleTier> tiers_ = new pbc::RepeatedField<global::ProtoGSLScheduleTier>();
  /// <summary>
  /// List of (time -> multiplier) Schedule Tiers
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoGSLScheduleTier> Tiers {
    get { return tiers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoGSLSchedule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoGSLSchedule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ScheduleId != other.ScheduleId) return false;
    if (Name != other.Name) return false;
    if(!tiers_.Equals(other.tiers_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasScheduleId) hash ^= ScheduleId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    hash ^= tiers_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasScheduleId) {
      output.WriteRawTag(8);
      output.WriteInt64(ScheduleId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    tiers_.WriteTo(output, _repeated_tiers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasScheduleId) {
      output.WriteRawTag(8);
      output.WriteInt64(ScheduleId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    tiers_.WriteTo(ref output, _repeated_tiers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasScheduleId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScheduleId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += tiers_.CalculateSize(_repeated_tiers_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoGSLSchedule other) {
    if (other == null) {
      return;
    }
    if (other.HasScheduleId) {
      ScheduleId = other.ScheduleId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    tiers_.Add(other.tiers_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ScheduleId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          tiers_.AddEntriesFrom(input, _repeated_tiers_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ScheduleId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          tiers_.AddEntriesFrom(ref input, _repeated_tiers_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// GSL Tier entity
/// </summary>
public sealed partial class ProtoGSLScheduleTier : pb::IMessage<ProtoGSLScheduleTier>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoGSLScheduleTier> _parser = new pb::MessageParser<ProtoGSLScheduleTier>(() => new ProtoGSLScheduleTier());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoGSLScheduleTier> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGSLScheduleTier() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGSLScheduleTier(ProtoGSLScheduleTier other) : this() {
    _hasBits0 = other._hasBits0;
    startTime_ = other.startTime_;
    multiplier_ = other.multiplier_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoGSLScheduleTier Clone() {
    return new ProtoGSLScheduleTier(this);
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 1;
  private readonly static int StartTimeDefaultValue = 0;

  private int startTime_;
  /// <summary>
  /// This Tier is active from startTime (Count of seconds from 00:00:00)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int StartTime {
    get { if ((_hasBits0 & 1) != 0) { return startTime_; } else { return StartTimeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      startTime_ = value;
    }
  }
  /// <summary>Gets whether the "startTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartTime {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "startTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartTime() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "multiplier" field.</summary>
  public const int MultiplierFieldNumber = 2;
  private readonly static int MultiplierDefaultValue = 0;

  private int multiplier_;
  /// <summary>
  /// Tier's multiplier (in percents): 34 means 34%
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Multiplier {
    get { if ((_hasBits0 & 2) != 0) { return multiplier_; } else { return MultiplierDefaultValue; } }
    set {
      _hasBits0 |= 2;
      multiplier_ = value;
    }
  }
  /// <summary>Gets whether the "multiplier" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMultiplier {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "multiplier" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMultiplier() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoGSLScheduleTier);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoGSLScheduleTier other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartTime != other.StartTime) return false;
    if (Multiplier != other.Multiplier) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasStartTime) hash ^= StartTime.GetHashCode();
    if (HasMultiplier) hash ^= Multiplier.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasStartTime) {
      output.WriteRawTag(8);
      output.WriteInt32(StartTime);
    }
    if (HasMultiplier) {
      output.WriteRawTag(16);
      output.WriteInt32(Multiplier);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasStartTime) {
      output.WriteRawTag(8);
      output.WriteInt32(StartTime);
    }
    if (HasMultiplier) {
      output.WriteRawTag(16);
      output.WriteInt32(Multiplier);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasStartTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTime);
    }
    if (HasMultiplier) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiplier);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoGSLScheduleTier other) {
    if (other == null) {
      return;
    }
    if (other.HasStartTime) {
      StartTime = other.StartTime;
    }
    if (other.HasMultiplier) {
      Multiplier = other.Multiplier;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          StartTime = input.ReadInt32();
          break;
        }
        case 16: {
          Multiplier = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          StartTime = input.ReadInt32();
          break;
        }
        case 16: {
          Multiplier = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Records with info about ip address related with specific Order action
/// </summary>
public sealed partial class ProtoOrderActionIP : pb::IMessage<ProtoOrderActionIP>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOrderActionIP> _parser = new pb::MessageParser<ProtoOrderActionIP>(() => new ProtoOrderActionIP());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOrderActionIP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrderActionIP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrderActionIP(ProtoOrderActionIP other) : this() {
    _hasBits0 = other._hasBits0;
    actionId_ = other.actionId_;
    actionIPAddress_ = other.actionIPAddress_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOrderActionIP Clone() {
    return new ProtoOrderActionIP(this);
  }

  /// <summary>Field number for the "actionId" field.</summary>
  public const int ActionIdFieldNumber = 1;
  private readonly static long ActionIdDefaultValue = 0L;

  private long actionId_;
  /// <summary>
  /// Action ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ActionId {
    get { if ((_hasBits0 & 1) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      actionId_ = value;
    }
  }
  /// <summary>Gets whether the "actionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasActionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "actionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearActionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "actionIPAddress" field.</summary>
  public const int ActionIPAddressFieldNumber = 2;
  private readonly static string ActionIPAddressDefaultValue = "";

  private string actionIPAddress_;
  /// <summary>
  /// IP address
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ActionIPAddress {
    get { return actionIPAddress_ ?? ActionIPAddressDefaultValue; }
    set {
      actionIPAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "actionIPAddress" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasActionIPAddress {
    get { return actionIPAddress_ != null; }
  }
  /// <summary>Clears the value of the "actionIPAddress" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearActionIPAddress() {
    actionIPAddress_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOrderActionIP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOrderActionIP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ActionId != other.ActionId) return false;
    if (ActionIPAddress != other.ActionIPAddress) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasActionId) hash ^= ActionId.GetHashCode();
    if (HasActionIPAddress) hash ^= ActionIPAddress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasActionId) {
      output.WriteRawTag(8);
      output.WriteInt64(ActionId);
    }
    if (HasActionIPAddress) {
      output.WriteRawTag(18);
      output.WriteString(ActionIPAddress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasActionId) {
      output.WriteRawTag(8);
      output.WriteInt64(ActionId);
    }
    if (HasActionIPAddress) {
      output.WriteRawTag(18);
      output.WriteString(ActionIPAddress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasActionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActionId);
    }
    if (HasActionIPAddress) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionIPAddress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOrderActionIP other) {
    if (other == null) {
      return;
    }
    if (other.HasActionId) {
      ActionId = other.ActionId;
    }
    if (other.HasActionIPAddress) {
      ActionIPAddress = other.ActionIPAddress;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ActionId = input.ReadInt64();
          break;
        }
        case 18: {
          ActionIPAddress = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ActionId = input.ReadInt64();
          break;
        }
        case 18: {
          ActionIPAddress = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Withdrawal Request entity
/// </summary>
public sealed partial class ProtoWithdrawRequest : pb::IMessage<ProtoWithdrawRequest>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoWithdrawRequest> _parser = new pb::MessageParser<ProtoWithdrawRequest>(() => new ProtoWithdrawRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoWithdrawRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoWithdrawRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoWithdrawRequest(ProtoWithdrawRequest other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    traderId_ = other.traderId_;
    createTimestamp_ = other.createTimestamp_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    amount_ = other.amount_;
    comment_ = other.comment_;
    requestStatus_ = other.requestStatus_;
    assignedTo_ = other.assignedTo_;
    brokerComment_ = other.brokerComment_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoWithdrawRequest Clone() {
    return new ProtoWithdrawRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private readonly static ulong IdDefaultValue = 0UL;

  private ulong id_;
  /// <summary>
  /// ID of Withdrawal Request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 3;
  private readonly static ulong TraderIdDefaultValue = 0UL;

  private ulong traderId_;
  /// <summary>
  /// Trader ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TraderId {
    get { if ((_hasBits0 & 2) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "createTimestamp" field.</summary>
  public const int CreateTimestampFieldNumber = 4;
  private readonly static ulong CreateTimestampDefaultValue = 0UL;

  private ulong createTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of the Withdrawal Request creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong CreateTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return createTimestamp_; } else { return CreateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      createTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "createTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCreateTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "createTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCreateTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 5;
  private readonly static ulong UtcLastUpdateTimestampDefaultValue = 0UL;

  private ulong utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the the Withdrawal Request was updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 6;
  private readonly static ulong AmountDefaultValue = 0UL;

  private ulong amount_;
  /// <summary>
  /// Amount of operation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Amount {
    get { if ((_hasBits0 & 16) != 0) { return amount_; } else { return AmountDefaultValue; } }
    set {
      _hasBits0 |= 16;
      amount_ = value;
    }
  }
  /// <summary>Gets whether the "amount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAmount {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "amount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAmount() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 7;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// Comment specified by the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "requestStatus" field.</summary>
  public const int RequestStatusFieldNumber = 8;
  private readonly static global::ProtoRequestStatus RequestStatusDefaultValue = global::ProtoRequestStatus.New;

  private global::ProtoRequestStatus requestStatus_;
  /// <summary>
  /// Status of the Withdrawal Request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoRequestStatus RequestStatus {
    get { if ((_hasBits0 & 32) != 0) { return requestStatus_; } else { return RequestStatusDefaultValue; } }
    set {
      _hasBits0 |= 32;
      requestStatus_ = value;
    }
  }
  /// <summary>Gets whether the "requestStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRequestStatus {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "requestStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRequestStatus() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "assignedTo" field.</summary>
  public const int AssignedToFieldNumber = 9;
  private readonly static ulong AssignedToDefaultValue = 0UL;

  private ulong assignedTo_;
  /// <summary>
  /// ID of the Manager who processed this request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong AssignedTo {
    get { if ((_hasBits0 & 64) != 0) { return assignedTo_; } else { return AssignedToDefaultValue; } }
    set {
      _hasBits0 |= 64;
      assignedTo_ = value;
    }
  }
  /// <summary>Gets whether the "assignedTo" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAssignedTo {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "assignedTo" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAssignedTo() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "brokerComment" field.</summary>
  public const int BrokerCommentFieldNumber = 10;
  private readonly static string BrokerCommentDefaultValue = "";

  private string brokerComment_;
  /// <summary>
  /// Comment specified by the Manager
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BrokerComment {
    get { return brokerComment_ ?? BrokerCommentDefaultValue; }
    set {
      brokerComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "brokerComment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBrokerComment {
    get { return brokerComment_ != null; }
  }
  /// <summary>Clears the value of the "brokerComment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBrokerComment() {
    brokerComment_ = null;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 11;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects amount
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 128) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 128;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoWithdrawRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoWithdrawRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (TraderId != other.TraderId) return false;
    if (CreateTimestamp != other.CreateTimestamp) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (Amount != other.Amount) return false;
    if (Comment != other.Comment) return false;
    if (RequestStatus != other.RequestStatus) return false;
    if (AssignedTo != other.AssignedTo) return false;
    if (BrokerComment != other.BrokerComment) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasCreateTimestamp) hash ^= CreateTimestamp.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasAmount) hash ^= Amount.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasRequestStatus) hash ^= RequestStatus.GetHashCode();
    if (HasAssignedTo) hash ^= AssignedTo.GetHashCode();
    if (HasBrokerComment) hash ^= BrokerComment.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(16);
      output.WriteUInt64(Id);
    }
    if (HasTraderId) {
      output.WriteRawTag(24);
      output.WriteUInt64(TraderId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(32);
      output.WriteUInt64(CreateTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteUInt64(UtcLastUpdateTimestamp);
    }
    if (HasAmount) {
      output.WriteRawTag(48);
      output.WriteUInt64(Amount);
    }
    if (HasComment) {
      output.WriteRawTag(58);
      output.WriteString(Comment);
    }
    if (HasRequestStatus) {
      output.WriteRawTag(64);
      output.WriteEnum((int) RequestStatus);
    }
    if (HasAssignedTo) {
      output.WriteRawTag(72);
      output.WriteUInt64(AssignedTo);
    }
    if (HasBrokerComment) {
      output.WriteRawTag(82);
      output.WriteString(BrokerComment);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(88);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(16);
      output.WriteUInt64(Id);
    }
    if (HasTraderId) {
      output.WriteRawTag(24);
      output.WriteUInt64(TraderId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(32);
      output.WriteUInt64(CreateTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteUInt64(UtcLastUpdateTimestamp);
    }
    if (HasAmount) {
      output.WriteRawTag(48);
      output.WriteUInt64(Amount);
    }
    if (HasComment) {
      output.WriteRawTag(58);
      output.WriteString(Comment);
    }
    if (HasRequestStatus) {
      output.WriteRawTag(64);
      output.WriteEnum((int) RequestStatus);
    }
    if (HasAssignedTo) {
      output.WriteRawTag(72);
      output.WriteUInt64(AssignedTo);
    }
    if (HasBrokerComment) {
      output.WriteRawTag(82);
      output.WriteString(BrokerComment);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(88);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
    }
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraderId);
    }
    if (HasCreateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasAmount) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasRequestStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestStatus);
    }
    if (HasAssignedTo) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AssignedTo);
    }
    if (HasBrokerComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerComment);
    }
    if (HasMoneyDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoWithdrawRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasCreateTimestamp) {
      CreateTimestamp = other.CreateTimestamp;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasAmount) {
      Amount = other.Amount;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasRequestStatus) {
      RequestStatus = other.RequestStatus;
    }
    if (other.HasAssignedTo) {
      AssignedTo = other.AssignedTo;
    }
    if (other.HasBrokerComment) {
      BrokerComment = other.BrokerComment;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 16: {
          Id = input.ReadUInt64();
          break;
        }
        case 24: {
          TraderId = input.ReadUInt64();
          break;
        }
        case 32: {
          CreateTimestamp = input.ReadUInt64();
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadUInt64();
          break;
        }
        case 48: {
          Amount = input.ReadUInt64();
          break;
        }
        case 58: {
          Comment = input.ReadString();
          break;
        }
        case 64: {
          RequestStatus = (global::ProtoRequestStatus) input.ReadEnum();
          break;
        }
        case 72: {
          AssignedTo = input.ReadUInt64();
          break;
        }
        case 82: {
          BrokerComment = input.ReadString();
          break;
        }
        case 88: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 16: {
          Id = input.ReadUInt64();
          break;
        }
        case 24: {
          TraderId = input.ReadUInt64();
          break;
        }
        case 32: {
          CreateTimestamp = input.ReadUInt64();
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadUInt64();
          break;
        }
        case 48: {
          Amount = input.ReadUInt64();
          break;
        }
        case 58: {
          Comment = input.ReadString();
          break;
        }
        case 64: {
          RequestStatus = (global::ProtoRequestStatus) input.ReadEnum();
          break;
        }
        case 72: {
          AssignedTo = input.ReadUInt64();
          break;
        }
        case 82: {
          BrokerComment = input.ReadString();
          break;
        }
        case 88: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Trading Schedule Profile entity
/// </summary>
public sealed partial class ProtoScheduleProfile : pb::IMessage<ProtoScheduleProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoScheduleProfile> _parser = new pb::MessageParser<ProtoScheduleProfile>(() => new ProtoScheduleProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoScheduleProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoScheduleProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoScheduleProfile(ProtoScheduleProfile other) : this() {
    _hasBits0 = other._hasBits0;
    scheduleProfileId_ = other.scheduleProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    scheduleTimeZone_ = other.scheduleTimeZone_;
    interval_ = other.interval_.Clone();
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoScheduleProfile Clone() {
    return new ProtoScheduleProfile(this);
  }

  /// <summary>Field number for the "scheduleProfileId" field.</summary>
  public const int ScheduleProfileIdFieldNumber = 1;
  private readonly static long ScheduleProfileIdDefaultValue = 0L;

  private long scheduleProfileId_;
  /// <summary>
  /// ID of the Schedule Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ScheduleProfileId {
    get { if ((_hasBits0 & 1) != 0) { return scheduleProfileId_; } else { return ScheduleProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      scheduleProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "scheduleProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScheduleProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "scheduleProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScheduleProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Schedule Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Schedule Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "scheduleTimeZone" field.</summary>
  public const int ScheduleTimeZoneFieldNumber = 4;
  private readonly static string ScheduleTimeZoneDefaultValue = "";

  private string scheduleTimeZone_;
  /// <summary>
  /// Profile time zone
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ScheduleTimeZone {
    get { return scheduleTimeZone_ ?? ScheduleTimeZoneDefaultValue; }
    set {
      scheduleTimeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "scheduleTimeZone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScheduleTimeZone {
    get { return scheduleTimeZone_ != null; }
  }
  /// <summary>Clears the value of the "scheduleTimeZone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScheduleTimeZone() {
    scheduleTimeZone_ = null;
  }

  /// <summary>Field number for the "interval" field.</summary>
  public const int IntervalFieldNumber = 5;
  private static readonly pb::FieldCodec<global::ProtoInterval> _repeated_interval_codec
      = pb::FieldCodec.ForMessage(42, global::ProtoInterval.Parser);
  private readonly pbc::RepeatedField<global::ProtoInterval> interval_ = new pbc::RepeatedField<global::ProtoInterval>();
  /// <summary>
  /// Schedule Profile intervals
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoInterval> Interval {
    get { return interval_; }
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 6;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Schedule was last updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 2) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoScheduleProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoScheduleProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ScheduleProfileId != other.ScheduleProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (ScheduleTimeZone != other.ScheduleTimeZone) return false;
    if(!interval_.Equals(other.interval_)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasScheduleProfileId) hash ^= ScheduleProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasScheduleTimeZone) hash ^= ScheduleTimeZone.GetHashCode();
    hash ^= interval_.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasScheduleProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(ScheduleProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(34);
      output.WriteString(ScheduleTimeZone);
    }
    interval_.WriteTo(output, _repeated_interval_codec);
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasScheduleProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(ScheduleProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(34);
      output.WriteString(ScheduleTimeZone);
    }
    interval_.WriteTo(ref output, _repeated_interval_codec);
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasScheduleProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScheduleProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasScheduleTimeZone) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ScheduleTimeZone);
    }
    size += interval_.CalculateSize(_repeated_interval_codec);
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoScheduleProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasScheduleProfileId) {
      ScheduleProfileId = other.ScheduleProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasScheduleTimeZone) {
      ScheduleTimeZone = other.ScheduleTimeZone;
    }
    interval_.Add(other.interval_);
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ScheduleProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 42: {
          interval_.AddEntriesFrom(input, _repeated_interval_codec);
          break;
        }
        case 48: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ScheduleProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 42: {
          interval_.AddEntriesFrom(ref input, _repeated_interval_codec);
          break;
        }
        case 48: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Commission Profile entity
/// </summary>
public sealed partial class ProtoCommissionProfile : pb::IMessage<ProtoCommissionProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoCommissionProfile> _parser = new pb::MessageParser<ProtoCommissionProfile>(() => new ProtoCommissionProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoCommissionProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoCommissionProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoCommissionProfile(ProtoCommissionProfile other) : this() {
    _hasBits0 = other._hasBits0;
    commissionProfileId_ = other.commissionProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    commissionType_ = other.commissionType_;
    minCommissionType_ = other.minCommissionType_;
    minCommissionAssetId_ = other.minCommissionAssetId_;
    preciseTradingCommissionRate_ = other.preciseTradingCommissionRate_;
    preciseMinCommission_ = other.preciseMinCommission_;
    avoidMinCommissionOnStopOut_ = other.avoidMinCommissionOnStopOut_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    pnlConversionFeeRate_ = other.pnlConversionFeeRate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoCommissionProfile Clone() {
    return new ProtoCommissionProfile(this);
  }

  /// <summary>Field number for the "commissionProfileId" field.</summary>
  public const int CommissionProfileIdFieldNumber = 1;
  private readonly static long CommissionProfileIdDefaultValue = 0L;

  private long commissionProfileId_;
  /// <summary>
  /// ID of the Commission Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CommissionProfileId {
    get { if ((_hasBits0 & 1) != 0) { return commissionProfileId_; } else { return CommissionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      commissionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "commissionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommissionProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "commissionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommissionProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Commission Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Commission Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "commissionType" field.</summary>
  public const int CommissionTypeFieldNumber = 5;
  private readonly static global::ProtoCommissionType CommissionTypeDefaultValue = global::ProtoCommissionType.UsdPerMillionUsd;

  private global::ProtoCommissionType commissionType_;
  /// <summary>
  /// Commission Type to interpret preciseTradingCommissionRate
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoCommissionType CommissionType {
    get { if ((_hasBits0 & 2) != 0) { return commissionType_; } else { return CommissionTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      commissionType_ = value;
    }
  }
  /// <summary>Gets whether the "commissionType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommissionType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "commissionType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommissionType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "minCommissionType" field.</summary>
  public const int MinCommissionTypeFieldNumber = 7;
  private readonly static global::ProtoMinCommissionType MinCommissionTypeDefaultValue = global::ProtoMinCommissionType.Currency;

  private global::ProtoMinCommissionType minCommissionType_;
  /// <summary>
  /// Commission Type to interpret preciseMinCommission
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoMinCommissionType MinCommissionType {
    get { if ((_hasBits0 & 4) != 0) { return minCommissionType_; } else { return MinCommissionTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      minCommissionType_ = value;
    }
  }
  /// <summary>Gets whether the "minCommissionType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinCommissionType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "minCommissionType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinCommissionType() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "minCommissionAssetId" field.</summary>
  public const int MinCommissionAssetIdFieldNumber = 8;
  private readonly static long MinCommissionAssetIdDefaultValue = 0L;

  private long minCommissionAssetId_;
  /// <summary>
  /// Asset of the minimal commission. Used when minCommissionType = 0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinCommissionAssetId {
    get { if ((_hasBits0 & 8) != 0) { return minCommissionAssetId_; } else { return MinCommissionAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      minCommissionAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "minCommissionAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinCommissionAssetId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "minCommissionAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinCommissionAssetId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "preciseTradingCommissionRate" field.</summary>
  public const int PreciseTradingCommissionRateFieldNumber = 9;
  private readonly static long PreciseTradingCommissionRateDefaultValue = 0L;

  private long preciseTradingCommissionRate_;
  /// <summary>
  /// Commission rate for the Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PreciseTradingCommissionRate {
    get { if ((_hasBits0 & 16) != 0) { return preciseTradingCommissionRate_; } else { return PreciseTradingCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 16;
      preciseTradingCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "preciseTradingCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPreciseTradingCommissionRate {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "preciseTradingCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPreciseTradingCommissionRate() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "preciseMinCommission" field.</summary>
  public const int PreciseMinCommissionFieldNumber = 10;
  private readonly static long PreciseMinCommissionDefaultValue = 0L;

  private long preciseMinCommission_;
  /// <summary>
  /// Amount of minimal commission to be paid for each Order, multiplied by 10^8: 10053099944 = 100.53099944 USD
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PreciseMinCommission {
    get { if ((_hasBits0 & 32) != 0) { return preciseMinCommission_; } else { return PreciseMinCommissionDefaultValue; } }
    set {
      _hasBits0 |= 32;
      preciseMinCommission_ = value;
    }
  }
  /// <summary>Gets whether the "preciseMinCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPreciseMinCommission {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "preciseMinCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPreciseMinCommission() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "avoidMinCommissionOnStopOut" field.</summary>
  public const int AvoidMinCommissionOnStopOutFieldNumber = 11;
  private readonly static bool AvoidMinCommissionOnStopOutDefaultValue = false;

  private bool avoidMinCommissionOnStopOut_;
  /// <summary>
  /// If TRUE then minimal commission is not charged on Stop Out
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AvoidMinCommissionOnStopOut {
    get { if ((_hasBits0 & 64) != 0) { return avoidMinCommissionOnStopOut_; } else { return AvoidMinCommissionOnStopOutDefaultValue; } }
    set {
      _hasBits0 |= 64;
      avoidMinCommissionOnStopOut_ = value;
    }
  }
  /// <summary>Gets whether the "avoidMinCommissionOnStopOut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAvoidMinCommissionOnStopOut {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "avoidMinCommissionOnStopOut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAvoidMinCommissionOnStopOut() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 12;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Profile was last updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 128) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 128;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "pnlConversionFeeRate" field.</summary>
  public const int PnlConversionFeeRateFieldNumber = 13;
  private readonly static int PnlConversionFeeRateDefaultValue = 0;

  private int pnlConversionFeeRate_;
  /// <summary>
  /// Conversion Fee in percentage cents, 1234 means 12.34%
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PnlConversionFeeRate {
    get { if ((_hasBits0 & 256) != 0) { return pnlConversionFeeRate_; } else { return PnlConversionFeeRateDefaultValue; } }
    set {
      _hasBits0 |= 256;
      pnlConversionFeeRate_ = value;
    }
  }
  /// <summary>Gets whether the "pnlConversionFeeRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPnlConversionFeeRate {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "pnlConversionFeeRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPnlConversionFeeRate() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoCommissionProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoCommissionProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CommissionProfileId != other.CommissionProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (CommissionType != other.CommissionType) return false;
    if (MinCommissionType != other.MinCommissionType) return false;
    if (MinCommissionAssetId != other.MinCommissionAssetId) return false;
    if (PreciseTradingCommissionRate != other.PreciseTradingCommissionRate) return false;
    if (PreciseMinCommission != other.PreciseMinCommission) return false;
    if (AvoidMinCommissionOnStopOut != other.AvoidMinCommissionOnStopOut) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (PnlConversionFeeRate != other.PnlConversionFeeRate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCommissionProfileId) hash ^= CommissionProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasCommissionType) hash ^= CommissionType.GetHashCode();
    if (HasMinCommissionType) hash ^= MinCommissionType.GetHashCode();
    if (HasMinCommissionAssetId) hash ^= MinCommissionAssetId.GetHashCode();
    if (HasPreciseTradingCommissionRate) hash ^= PreciseTradingCommissionRate.GetHashCode();
    if (HasPreciseMinCommission) hash ^= PreciseMinCommission.GetHashCode();
    if (HasAvoidMinCommissionOnStopOut) hash ^= AvoidMinCommissionOnStopOut.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasPnlConversionFeeRate) hash ^= PnlConversionFeeRate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCommissionProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(CommissionProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasCommissionType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) CommissionType);
    }
    if (HasMinCommissionType) {
      output.WriteRawTag(56);
      output.WriteEnum((int) MinCommissionType);
    }
    if (HasMinCommissionAssetId) {
      output.WriteRawTag(64);
      output.WriteInt64(MinCommissionAssetId);
    }
    if (HasPreciseTradingCommissionRate) {
      output.WriteRawTag(72);
      output.WriteInt64(PreciseTradingCommissionRate);
    }
    if (HasPreciseMinCommission) {
      output.WriteRawTag(80);
      output.WriteInt64(PreciseMinCommission);
    }
    if (HasAvoidMinCommissionOnStopOut) {
      output.WriteRawTag(88);
      output.WriteBool(AvoidMinCommissionOnStopOut);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(96);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasPnlConversionFeeRate) {
      output.WriteRawTag(104);
      output.WriteInt32(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCommissionProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(CommissionProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasCommissionType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) CommissionType);
    }
    if (HasMinCommissionType) {
      output.WriteRawTag(56);
      output.WriteEnum((int) MinCommissionType);
    }
    if (HasMinCommissionAssetId) {
      output.WriteRawTag(64);
      output.WriteInt64(MinCommissionAssetId);
    }
    if (HasPreciseTradingCommissionRate) {
      output.WriteRawTag(72);
      output.WriteInt64(PreciseTradingCommissionRate);
    }
    if (HasPreciseMinCommission) {
      output.WriteRawTag(80);
      output.WriteInt64(PreciseMinCommission);
    }
    if (HasAvoidMinCommissionOnStopOut) {
      output.WriteRawTag(88);
      output.WriteBool(AvoidMinCommissionOnStopOut);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(96);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasPnlConversionFeeRate) {
      output.WriteRawTag(104);
      output.WriteInt32(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCommissionProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommissionProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasCommissionType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommissionType);
    }
    if (HasMinCommissionType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MinCommissionType);
    }
    if (HasMinCommissionAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinCommissionAssetId);
    }
    if (HasPreciseTradingCommissionRate) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreciseTradingCommissionRate);
    }
    if (HasPreciseMinCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreciseMinCommission);
    }
    if (HasAvoidMinCommissionOnStopOut) {
      size += 1 + 1;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasPnlConversionFeeRate) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoCommissionProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasCommissionProfileId) {
      CommissionProfileId = other.CommissionProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasCommissionType) {
      CommissionType = other.CommissionType;
    }
    if (other.HasMinCommissionType) {
      MinCommissionType = other.MinCommissionType;
    }
    if (other.HasMinCommissionAssetId) {
      MinCommissionAssetId = other.MinCommissionAssetId;
    }
    if (other.HasPreciseTradingCommissionRate) {
      PreciseTradingCommissionRate = other.PreciseTradingCommissionRate;
    }
    if (other.HasPreciseMinCommission) {
      PreciseMinCommission = other.PreciseMinCommission;
    }
    if (other.HasAvoidMinCommissionOnStopOut) {
      AvoidMinCommissionOnStopOut = other.AvoidMinCommissionOnStopOut;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasPnlConversionFeeRate) {
      PnlConversionFeeRate = other.PnlConversionFeeRate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CommissionProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          CommissionType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
        case 56: {
          MinCommissionType = (global::ProtoMinCommissionType) input.ReadEnum();
          break;
        }
        case 64: {
          MinCommissionAssetId = input.ReadInt64();
          break;
        }
        case 72: {
          PreciseTradingCommissionRate = input.ReadInt64();
          break;
        }
        case 80: {
          PreciseMinCommission = input.ReadInt64();
          break;
        }
        case 88: {
          AvoidMinCommissionOnStopOut = input.ReadBool();
          break;
        }
        case 96: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 104: {
          PnlConversionFeeRate = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CommissionProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          CommissionType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
        case 56: {
          MinCommissionType = (global::ProtoMinCommissionType) input.ReadEnum();
          break;
        }
        case 64: {
          MinCommissionAssetId = input.ReadInt64();
          break;
        }
        case 72: {
          PreciseTradingCommissionRate = input.ReadInt64();
          break;
        }
        case 80: {
          PreciseMinCommission = input.ReadInt64();
          break;
        }
        case 88: {
          AvoidMinCommissionOnStopOut = input.ReadBool();
          break;
        }
        case 96: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 104: {
          PnlConversionFeeRate = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Volume Profile entity
/// </summary>
public sealed partial class ProtoVolumeProfile : pb::IMessage<ProtoVolumeProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoVolumeProfile> _parser = new pb::MessageParser<ProtoVolumeProfile>(() => new ProtoVolumeProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoVolumeProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoVolumeProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoVolumeProfile(ProtoVolumeProfile other) : this() {
    _hasBits0 = other._hasBits0;
    volumeProfileId_ = other.volumeProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    minVolume_ = other.minVolume_;
    stepVolume_ = other.stepVolume_;
    maxVolume_ = other.maxVolume_;
    minStake_ = other.minStake_;
    stepStake_ = other.stepStake_;
    maxStake_ = other.maxStake_;
    maxExposure_ = other.maxExposure_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoVolumeProfile Clone() {
    return new ProtoVolumeProfile(this);
  }

  /// <summary>Field number for the "volumeProfileId" field.</summary>
  public const int VolumeProfileIdFieldNumber = 1;
  private readonly static long VolumeProfileIdDefaultValue = 0L;

  private long volumeProfileId_;
  /// <summary>
  /// ID of the Volume Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long VolumeProfileId {
    get { if ((_hasBits0 & 1) != 0) { return volumeProfileId_; } else { return VolumeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      volumeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "volumeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolumeProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "volumeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolumeProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Volume Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Volume Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "minVolume" field.</summary>
  public const int MinVolumeFieldNumber = 4;
  private readonly static long MinVolumeDefaultValue = 0L;

  private long minVolume_;
  /// <summary>
  /// Minimum volume in base Asset of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinVolume {
    get { if ((_hasBits0 & 2) != 0) { return minVolume_; } else { return MinVolumeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      minVolume_ = value;
    }
  }
  /// <summary>Gets whether the "minVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinVolume {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "minVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinVolume() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "stepVolume" field.</summary>
  public const int StepVolumeFieldNumber = 5;
  private readonly static long StepVolumeDefaultValue = 0L;

  private long stepVolume_;
  /// <summary>
  /// Allowed volume step in base Asset of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StepVolume {
    get { if ((_hasBits0 & 4) != 0) { return stepVolume_; } else { return StepVolumeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      stepVolume_ = value;
    }
  }
  /// <summary>Gets whether the "stepVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStepVolume {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "stepVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStepVolume() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "maxVolume" field.</summary>
  public const int MaxVolumeFieldNumber = 6;
  private readonly static long MaxVolumeDefaultValue = 0L;

  private long maxVolume_;
  /// <summary>
  /// Maximum volume in base Asset of the Symbol
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxVolume {
    get { if ((_hasBits0 & 8) != 0) { return maxVolume_; } else { return MaxVolumeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      maxVolume_ = value;
    }
  }
  /// <summary>Gets whether the "maxVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxVolume {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "maxVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxVolume() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "minStake" field.</summary>
  public const int MinStakeFieldNumber = 7;
  private readonly static long MinStakeDefaultValue = 0L;

  private long minStake_;
  /// <summary>
  /// Minimal stake (for Spread Betting) in Deposit currency. MinVolume is ignored for Spread Betting Accounts
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinStake {
    get { if ((_hasBits0 & 16) != 0) { return minStake_; } else { return MinStakeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      minStake_ = value;
    }
  }
  /// <summary>Gets whether the "minStake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinStake {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "minStake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinStake() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "stepStake" field.</summary>
  public const int StepStakeFieldNumber = 8;
  private readonly static long StepStakeDefaultValue = 0L;

  private long stepStake_;
  /// <summary>
  /// Step of stake (for Spread Betting) in Deposit currency. StepVolume is ignored for Spread Betting Accounts
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StepStake {
    get { if ((_hasBits0 & 32) != 0) { return stepStake_; } else { return StepStakeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      stepStake_ = value;
    }
  }
  /// <summary>Gets whether the "stepStake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStepStake {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "stepStake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStepStake() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "maxStake" field.</summary>
  public const int MaxStakeFieldNumber = 9;
  private readonly static long MaxStakeDefaultValue = 0L;

  private long maxStake_;
  /// <summary>
  /// Maximum stake (for Spread Betting) in Deposit currency. MaxVolume is ignored for Spread Betting Accounts
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxStake {
    get { if ((_hasBits0 & 64) != 0) { return maxStake_; } else { return MaxStakeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      maxStake_ = value;
    }
  }
  /// <summary>Gets whether the "maxStake" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxStake {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "maxStake" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxStake() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "maxExposure" field.</summary>
  public const int MaxExposureFieldNumber = 10;
  private readonly static ulong MaxExposureDefaultValue = 0UL;

  private ulong maxExposure_;
  /// <summary>
  /// Maximum exposure as volume in USD cents
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong MaxExposure {
    get { if ((_hasBits0 & 128) != 0) { return maxExposure_; } else { return MaxExposureDefaultValue; } }
    set {
      _hasBits0 |= 128;
      maxExposure_ = value;
    }
  }
  /// <summary>Gets whether the "maxExposure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxExposure {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "maxExposure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxExposure() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 11;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Profile was last updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 256) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 256;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoVolumeProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoVolumeProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (VolumeProfileId != other.VolumeProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (MinVolume != other.MinVolume) return false;
    if (StepVolume != other.StepVolume) return false;
    if (MaxVolume != other.MaxVolume) return false;
    if (MinStake != other.MinStake) return false;
    if (StepStake != other.StepStake) return false;
    if (MaxStake != other.MaxStake) return false;
    if (MaxExposure != other.MaxExposure) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVolumeProfileId) hash ^= VolumeProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasMinVolume) hash ^= MinVolume.GetHashCode();
    if (HasStepVolume) hash ^= StepVolume.GetHashCode();
    if (HasMaxVolume) hash ^= MaxVolume.GetHashCode();
    if (HasMinStake) hash ^= MinStake.GetHashCode();
    if (HasStepStake) hash ^= StepStake.GetHashCode();
    if (HasMaxStake) hash ^= MaxStake.GetHashCode();
    if (HasMaxExposure) hash ^= MaxExposure.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasVolumeProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(VolumeProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasMinVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(MinVolume);
    }
    if (HasStepVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(StepVolume);
    }
    if (HasMaxVolume) {
      output.WriteRawTag(48);
      output.WriteInt64(MaxVolume);
    }
    if (HasMinStake) {
      output.WriteRawTag(56);
      output.WriteInt64(MinStake);
    }
    if (HasStepStake) {
      output.WriteRawTag(64);
      output.WriteInt64(StepStake);
    }
    if (HasMaxStake) {
      output.WriteRawTag(72);
      output.WriteInt64(MaxStake);
    }
    if (HasMaxExposure) {
      output.WriteRawTag(80);
      output.WriteUInt64(MaxExposure);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(88);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasVolumeProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(VolumeProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasMinVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(MinVolume);
    }
    if (HasStepVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(StepVolume);
    }
    if (HasMaxVolume) {
      output.WriteRawTag(48);
      output.WriteInt64(MaxVolume);
    }
    if (HasMinStake) {
      output.WriteRawTag(56);
      output.WriteInt64(MinStake);
    }
    if (HasStepStake) {
      output.WriteRawTag(64);
      output.WriteInt64(StepStake);
    }
    if (HasMaxStake) {
      output.WriteRawTag(72);
      output.WriteInt64(MaxStake);
    }
    if (HasMaxExposure) {
      output.WriteRawTag(80);
      output.WriteUInt64(MaxExposure);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(88);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasVolumeProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VolumeProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasMinVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinVolume);
    }
    if (HasStepVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepVolume);
    }
    if (HasMaxVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxVolume);
    }
    if (HasMinStake) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinStake);
    }
    if (HasStepStake) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepStake);
    }
    if (HasMaxStake) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxStake);
    }
    if (HasMaxExposure) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxExposure);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoVolumeProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasVolumeProfileId) {
      VolumeProfileId = other.VolumeProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasMinVolume) {
      MinVolume = other.MinVolume;
    }
    if (other.HasStepVolume) {
      StepVolume = other.StepVolume;
    }
    if (other.HasMaxVolume) {
      MaxVolume = other.MaxVolume;
    }
    if (other.HasMinStake) {
      MinStake = other.MinStake;
    }
    if (other.HasStepStake) {
      StepStake = other.StepStake;
    }
    if (other.HasMaxStake) {
      MaxStake = other.MaxStake;
    }
    if (other.HasMaxExposure) {
      MaxExposure = other.MaxExposure;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          VolumeProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          MinVolume = input.ReadInt64();
          break;
        }
        case 40: {
          StepVolume = input.ReadInt64();
          break;
        }
        case 48: {
          MaxVolume = input.ReadInt64();
          break;
        }
        case 56: {
          MinStake = input.ReadInt64();
          break;
        }
        case 64: {
          StepStake = input.ReadInt64();
          break;
        }
        case 72: {
          MaxStake = input.ReadInt64();
          break;
        }
        case 80: {
          MaxExposure = input.ReadUInt64();
          break;
        }
        case 88: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          VolumeProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          MinVolume = input.ReadInt64();
          break;
        }
        case 40: {
          StepVolume = input.ReadInt64();
          break;
        }
        case 48: {
          MaxVolume = input.ReadInt64();
          break;
        }
        case 56: {
          MinStake = input.ReadInt64();
          break;
        }
        case 64: {
          StepStake = input.ReadInt64();
          break;
        }
        case 72: {
          MaxStake = input.ReadInt64();
          break;
        }
        case 80: {
          MaxExposure = input.ReadUInt64();
          break;
        }
        case 88: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Execution Profile entity
/// </summary>
public sealed partial class ProtoExecutionProfile : pb::IMessage<ProtoExecutionProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoExecutionProfile> _parser = new pb::MessageParser<ProtoExecutionProfile>(() => new ProtoExecutionProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoExecutionProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoExecutionProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoExecutionProfile(ProtoExecutionProfile other) : this() {
    _hasBits0 = other._hasBits0;
    executionProfileId_ = other.executionProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    minBookBDelay_ = other.minBookBDelay_;
    maxBookBDelay_ = other.maxBookBDelay_;
    executionPolicy_ = other.executionPolicy_;
    gslExecutionPolicy_ = other.gslExecutionPolicy_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    conditionVolumeUsd_ = other.conditionVolumeUsd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoExecutionProfile Clone() {
    return new ProtoExecutionProfile(this);
  }

  /// <summary>Field number for the "executionProfileId" field.</summary>
  public const int ExecutionProfileIdFieldNumber = 1;
  private readonly static long ExecutionProfileIdDefaultValue = 0L;

  private long executionProfileId_;
  /// <summary>
  /// ID of the Execution Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutionProfileId {
    get { if ((_hasBits0 & 1) != 0) { return executionProfileId_; } else { return ExecutionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      executionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "executionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "executionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Execution Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Execution Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "minBookBDelay" field.</summary>
  public const int MinBookBDelayFieldNumber = 4;
  private readonly static uint MinBookBDelayDefaultValue = 0;

  private uint minBookBDelay_;
  /// <summary>
  /// Minimal Book B execution delay in milliseconds
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MinBookBDelay {
    get { if ((_hasBits0 & 2) != 0) { return minBookBDelay_; } else { return MinBookBDelayDefaultValue; } }
    set {
      _hasBits0 |= 2;
      minBookBDelay_ = value;
    }
  }
  /// <summary>Gets whether the "minBookBDelay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinBookBDelay {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "minBookBDelay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinBookBDelay() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "maxBookBDelay" field.</summary>
  public const int MaxBookBDelayFieldNumber = 5;
  private readonly static uint MaxBookBDelayDefaultValue = 0;

  private uint maxBookBDelay_;
  /// <summary>
  /// Maximum Book B execution delay in milliseconds
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxBookBDelay {
    get { if ((_hasBits0 & 4) != 0) { return maxBookBDelay_; } else { return MaxBookBDelayDefaultValue; } }
    set {
      _hasBits0 |= 4;
      maxBookBDelay_ = value;
    }
  }
  /// <summary>Gets whether the "maxBookBDelay" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxBookBDelay {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "maxBookBDelay" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxBookBDelay() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "executionPolicy" field.</summary>
  public const int ExecutionPolicyFieldNumber = 6;
  private readonly static global::ProtoExecutionPolicy ExecutionPolicyDefaultValue = global::ProtoExecutionPolicy.Booka;

  private global::ProtoExecutionPolicy executionPolicy_;
  /// <summary>
  /// Determines execution policy for all opening Orders
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoExecutionPolicy ExecutionPolicy {
    get { if ((_hasBits0 & 8) != 0) { return executionPolicy_; } else { return ExecutionPolicyDefaultValue; } }
    set {
      _hasBits0 |= 8;
      executionPolicy_ = value;
    }
  }
  /// <summary>Gets whether the "executionPolicy" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPolicy {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "executionPolicy" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPolicy() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "gslExecutionPolicy" field.</summary>
  public const int GslExecutionPolicyFieldNumber = 7;
  private readonly static global::ProtoGSLExecutionPolicy GslExecutionPolicyDefaultValue = global::ProtoGSLExecutionPolicy.Disabled;

  private global::ProtoGSLExecutionPolicy gslExecutionPolicy_;
  /// <summary>
  /// Type of execution policy
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoGSLExecutionPolicy GslExecutionPolicy {
    get { if ((_hasBits0 & 16) != 0) { return gslExecutionPolicy_; } else { return GslExecutionPolicyDefaultValue; } }
    set {
      _hasBits0 |= 16;
      gslExecutionPolicy_ = value;
    }
  }
  /// <summary>Gets whether the "gslExecutionPolicy" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGslExecutionPolicy {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "gslExecutionPolicy" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGslExecutionPolicy() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 8;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Profile was last updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "conditionVolumeUsd" field.</summary>
  public const int ConditionVolumeUsdFieldNumber = 9;
  private readonly static long ConditionVolumeUsdDefaultValue = 0L;

  private long conditionVolumeUsd_;
  /// <summary>
  /// Used only if executionPolicy = BOOK_A_WITH_CONDITION. If usdVolume >= conditionVolumeUsd then BOOK_A is used, otherwise BOOK_B is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ConditionVolumeUsd {
    get { if ((_hasBits0 & 64) != 0) { return conditionVolumeUsd_; } else { return ConditionVolumeUsdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      conditionVolumeUsd_ = value;
    }
  }
  /// <summary>Gets whether the "conditionVolumeUsd" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasConditionVolumeUsd {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "conditionVolumeUsd" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearConditionVolumeUsd() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoExecutionProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoExecutionProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ExecutionProfileId != other.ExecutionProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (MinBookBDelay != other.MinBookBDelay) return false;
    if (MaxBookBDelay != other.MaxBookBDelay) return false;
    if (ExecutionPolicy != other.ExecutionPolicy) return false;
    if (GslExecutionPolicy != other.GslExecutionPolicy) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (ConditionVolumeUsd != other.ConditionVolumeUsd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasExecutionProfileId) hash ^= ExecutionProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasMinBookBDelay) hash ^= MinBookBDelay.GetHashCode();
    if (HasMaxBookBDelay) hash ^= MaxBookBDelay.GetHashCode();
    if (HasExecutionPolicy) hash ^= ExecutionPolicy.GetHashCode();
    if (HasGslExecutionPolicy) hash ^= GslExecutionPolicy.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasConditionVolumeUsd) hash ^= ConditionVolumeUsd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasExecutionProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(ExecutionProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasMinBookBDelay) {
      output.WriteRawTag(32);
      output.WriteUInt32(MinBookBDelay);
    }
    if (HasMaxBookBDelay) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxBookBDelay);
    }
    if (HasExecutionPolicy) {
      output.WriteRawTag(48);
      output.WriteEnum((int) ExecutionPolicy);
    }
    if (HasGslExecutionPolicy) {
      output.WriteRawTag(56);
      output.WriteEnum((int) GslExecutionPolicy);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasConditionVolumeUsd) {
      output.WriteRawTag(72);
      output.WriteInt64(ConditionVolumeUsd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasExecutionProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(ExecutionProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasMinBookBDelay) {
      output.WriteRawTag(32);
      output.WriteUInt32(MinBookBDelay);
    }
    if (HasMaxBookBDelay) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxBookBDelay);
    }
    if (HasExecutionPolicy) {
      output.WriteRawTag(48);
      output.WriteEnum((int) ExecutionPolicy);
    }
    if (HasGslExecutionPolicy) {
      output.WriteRawTag(56);
      output.WriteEnum((int) GslExecutionPolicy);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasConditionVolumeUsd) {
      output.WriteRawTag(72);
      output.WriteInt64(ConditionVolumeUsd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasExecutionProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasMinBookBDelay) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinBookBDelay);
    }
    if (HasMaxBookBDelay) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBookBDelay);
    }
    if (HasExecutionPolicy) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExecutionPolicy);
    }
    if (HasGslExecutionPolicy) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GslExecutionPolicy);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasConditionVolumeUsd) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConditionVolumeUsd);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoExecutionProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasExecutionProfileId) {
      ExecutionProfileId = other.ExecutionProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasMinBookBDelay) {
      MinBookBDelay = other.MinBookBDelay;
    }
    if (other.HasMaxBookBDelay) {
      MaxBookBDelay = other.MaxBookBDelay;
    }
    if (other.HasExecutionPolicy) {
      ExecutionPolicy = other.ExecutionPolicy;
    }
    if (other.HasGslExecutionPolicy) {
      GslExecutionPolicy = other.GslExecutionPolicy;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasConditionVolumeUsd) {
      ConditionVolumeUsd = other.ConditionVolumeUsd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ExecutionProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          MinBookBDelay = input.ReadUInt32();
          break;
        }
        case 40: {
          MaxBookBDelay = input.ReadUInt32();
          break;
        }
        case 48: {
          ExecutionPolicy = (global::ProtoExecutionPolicy) input.ReadEnum();
          break;
        }
        case 56: {
          GslExecutionPolicy = (global::ProtoGSLExecutionPolicy) input.ReadEnum();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          ConditionVolumeUsd = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ExecutionProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          MinBookBDelay = input.ReadUInt32();
          break;
        }
        case 40: {
          MaxBookBDelay = input.ReadUInt32();
          break;
        }
        case 48: {
          ExecutionPolicy = (global::ProtoExecutionPolicy) input.ReadEnum();
          break;
        }
        case 56: {
          GslExecutionPolicy = (global::ProtoGSLExecutionPolicy) input.ReadEnum();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          ConditionVolumeUsd = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Protection Profile Entity
/// </summary>
public sealed partial class ProtoProtectionProfile : pb::IMessage<ProtoProtectionProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoProtectionProfile> _parser = new pb::MessageParser<ProtoProtectionProfile>(() => new ProtoProtectionProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoProtectionProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoProtectionProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoProtectionProfile(ProtoProtectionProfile other) : this() {
    _hasBits0 = other._hasBits0;
    protectionProfileId_ = other.protectionProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    gslCharge_ = other.gslCharge_;
    slDistance_ = other.slDistance_;
    tpDistance_ = other.tpDistance_;
    gslDistance_ = other.gslDistance_;
    distanceSetIn_ = other.distanceSetIn_;
    tolerance_ = other.tolerance_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoProtectionProfile Clone() {
    return new ProtoProtectionProfile(this);
  }

  /// <summary>Field number for the "protectionProfileId" field.</summary>
  public const int ProtectionProfileIdFieldNumber = 1;
  private readonly static long ProtectionProfileIdDefaultValue = 0L;

  private long protectionProfileId_;
  /// <summary>
  /// ID of the Protection Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ProtectionProfileId {
    get { if ((_hasBits0 & 1) != 0) { return protectionProfileId_; } else { return ProtectionProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      protectionProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "protectionProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProtectionProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "protectionProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProtectionProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Protection Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Protection Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "gslCharge" field.</summary>
  public const int GslChargeFieldNumber = 4;
  private readonly static long GslChargeDefaultValue = 0L;

  private long gslCharge_;
  /// <summary>
  /// Charge (additional commission) for Guaranteed Stop Loss placement
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GslCharge {
    get { if ((_hasBits0 & 2) != 0) { return gslCharge_; } else { return GslChargeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      gslCharge_ = value;
    }
  }
  /// <summary>Gets whether the "gslCharge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGslCharge {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "gslCharge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGslCharge() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "slDistance" field.</summary>
  public const int SlDistanceFieldNumber = 5;
  private readonly static uint SlDistanceDefaultValue = 0;

  private uint slDistance_;
  /// <summary>
  /// Minimal distance between current market price and Stop Loss specified in units as per distanceSetIn
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SlDistance {
    get { if ((_hasBits0 & 4) != 0) { return slDistance_; } else { return SlDistanceDefaultValue; } }
    set {
      _hasBits0 |= 4;
      slDistance_ = value;
    }
  }
  /// <summary>Gets whether the "slDistance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSlDistance {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "slDistance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSlDistance() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "tpDistance" field.</summary>
  public const int TpDistanceFieldNumber = 6;
  private readonly static uint TpDistanceDefaultValue = 0;

  private uint tpDistance_;
  /// <summary>
  /// Minimal distance between current market price and Stop Loss Take Profit specified in units as per distanceSetIn
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TpDistance {
    get { if ((_hasBits0 & 8) != 0) { return tpDistance_; } else { return TpDistanceDefaultValue; } }
    set {
      _hasBits0 |= 8;
      tpDistance_ = value;
    }
  }
  /// <summary>Gets whether the "tpDistance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTpDistance {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "tpDistance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTpDistance() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "gslDistance" field.</summary>
  public const int GslDistanceFieldNumber = 7;
  private readonly static uint GslDistanceDefaultValue = 0;

  private uint gslDistance_;
  /// <summary>
  /// Minimal distance for placing Guaranteed Stop Loss specified in units as per distanceSetIn
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GslDistance {
    get { if ((_hasBits0 & 16) != 0) { return gslDistance_; } else { return GslDistanceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      gslDistance_ = value;
    }
  }
  /// <summary>Gets whether the "gslDistance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGslDistance {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "gslDistance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGslDistance() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "distanceSetIn" field.</summary>
  public const int DistanceSetInFieldNumber = 8;
  private readonly static global::ProtoSymbolDistanceType DistanceSetInDefaultValue = global::ProtoSymbolDistanceType.SymbolDistanceInPoints;

  private global::ProtoSymbolDistanceType distanceSetIn_;
  /// <summary>
  /// Distance in points (15 means 15 points) or percentage (15 means 0.15%)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoSymbolDistanceType DistanceSetIn {
    get { if ((_hasBits0 & 32) != 0) { return distanceSetIn_; } else { return DistanceSetInDefaultValue; } }
    set {
      _hasBits0 |= 32;
      distanceSetIn_ = value;
    }
  }
  /// <summary>Gets whether the "distanceSetIn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDistanceSetIn {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "distanceSetIn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDistanceSetIn() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "tolerance" field.</summary>
  public const int ToleranceFieldNumber = 9;
  private readonly static int ToleranceDefaultValue = 0;

  private int tolerance_;
  /// <summary>
  /// Tolerance distance(max slippage for instant Orders) specified in units as per distanceSetIn. If slippage is more than tolerance and price is better for the Trader Order will be executed at market price. If slippage is more than tolerance and price is worse for the Trader Order will be cancelled
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Tolerance {
    get { if ((_hasBits0 & 64) != 0) { return tolerance_; } else { return ToleranceDefaultValue; } }
    set {
      _hasBits0 |= 64;
      tolerance_ = value;
    }
  }
  /// <summary>Gets whether the "tolerance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTolerance {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "tolerance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTolerance() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoProtectionProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoProtectionProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProtectionProfileId != other.ProtectionProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (GslCharge != other.GslCharge) return false;
    if (SlDistance != other.SlDistance) return false;
    if (TpDistance != other.TpDistance) return false;
    if (GslDistance != other.GslDistance) return false;
    if (DistanceSetIn != other.DistanceSetIn) return false;
    if (Tolerance != other.Tolerance) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasProtectionProfileId) hash ^= ProtectionProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasGslCharge) hash ^= GslCharge.GetHashCode();
    if (HasSlDistance) hash ^= SlDistance.GetHashCode();
    if (HasTpDistance) hash ^= TpDistance.GetHashCode();
    if (HasGslDistance) hash ^= GslDistance.GetHashCode();
    if (HasDistanceSetIn) hash ^= DistanceSetIn.GetHashCode();
    if (HasTolerance) hash ^= Tolerance.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasProtectionProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(ProtectionProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasGslCharge) {
      output.WriteRawTag(32);
      output.WriteInt64(GslCharge);
    }
    if (HasSlDistance) {
      output.WriteRawTag(40);
      output.WriteUInt32(SlDistance);
    }
    if (HasTpDistance) {
      output.WriteRawTag(48);
      output.WriteUInt32(TpDistance);
    }
    if (HasGslDistance) {
      output.WriteRawTag(56);
      output.WriteUInt32(GslDistance);
    }
    if (HasDistanceSetIn) {
      output.WriteRawTag(64);
      output.WriteEnum((int) DistanceSetIn);
    }
    if (HasTolerance) {
      output.WriteRawTag(72);
      output.WriteInt32(Tolerance);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasProtectionProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(ProtectionProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasGslCharge) {
      output.WriteRawTag(32);
      output.WriteInt64(GslCharge);
    }
    if (HasSlDistance) {
      output.WriteRawTag(40);
      output.WriteUInt32(SlDistance);
    }
    if (HasTpDistance) {
      output.WriteRawTag(48);
      output.WriteUInt32(TpDistance);
    }
    if (HasGslDistance) {
      output.WriteRawTag(56);
      output.WriteUInt32(GslDistance);
    }
    if (HasDistanceSetIn) {
      output.WriteRawTag(64);
      output.WriteEnum((int) DistanceSetIn);
    }
    if (HasTolerance) {
      output.WriteRawTag(72);
      output.WriteInt32(Tolerance);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasProtectionProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProtectionProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasGslCharge) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GslCharge);
    }
    if (HasSlDistance) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlDistance);
    }
    if (HasTpDistance) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TpDistance);
    }
    if (HasGslDistance) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GslDistance);
    }
    if (HasDistanceSetIn) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DistanceSetIn);
    }
    if (HasTolerance) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tolerance);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoProtectionProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasProtectionProfileId) {
      ProtectionProfileId = other.ProtectionProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasGslCharge) {
      GslCharge = other.GslCharge;
    }
    if (other.HasSlDistance) {
      SlDistance = other.SlDistance;
    }
    if (other.HasTpDistance) {
      TpDistance = other.TpDistance;
    }
    if (other.HasGslDistance) {
      GslDistance = other.GslDistance;
    }
    if (other.HasDistanceSetIn) {
      DistanceSetIn = other.DistanceSetIn;
    }
    if (other.HasTolerance) {
      Tolerance = other.Tolerance;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ProtectionProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          GslCharge = input.ReadInt64();
          break;
        }
        case 40: {
          SlDistance = input.ReadUInt32();
          break;
        }
        case 48: {
          TpDistance = input.ReadUInt32();
          break;
        }
        case 56: {
          GslDistance = input.ReadUInt32();
          break;
        }
        case 64: {
          DistanceSetIn = (global::ProtoSymbolDistanceType) input.ReadEnum();
          break;
        }
        case 72: {
          Tolerance = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ProtectionProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          GslCharge = input.ReadInt64();
          break;
        }
        case 40: {
          SlDistance = input.ReadUInt32();
          break;
        }
        case 48: {
          TpDistance = input.ReadUInt32();
          break;
        }
        case 56: {
          GslDistance = input.ReadUInt32();
          break;
        }
        case 64: {
          DistanceSetIn = (global::ProtoSymbolDistanceType) input.ReadEnum();
          break;
        }
        case 72: {
          Tolerance = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Swap Free Profile (with Administrative Fee instead of Swaps)
/// </summary>
public sealed partial class ProtoSwapFreeProfile : pb::IMessage<ProtoSwapFreeProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoSwapFreeProfile> _parser = new pb::MessageParser<ProtoSwapFreeProfile>(() => new ProtoSwapFreeProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoSwapFreeProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapFreeProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapFreeProfile(ProtoSwapFreeProfile other) : this() {
    _hasBits0 = other._hasBits0;
    swapFreeProfileId_ = other.swapFreeProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    rolloverCommission_ = other.rolloverCommission_;
    skipRolloverDays_ = other.skipRolloverDays_;
    rolloverChargePeriod_ = other.rolloverChargePeriod_;
    rolloverCommission3Days_ = other.rolloverCommission3Days_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapFreeProfile Clone() {
    return new ProtoSwapFreeProfile(this);
  }

  /// <summary>Field number for the "swapFreeProfileId" field.</summary>
  public const int SwapFreeProfileIdFieldNumber = 1;
  private readonly static long SwapFreeProfileIdDefaultValue = 0L;

  private long swapFreeProfileId_;
  /// <summary>
  /// ID of the Swap Free Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SwapFreeProfileId {
    get { if ((_hasBits0 & 1) != 0) { return swapFreeProfileId_; } else { return SwapFreeProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      swapFreeProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "swapFreeProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapFreeProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "swapFreeProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapFreeProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Swap Free Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of Swap Free Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "rolloverCommission" field.</summary>
  public const int RolloverCommissionFieldNumber = 4;
  private readonly static long RolloverCommissionDefaultValue = 0L;

  private long rolloverCommission_;
  /// <summary>
  /// Kind of Swap for Swap free Accounts (USD per million USD in cents)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RolloverCommission {
    get { if ((_hasBits0 & 2) != 0) { return rolloverCommission_; } else { return RolloverCommissionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      rolloverCommission_ = value;
    }
  }
  /// <summary>Gets whether the "rolloverCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRolloverCommission {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "rolloverCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRolloverCommission() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "skipRolloverDays" field.</summary>
  public const int SkipRolloverDaysFieldNumber = 5;
  private readonly static int SkipRolloverDaysDefaultValue = 0;

  private int skipRolloverDays_;
  /// <summary>
  /// Count of nights before first Rollover Commission is charged
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SkipRolloverDays {
    get { if ((_hasBits0 & 4) != 0) { return skipRolloverDays_; } else { return SkipRolloverDaysDefaultValue; } }
    set {
      _hasBits0 |= 4;
      skipRolloverDays_ = value;
    }
  }
  /// <summary>Gets whether the "skipRolloverDays" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSkipRolloverDays {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "skipRolloverDays" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSkipRolloverDays() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "rolloverChargePeriod" field.</summary>
  public const int RolloverChargePeriodFieldNumber = 6;
  private readonly static int RolloverChargePeriodDefaultValue = 0;

  private int rolloverChargePeriod_;
  /// <summary>
  /// Payment period of Rollover Commission in days (default = 1). 1 (or 0) means daily payments, 2 each second day. 3x rollover is applied only for daily payments
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RolloverChargePeriod {
    get { if ((_hasBits0 & 8) != 0) { return rolloverChargePeriod_; } else { return RolloverChargePeriodDefaultValue; } }
    set {
      _hasBits0 |= 8;
      rolloverChargePeriod_ = value;
    }
  }
  /// <summary>Gets whether the "rolloverChargePeriod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRolloverChargePeriod {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "rolloverChargePeriod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRolloverChargePeriod() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "rolloverCommission3Days" field.</summary>
  public const int RolloverCommission3DaysFieldNumber = 7;
  private readonly static global::ProtoDayOfWeek RolloverCommission3DaysDefaultValue = global::ProtoDayOfWeek.Monday;

  private global::ProtoDayOfWeek rolloverCommission3Days_;
  /// <summary>
  /// Day of the week (in UTC) when Administrative Fee charge amount will be tripled. Applied only if rollover charge period = 0 or 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDayOfWeek RolloverCommission3Days {
    get { if ((_hasBits0 & 16) != 0) { return rolloverCommission3Days_; } else { return RolloverCommission3DaysDefaultValue; } }
    set {
      _hasBits0 |= 16;
      rolloverCommission3Days_ = value;
    }
  }
  /// <summary>Gets whether the "rolloverCommission3Days" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRolloverCommission3Days {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "rolloverCommission3Days" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRolloverCommission3Days() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 8;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Profile was last updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoSwapFreeProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoSwapFreeProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwapFreeProfileId != other.SwapFreeProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (RolloverCommission != other.RolloverCommission) return false;
    if (SkipRolloverDays != other.SkipRolloverDays) return false;
    if (RolloverChargePeriod != other.RolloverChargePeriod) return false;
    if (RolloverCommission3Days != other.RolloverCommission3Days) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSwapFreeProfileId) hash ^= SwapFreeProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasRolloverCommission) hash ^= RolloverCommission.GetHashCode();
    if (HasSkipRolloverDays) hash ^= SkipRolloverDays.GetHashCode();
    if (HasRolloverChargePeriod) hash ^= RolloverChargePeriod.GetHashCode();
    if (HasRolloverCommission3Days) hash ^= RolloverCommission3Days.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSwapFreeProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(SwapFreeProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasRolloverCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(RolloverCommission);
    }
    if (HasSkipRolloverDays) {
      output.WriteRawTag(40);
      output.WriteInt32(SkipRolloverDays);
    }
    if (HasRolloverChargePeriod) {
      output.WriteRawTag(48);
      output.WriteInt32(RolloverChargePeriod);
    }
    if (HasRolloverCommission3Days) {
      output.WriteRawTag(56);
      output.WriteEnum((int) RolloverCommission3Days);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSwapFreeProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(SwapFreeProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasRolloverCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(RolloverCommission);
    }
    if (HasSkipRolloverDays) {
      output.WriteRawTag(40);
      output.WriteInt32(SkipRolloverDays);
    }
    if (HasRolloverChargePeriod) {
      output.WriteRawTag(48);
      output.WriteInt32(RolloverChargePeriod);
    }
    if (HasRolloverCommission3Days) {
      output.WriteRawTag(56);
      output.WriteEnum((int) RolloverCommission3Days);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSwapFreeProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwapFreeProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasRolloverCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RolloverCommission);
    }
    if (HasSkipRolloverDays) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipRolloverDays);
    }
    if (HasRolloverChargePeriod) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolloverChargePeriod);
    }
    if (HasRolloverCommission3Days) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RolloverCommission3Days);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoSwapFreeProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasSwapFreeProfileId) {
      SwapFreeProfileId = other.SwapFreeProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasRolloverCommission) {
      RolloverCommission = other.RolloverCommission;
    }
    if (other.HasSkipRolloverDays) {
      SkipRolloverDays = other.SkipRolloverDays;
    }
    if (other.HasRolloverChargePeriod) {
      RolloverChargePeriod = other.RolloverChargePeriod;
    }
    if (other.HasRolloverCommission3Days) {
      RolloverCommission3Days = other.RolloverCommission3Days;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SwapFreeProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          RolloverCommission = input.ReadInt64();
          break;
        }
        case 40: {
          SkipRolloverDays = input.ReadInt32();
          break;
        }
        case 48: {
          RolloverChargePeriod = input.ReadInt32();
          break;
        }
        case 56: {
          RolloverCommission3Days = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SwapFreeProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          RolloverCommission = input.ReadInt64();
          break;
        }
        case 40: {
          SkipRolloverDays = input.ReadInt32();
          break;
        }
        case 48: {
          RolloverChargePeriod = input.ReadInt32();
          break;
        }
        case 56: {
          RolloverCommission3Days = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Holiday entity
/// </summary>
public sealed partial class ProtoHoliday : pb::IMessage<ProtoHoliday>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoHoliday> _parser = new pb::MessageParser<ProtoHoliday>(() => new ProtoHoliday());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoHoliday> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoHoliday() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoHoliday(ProtoHoliday other) : this() {
    _hasBits0 = other._hasBits0;
    holidayId_ = other.holidayId_;
    name_ = other.name_;
    description_ = other.description_;
    scheduleTimeZone_ = other.scheduleTimeZone_;
    holidayDate_ = other.holidayDate_;
    isRecurring_ = other.isRecurring_;
    startSecond_ = other.startSecond_;
    endSecond_ = other.endSecond_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoHoliday Clone() {
    return new ProtoHoliday(this);
  }

  /// <summary>Field number for the "holidayId" field.</summary>
  public const int HolidayIdFieldNumber = 1;
  private readonly static long HolidayIdDefaultValue = 0L;

  private long holidayId_;
  /// <summary>
  /// ID of Holiday
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long HolidayId {
    get { if ((_hasBits0 & 1) != 0) { return holidayId_; } else { return HolidayIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      holidayId_ = value;
    }
  }
  /// <summary>Gets whether the "holidayId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHolidayId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "holidayId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHolidayId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Holiday
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of the Holiday
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "scheduleTimeZone" field.</summary>
  public const int ScheduleTimeZoneFieldNumber = 4;
  private readonly static string ScheduleTimeZoneDefaultValue = "";

  private string scheduleTimeZone_;
  /// <summary>
  /// Timezone of the Holiday
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ScheduleTimeZone {
    get { return scheduleTimeZone_ ?? ScheduleTimeZoneDefaultValue; }
    set {
      scheduleTimeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "scheduleTimeZone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScheduleTimeZone {
    get { return scheduleTimeZone_ != null; }
  }
  /// <summary>Clears the value of the "scheduleTimeZone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScheduleTimeZone() {
    scheduleTimeZone_ = null;
  }

  /// <summary>Field number for the "holidayDate" field.</summary>
  public const int HolidayDateFieldNumber = 5;
  private readonly static long HolidayDateDefaultValue = 0L;

  private long holidayDate_;
  /// <summary>
  /// Holiday date. EpochMillis / 86400000 (ms * sec * min * hours)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long HolidayDate {
    get { if ((_hasBits0 & 2) != 0) { return holidayDate_; } else { return HolidayDateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      holidayDate_ = value;
    }
  }
  /// <summary>Gets whether the "holidayDate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHolidayDate {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "holidayDate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHolidayDate() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "isRecurring" field.</summary>
  public const int IsRecurringFieldNumber = 6;
  private readonly static bool IsRecurringDefaultValue = false;

  private bool isRecurring_;
  /// <summary>
  /// If TRUE then Holiday's date considered as annual event at the same date, so year is not important anymore
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsRecurring {
    get { if ((_hasBits0 & 4) != 0) { return isRecurring_; } else { return IsRecurringDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isRecurring_ = value;
    }
  }
  /// <summary>Gets whether the "isRecurring" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsRecurring {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "isRecurring" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsRecurring() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "startSecond" field.</summary>
  public const int StartSecondFieldNumber = 7;
  private readonly static int StartSecondDefaultValue = 0;

  private int startSecond_;
  /// <summary>
  /// Amount of seconds from 00:00:00 of the Holiday day when Holiday actually starts
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int StartSecond {
    get { if ((_hasBits0 & 8) != 0) { return startSecond_; } else { return StartSecondDefaultValue; } }
    set {
      _hasBits0 |= 8;
      startSecond_ = value;
    }
  }
  /// <summary>Gets whether the "startSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartSecond {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "startSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartSecond() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "endSecond" field.</summary>
  public const int EndSecondFieldNumber = 8;
  private readonly static int EndSecondDefaultValue = 0;

  private int endSecond_;
  /// <summary>
  /// Amount of seconds from 00:00:00 of the Holiday day when Holiday actually finished
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int EndSecond {
    get { if ((_hasBits0 & 16) != 0) { return endSecond_; } else { return EndSecondDefaultValue; } }
    set {
      _hasBits0 |= 16;
      endSecond_ = value;
    }
  }
  /// <summary>Gets whether the "endSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEndSecond {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "endSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEndSecond() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoHoliday);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoHoliday other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HolidayId != other.HolidayId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (ScheduleTimeZone != other.ScheduleTimeZone) return false;
    if (HolidayDate != other.HolidayDate) return false;
    if (IsRecurring != other.IsRecurring) return false;
    if (StartSecond != other.StartSecond) return false;
    if (EndSecond != other.EndSecond) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasHolidayId) hash ^= HolidayId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasScheduleTimeZone) hash ^= ScheduleTimeZone.GetHashCode();
    if (HasHolidayDate) hash ^= HolidayDate.GetHashCode();
    if (HasIsRecurring) hash ^= IsRecurring.GetHashCode();
    if (HasStartSecond) hash ^= StartSecond.GetHashCode();
    if (HasEndSecond) hash ^= EndSecond.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasHolidayId) {
      output.WriteRawTag(8);
      output.WriteInt64(HolidayId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(34);
      output.WriteString(ScheduleTimeZone);
    }
    if (HasHolidayDate) {
      output.WriteRawTag(40);
      output.WriteInt64(HolidayDate);
    }
    if (HasIsRecurring) {
      output.WriteRawTag(48);
      output.WriteBool(IsRecurring);
    }
    if (HasStartSecond) {
      output.WriteRawTag(56);
      output.WriteInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(64);
      output.WriteInt32(EndSecond);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasHolidayId) {
      output.WriteRawTag(8);
      output.WriteInt64(HolidayId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(34);
      output.WriteString(ScheduleTimeZone);
    }
    if (HasHolidayDate) {
      output.WriteRawTag(40);
      output.WriteInt64(HolidayDate);
    }
    if (HasIsRecurring) {
      output.WriteRawTag(48);
      output.WriteBool(IsRecurring);
    }
    if (HasStartSecond) {
      output.WriteRawTag(56);
      output.WriteInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(64);
      output.WriteInt32(EndSecond);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasHolidayId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(HolidayId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasScheduleTimeZone) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ScheduleTimeZone);
    }
    if (HasHolidayDate) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(HolidayDate);
    }
    if (HasIsRecurring) {
      size += 1 + 1;
    }
    if (HasStartSecond) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartSecond);
    }
    if (HasEndSecond) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndSecond);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoHoliday other) {
    if (other == null) {
      return;
    }
    if (other.HasHolidayId) {
      HolidayId = other.HolidayId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasScheduleTimeZone) {
      ScheduleTimeZone = other.ScheduleTimeZone;
    }
    if (other.HasHolidayDate) {
      HolidayDate = other.HolidayDate;
    }
    if (other.HasIsRecurring) {
      IsRecurring = other.IsRecurring;
    }
    if (other.HasStartSecond) {
      StartSecond = other.StartSecond;
    }
    if (other.HasEndSecond) {
      EndSecond = other.EndSecond;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          HolidayId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 40: {
          HolidayDate = input.ReadInt64();
          break;
        }
        case 48: {
          IsRecurring = input.ReadBool();
          break;
        }
        case 56: {
          StartSecond = input.ReadInt32();
          break;
        }
        case 64: {
          EndSecond = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          HolidayId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 40: {
          HolidayDate = input.ReadInt64();
          break;
        }
        case 48: {
          IsRecurring = input.ReadBool();
          break;
        }
        case 56: {
          StartSecond = input.ReadInt32();
          break;
        }
        case 64: {
          EndSecond = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Holiday Profile - profile with set of Holidays
/// </summary>
public sealed partial class ProtoHolidayProfile : pb::IMessage<ProtoHolidayProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoHolidayProfile> _parser = new pb::MessageParser<ProtoHolidayProfile>(() => new ProtoHolidayProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoHolidayProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoHolidayProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoHolidayProfile(ProtoHolidayProfile other) : this() {
    _hasBits0 = other._hasBits0;
    holidayProfileId_ = other.holidayProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    holidayId_ = other.holidayId_.Clone();
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoHolidayProfile Clone() {
    return new ProtoHolidayProfile(this);
  }

  /// <summary>Field number for the "holidayProfileId" field.</summary>
  public const int HolidayProfileIdFieldNumber = 1;
  private readonly static long HolidayProfileIdDefaultValue = 0L;

  private long holidayProfileId_;
  /// <summary>
  /// ID of Holiday Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long HolidayProfileId {
    get { if ((_hasBits0 & 1) != 0) { return holidayProfileId_; } else { return HolidayProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      holidayProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "holidayProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHolidayProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "holidayProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHolidayProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of the Holiday Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of the Holiday Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "holidayId" field.</summary>
  public const int HolidayIdFieldNumber = 4;
  private static readonly pb::FieldCodec<long> _repeated_holidayId_codec
      = pb::FieldCodec.ForInt64(34);
  private readonly pbc::RepeatedField<long> holidayId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// List of IDs of Holidays
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<long> HolidayId {
    get { return holidayId_; }
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 5;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Profile was last updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 2) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoHolidayProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoHolidayProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HolidayProfileId != other.HolidayProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if(!holidayId_.Equals(other.holidayId_)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasHolidayProfileId) hash ^= HolidayProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    hash ^= holidayId_.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasHolidayProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(HolidayProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    holidayId_.WriteTo(output, _repeated_holidayId_codec);
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasHolidayProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(HolidayProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    holidayId_.WriteTo(ref output, _repeated_holidayId_codec);
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasHolidayProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(HolidayProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    size += holidayId_.CalculateSize(_repeated_holidayId_codec);
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoHolidayProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasHolidayProfileId) {
      HolidayProfileId = other.HolidayProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    holidayId_.Add(other.holidayId_);
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          HolidayProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34:
        case 32: {
          holidayId_.AddEntriesFrom(input, _repeated_holidayId_codec);
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          HolidayProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34:
        case 32: {
          holidayId_.AddEntriesFrom(ref input, _repeated_holidayId_codec);
          break;
        }
        case 40: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Swap and Dividends settings for symbol
/// </summary>
public sealed partial class ProtoSwapAndDividendSymbol : pb::IMessage<ProtoSwapAndDividendSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoSwapAndDividendSymbol> _parser = new pb::MessageParser<ProtoSwapAndDividendSymbol>(() => new ProtoSwapAndDividendSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoSwapAndDividendSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapAndDividendSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapAndDividendSymbol(ProtoSwapAndDividendSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    swapRollover3Days_ = other.swapRollover3Days_;
    swapLong_ = other.swapLong_;
    swapShort_ = other.swapShort_;
    swapCalculationType_ = other.swapCalculationType_;
    dividendsLong_ = other.dividendsLong_;
    dividendsShort_ = other.dividendsShort_;
    dividendTime_ = other.dividendTime_;
    swapTime_ = other.swapTime_;
    swapPeriod_ = other.swapPeriod_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapAndDividendSymbol Clone() {
    return new ProtoSwapAndDividendSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Symbol ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "swapRollover3Days" field.</summary>
  public const int SwapRollover3DaysFieldNumber = 2;
  private readonly static global::ProtoDayOfWeek SwapRollover3DaysDefaultValue = global::ProtoDayOfWeek.Monday;

  private global::ProtoDayOfWeek swapRollover3Days_;
  /// <summary>
  /// Day of the week when SWAP charge amount will be tripled. Doesn't impact Rollover Commission. If unspecified, default parameter from Symbol is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoDayOfWeek SwapRollover3Days {
    get { if ((_hasBits0 & 2) != 0) { return swapRollover3Days_; } else { return SwapRollover3DaysDefaultValue; } }
    set {
      _hasBits0 |= 2;
      swapRollover3Days_ = value;
    }
  }
  /// <summary>Gets whether the "swapRollover3Days" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapRollover3Days {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "swapRollover3Days" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapRollover3Days() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "swapLong" field.</summary>
  public const int SwapLongFieldNumber = 3;
  private readonly static double SwapLongDefaultValue = 0D;

  private double swapLong_;
  /// <summary>
  /// SWAP value for long Positions If unspecified, default parameter from Symbol is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SwapLong {
    get { if ((_hasBits0 & 4) != 0) { return swapLong_; } else { return SwapLongDefaultValue; } }
    set {
      _hasBits0 |= 4;
      swapLong_ = value;
    }
  }
  /// <summary>Gets whether the "swapLong" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapLong {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "swapLong" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapLong() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "swapShort" field.</summary>
  public const int SwapShortFieldNumber = 4;
  private readonly static double SwapShortDefaultValue = 0D;

  private double swapShort_;
  /// <summary>
  /// SWAP value for short Positions If unspecified, default parameter from Symbol is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SwapShort {
    get { if ((_hasBits0 & 8) != 0) { return swapShort_; } else { return SwapShortDefaultValue; } }
    set {
      _hasBits0 |= 8;
      swapShort_ = value;
    }
  }
  /// <summary>Gets whether the "swapShort" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapShort {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "swapShort" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapShort() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "swapCalculationType" field.</summary>
  public const int SwapCalculationTypeFieldNumber = 5;
  private readonly static global::ProtoSwapCalculationType SwapCalculationTypeDefaultValue = global::ProtoSwapCalculationType.Pips;

  private global::ProtoSwapCalculationType swapCalculationType_;
  /// <summary>
  /// Specifies type of SWAP computation as PIPS (0) or PERCENTAGE (1, annual, in percent). If unspecified, default parameter from Symbol is used Default: PIPS
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoSwapCalculationType SwapCalculationType {
    get { if ((_hasBits0 & 16) != 0) { return swapCalculationType_; } else { return SwapCalculationTypeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      swapCalculationType_ = value;
    }
  }
  /// <summary>Gets whether the "swapCalculationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapCalculationType {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "swapCalculationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapCalculationType() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "dividendsLong" field.</summary>
  public const int DividendsLongFieldNumber = 6;
  private readonly static long DividendsLongDefaultValue = 0L;

  private long dividendsLong_;
  /// <summary>
  /// Amount of dividends for Long Positions. If unspecified, default parameter from Symbol is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DividendsLong {
    get { if ((_hasBits0 & 32) != 0) { return dividendsLong_; } else { return DividendsLongDefaultValue; } }
    set {
      _hasBits0 |= 32;
      dividendsLong_ = value;
    }
  }
  /// <summary>Gets whether the "dividendsLong" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDividendsLong {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "dividendsLong" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDividendsLong() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "dividendsShort" field.</summary>
  public const int DividendsShortFieldNumber = 7;
  private readonly static long DividendsShortDefaultValue = 0L;

  private long dividendsShort_;
  /// <summary>
  /// Amount of dividends for Short positions. If unspecified, default parameter from Symbol is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DividendsShort {
    get { if ((_hasBits0 & 64) != 0) { return dividendsShort_; } else { return DividendsShortDefaultValue; } }
    set {
      _hasBits0 |= 64;
      dividendsShort_ = value;
    }
  }
  /// <summary>Gets whether the "dividendsShort" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDividendsShort {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "dividendsShort" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDividendsShort() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "dividendTime" field.</summary>
  public const int DividendTimeFieldNumber = 8;
  private readonly static long DividendTimeDefaultValue = 0L;

  private long dividendTime_;
  /// <summary>
  /// UNIX timestamp in milliseconds of charging dividends
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DividendTime {
    get { if ((_hasBits0 & 128) != 0) { return dividendTime_; } else { return DividendTimeDefaultValue; } }
    set {
      _hasBits0 |= 128;
      dividendTime_ = value;
    }
  }
  /// <summary>Gets whether the "dividendTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDividendTime {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "dividendTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDividendTime() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "swapTime" field.</summary>
  public const int SwapTimeFieldNumber = 9;
  private readonly static int SwapTimeDefaultValue = 0;

  private int swapTime_;
  /// <summary>
  /// Time from which Swap Period is calculated, in minutes from 00:00. If unspecified, default parameter from Symbol is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SwapTime {
    get { if ((_hasBits0 & 256) != 0) { return swapTime_; } else { return SwapTimeDefaultValue; } }
    set {
      _hasBits0 |= 256;
      swapTime_ = value;
    }
  }
  /// <summary>Gets whether the "swapTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapTime {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "swapTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapTime() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "swapPeriod" field.</summary>
  public const int SwapPeriodFieldNumber = 10;
  private readonly static int SwapPeriodDefaultValue = 0;

  private int swapPeriod_;
  /// <summary>
  /// SWAP is calculated every Swap Period (in hours). If unspecified, default parameter from Symbol is used
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SwapPeriod {
    get { if ((_hasBits0 & 512) != 0) { return swapPeriod_; } else { return SwapPeriodDefaultValue; } }
    set {
      _hasBits0 |= 512;
      swapPeriod_ = value;
    }
  }
  /// <summary>Gets whether the "swapPeriod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapPeriod {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "swapPeriod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapPeriod() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoSwapAndDividendSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoSwapAndDividendSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (SwapRollover3Days != other.SwapRollover3Days) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SwapLong, other.SwapLong)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SwapShort, other.SwapShort)) return false;
    if (SwapCalculationType != other.SwapCalculationType) return false;
    if (DividendsLong != other.DividendsLong) return false;
    if (DividendsShort != other.DividendsShort) return false;
    if (DividendTime != other.DividendTime) return false;
    if (SwapTime != other.SwapTime) return false;
    if (SwapPeriod != other.SwapPeriod) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasSwapRollover3Days) hash ^= SwapRollover3Days.GetHashCode();
    if (HasSwapLong) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SwapLong);
    if (HasSwapShort) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SwapShort);
    if (HasSwapCalculationType) hash ^= SwapCalculationType.GetHashCode();
    if (HasDividendsLong) hash ^= DividendsLong.GetHashCode();
    if (HasDividendsShort) hash ^= DividendsShort.GetHashCode();
    if (HasDividendTime) hash ^= DividendTime.GetHashCode();
    if (HasSwapTime) hash ^= SwapTime.GetHashCode();
    if (HasSwapPeriod) hash ^= SwapPeriod.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasSwapRollover3Days) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SwapRollover3Days);
    }
    if (HasSwapLong) {
      output.WriteRawTag(25);
      output.WriteDouble(SwapLong);
    }
    if (HasSwapShort) {
      output.WriteRawTag(33);
      output.WriteDouble(SwapShort);
    }
    if (HasSwapCalculationType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) SwapCalculationType);
    }
    if (HasDividendsLong) {
      output.WriteRawTag(48);
      output.WriteInt64(DividendsLong);
    }
    if (HasDividendsShort) {
      output.WriteRawTag(56);
      output.WriteInt64(DividendsShort);
    }
    if (HasDividendTime) {
      output.WriteRawTag(64);
      output.WriteInt64(DividendTime);
    }
    if (HasSwapTime) {
      output.WriteRawTag(72);
      output.WriteInt32(SwapTime);
    }
    if (HasSwapPeriod) {
      output.WriteRawTag(80);
      output.WriteInt32(SwapPeriod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasSwapRollover3Days) {
      output.WriteRawTag(16);
      output.WriteEnum((int) SwapRollover3Days);
    }
    if (HasSwapLong) {
      output.WriteRawTag(25);
      output.WriteDouble(SwapLong);
    }
    if (HasSwapShort) {
      output.WriteRawTag(33);
      output.WriteDouble(SwapShort);
    }
    if (HasSwapCalculationType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) SwapCalculationType);
    }
    if (HasDividendsLong) {
      output.WriteRawTag(48);
      output.WriteInt64(DividendsLong);
    }
    if (HasDividendsShort) {
      output.WriteRawTag(56);
      output.WriteInt64(DividendsShort);
    }
    if (HasDividendTime) {
      output.WriteRawTag(64);
      output.WriteInt64(DividendTime);
    }
    if (HasSwapTime) {
      output.WriteRawTag(72);
      output.WriteInt32(SwapTime);
    }
    if (HasSwapPeriod) {
      output.WriteRawTag(80);
      output.WriteInt32(SwapPeriod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasSwapRollover3Days) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwapRollover3Days);
    }
    if (HasSwapLong) {
      size += 1 + 8;
    }
    if (HasSwapShort) {
      size += 1 + 8;
    }
    if (HasSwapCalculationType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwapCalculationType);
    }
    if (HasDividendsLong) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DividendsLong);
    }
    if (HasDividendsShort) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DividendsShort);
    }
    if (HasDividendTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DividendTime);
    }
    if (HasSwapTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SwapTime);
    }
    if (HasSwapPeriod) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SwapPeriod);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoSwapAndDividendSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasSwapRollover3Days) {
      SwapRollover3Days = other.SwapRollover3Days;
    }
    if (other.HasSwapLong) {
      SwapLong = other.SwapLong;
    }
    if (other.HasSwapShort) {
      SwapShort = other.SwapShort;
    }
    if (other.HasSwapCalculationType) {
      SwapCalculationType = other.SwapCalculationType;
    }
    if (other.HasDividendsLong) {
      DividendsLong = other.DividendsLong;
    }
    if (other.HasDividendsShort) {
      DividendsShort = other.DividendsShort;
    }
    if (other.HasDividendTime) {
      DividendTime = other.DividendTime;
    }
    if (other.HasSwapTime) {
      SwapTime = other.SwapTime;
    }
    if (other.HasSwapPeriod) {
      SwapPeriod = other.SwapPeriod;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          SwapRollover3Days = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 25: {
          SwapLong = input.ReadDouble();
          break;
        }
        case 33: {
          SwapShort = input.ReadDouble();
          break;
        }
        case 40: {
          SwapCalculationType = (global::ProtoSwapCalculationType) input.ReadEnum();
          break;
        }
        case 48: {
          DividendsLong = input.ReadInt64();
          break;
        }
        case 56: {
          DividendsShort = input.ReadInt64();
          break;
        }
        case 64: {
          DividendTime = input.ReadInt64();
          break;
        }
        case 72: {
          SwapTime = input.ReadInt32();
          break;
        }
        case 80: {
          SwapPeriod = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          SwapRollover3Days = (global::ProtoDayOfWeek) input.ReadEnum();
          break;
        }
        case 25: {
          SwapLong = input.ReadDouble();
          break;
        }
        case 33: {
          SwapShort = input.ReadDouble();
          break;
        }
        case 40: {
          SwapCalculationType = (global::ProtoSwapCalculationType) input.ReadEnum();
          break;
        }
        case 48: {
          DividendsLong = input.ReadInt64();
          break;
        }
        case 56: {
          DividendsShort = input.ReadInt64();
          break;
        }
        case 64: {
          DividendTime = input.ReadInt64();
          break;
        }
        case 72: {
          SwapTime = input.ReadInt32();
          break;
        }
        case 80: {
          SwapPeriod = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Swap and Dividends Profile
/// </summary>
public sealed partial class ProtoSwapAndDividendProfile : pb::IMessage<ProtoSwapAndDividendProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoSwapAndDividendProfile> _parser = new pb::MessageParser<ProtoSwapAndDividendProfile>(() => new ProtoSwapAndDividendProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoSwapAndDividendProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapAndDividendProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapAndDividendProfile(ProtoSwapAndDividendProfile other) : this() {
    _hasBits0 = other._hasBits0;
    swapAndDividendProfileId_ = other.swapAndDividendProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    symbol_ = other.symbol_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoSwapAndDividendProfile Clone() {
    return new ProtoSwapAndDividendProfile(this);
  }

  /// <summary>Field number for the "swapAndDividendProfileId" field.</summary>
  public const int SwapAndDividendProfileIdFieldNumber = 1;
  private readonly static long SwapAndDividendProfileIdDefaultValue = 0L;

  private long swapAndDividendProfileId_;
  /// <summary>
  /// Profile ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SwapAndDividendProfileId {
    get { if ((_hasBits0 & 1) != 0) { return swapAndDividendProfileId_; } else { return SwapAndDividendProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      swapAndDividendProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "swapAndDividendProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapAndDividendProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "swapAndDividendProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapAndDividendProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Profile name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Profile description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 4;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of modification time
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 2) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbol" field.</summary>
  public const int SymbolFieldNumber = 5;
  private static readonly pb::FieldCodec<global::ProtoSwapAndDividendSymbol> _repeated_symbol_codec
      = pb::FieldCodec.ForMessage(42, global::ProtoSwapAndDividendSymbol.Parser);
  private readonly pbc::RepeatedField<global::ProtoSwapAndDividendSymbol> symbol_ = new pbc::RepeatedField<global::ProtoSwapAndDividendSymbol>();
  /// <summary>
  /// List of associated Symbols specific settings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoSwapAndDividendSymbol> Symbol {
    get { return symbol_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoSwapAndDividendProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoSwapAndDividendProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwapAndDividendProfileId != other.SwapAndDividendProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if(!symbol_.Equals(other.symbol_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSwapAndDividendProfileId) hash ^= SwapAndDividendProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    hash ^= symbol_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSwapAndDividendProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(SwapAndDividendProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    symbol_.WriteTo(output, _repeated_symbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSwapAndDividendProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(SwapAndDividendProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    symbol_.WriteTo(ref output, _repeated_symbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSwapAndDividendProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwapAndDividendProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    size += symbol_.CalculateSize(_repeated_symbol_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoSwapAndDividendProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasSwapAndDividendProfileId) {
      SwapAndDividendProfileId = other.SwapAndDividendProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    symbol_.Add(other.symbol_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SwapAndDividendProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 42: {
          symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SwapAndDividendProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 42: {
          symbol_.AddEntriesFrom(ref input, _repeated_symbol_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Swap and Dividends Profile (with limited number of fields)
/// </summary>
public sealed partial class ProtoLightSwapAndDividendProfile : pb::IMessage<ProtoLightSwapAndDividendProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoLightSwapAndDividendProfile> _parser = new pb::MessageParser<ProtoLightSwapAndDividendProfile>(() => new ProtoLightSwapAndDividendProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoLightSwapAndDividendProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightSwapAndDividendProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightSwapAndDividendProfile(ProtoLightSwapAndDividendProfile other) : this() {
    _hasBits0 = other._hasBits0;
    swapAndDividendProfileId_ = other.swapAndDividendProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoLightSwapAndDividendProfile Clone() {
    return new ProtoLightSwapAndDividendProfile(this);
  }

  /// <summary>Field number for the "swapAndDividendProfileId" field.</summary>
  public const int SwapAndDividendProfileIdFieldNumber = 1;
  private readonly static long SwapAndDividendProfileIdDefaultValue = 0L;

  private long swapAndDividendProfileId_;
  /// <summary>
  /// Profile ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SwapAndDividendProfileId {
    get { if ((_hasBits0 & 1) != 0) { return swapAndDividendProfileId_; } else { return SwapAndDividendProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      swapAndDividendProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "swapAndDividendProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapAndDividendProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "swapAndDividendProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapAndDividendProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Profile name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Profile description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoLightSwapAndDividendProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoLightSwapAndDividendProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwapAndDividendProfileId != other.SwapAndDividendProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSwapAndDividendProfileId) hash ^= SwapAndDividendProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSwapAndDividendProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(SwapAndDividendProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSwapAndDividendProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(SwapAndDividendProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSwapAndDividendProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwapAndDividendProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoLightSwapAndDividendProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasSwapAndDividendProfileId) {
      SwapAndDividendProfileId = other.SwapAndDividendProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SwapAndDividendProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SwapAndDividendProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Futures settings
/// </summary>
public sealed partial class ProtoFuturesSettings : pb::IMessage<ProtoFuturesSettings>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoFuturesSettings> _parser = new pb::MessageParser<ProtoFuturesSettings>(() => new ProtoFuturesSettings());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoFuturesSettings> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoFuturesSettings() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoFuturesSettings(ProtoFuturesSettings other) : this() {
    _hasBits0 = other._hasBits0;
    datesTimeZone_ = other.datesTimeZone_;
    lastTradeTimestampInMinutes_ = other.lastTradeTimestampInMinutes_;
    expirationTimestampInMinutes_ = other.expirationTimestampInMinutes_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoFuturesSettings Clone() {
    return new ProtoFuturesSettings(this);
  }

  /// <summary>Field number for the "datesTimeZone" field.</summary>
  public const int DatesTimeZoneFieldNumber = 1;
  private readonly static string DatesTimeZoneDefaultValue = "";

  private string datesTimeZone_;
  /// <summary>
  /// Time zone for parameters lastTradeTimestampInMinutes and expirationTimestampInMinutes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DatesTimeZone {
    get { return datesTimeZone_ ?? DatesTimeZoneDefaultValue; }
    set {
      datesTimeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "datesTimeZone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDatesTimeZone {
    get { return datesTimeZone_ != null; }
  }
  /// <summary>Clears the value of the "datesTimeZone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDatesTimeZone() {
    datesTimeZone_ = null;
  }

  /// <summary>Field number for the "lastTradeTimestampInMinutes" field.</summary>
  public const int LastTradeTimestampInMinutesFieldNumber = 2;
  private readonly static uint LastTradeTimestampInMinutesDefaultValue = 0;

  private uint lastTradeTimestampInMinutes_;
  /// <summary>
  /// Amount of minutes passed since 01.01.1970 00:00 at specified datesTimeZone (for UTC+5 01:23 3rd July 2021 would be 27087923, so as for UTC+2) of the last Trade (Positions can not be opened after this time, trading mode will be CLOSE_ONLY). For example zone is UTC+2 and value is 27519286, then trigger will happen at 27519406 UTC+0 (120 minutes less)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LastTradeTimestampInMinutes {
    get { if ((_hasBits0 & 1) != 0) { return lastTradeTimestampInMinutes_; } else { return LastTradeTimestampInMinutesDefaultValue; } }
    set {
      _hasBits0 |= 1;
      lastTradeTimestampInMinutes_ = value;
    }
  }
  /// <summary>Gets whether the "lastTradeTimestampInMinutes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastTradeTimestampInMinutes {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "lastTradeTimestampInMinutes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastTradeTimestampInMinutes() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "expirationTimestampInMinutes" field.</summary>
  public const int ExpirationTimestampInMinutesFieldNumber = 3;
  private readonly static uint ExpirationTimestampInMinutesDefaultValue = 0;

  private uint expirationTimestampInMinutes_;
  /// <summary>
  /// Amount of minutes passed since 01.01.1970 00:00 at specified datesTimeZone (for UTC+5 01:23 3rd July 2021 would be 27087923, so as for UTC+2) of the future expiration (trading will be disabled, Positions closed, Orders cancelled, trading mode will be FULLY_DISABLED). For example zone is UTC+2 and value is 27519286, then trigger will happen at 27519406 UTC+0 (120 minutes less)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ExpirationTimestampInMinutes {
    get { if ((_hasBits0 & 2) != 0) { return expirationTimestampInMinutes_; } else { return ExpirationTimestampInMinutesDefaultValue; } }
    set {
      _hasBits0 |= 2;
      expirationTimestampInMinutes_ = value;
    }
  }
  /// <summary>Gets whether the "expirationTimestampInMinutes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExpirationTimestampInMinutes {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "expirationTimestampInMinutes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExpirationTimestampInMinutes() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoFuturesSettings);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoFuturesSettings other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DatesTimeZone != other.DatesTimeZone) return false;
    if (LastTradeTimestampInMinutes != other.LastTradeTimestampInMinutes) return false;
    if (ExpirationTimestampInMinutes != other.ExpirationTimestampInMinutes) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDatesTimeZone) hash ^= DatesTimeZone.GetHashCode();
    if (HasLastTradeTimestampInMinutes) hash ^= LastTradeTimestampInMinutes.GetHashCode();
    if (HasExpirationTimestampInMinutes) hash ^= ExpirationTimestampInMinutes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDatesTimeZone) {
      output.WriteRawTag(10);
      output.WriteString(DatesTimeZone);
    }
    if (HasLastTradeTimestampInMinutes) {
      output.WriteRawTag(16);
      output.WriteUInt32(LastTradeTimestampInMinutes);
    }
    if (HasExpirationTimestampInMinutes) {
      output.WriteRawTag(24);
      output.WriteUInt32(ExpirationTimestampInMinutes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDatesTimeZone) {
      output.WriteRawTag(10);
      output.WriteString(DatesTimeZone);
    }
    if (HasLastTradeTimestampInMinutes) {
      output.WriteRawTag(16);
      output.WriteUInt32(LastTradeTimestampInMinutes);
    }
    if (HasExpirationTimestampInMinutes) {
      output.WriteRawTag(24);
      output.WriteUInt32(ExpirationTimestampInMinutes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDatesTimeZone) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DatesTimeZone);
    }
    if (HasLastTradeTimestampInMinutes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTradeTimestampInMinutes);
    }
    if (HasExpirationTimestampInMinutes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpirationTimestampInMinutes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoFuturesSettings other) {
    if (other == null) {
      return;
    }
    if (other.HasDatesTimeZone) {
      DatesTimeZone = other.DatesTimeZone;
    }
    if (other.HasLastTradeTimestampInMinutes) {
      LastTradeTimestampInMinutes = other.LastTradeTimestampInMinutes;
    }
    if (other.HasExpirationTimestampInMinutes) {
      ExpirationTimestampInMinutes = other.ExpirationTimestampInMinutes;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DatesTimeZone = input.ReadString();
          break;
        }
        case 16: {
          LastTradeTimestampInMinutes = input.ReadUInt32();
          break;
        }
        case 24: {
          ExpirationTimestampInMinutes = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          DatesTimeZone = input.ReadString();
          break;
        }
        case 16: {
          LastTradeTimestampInMinutes = input.ReadUInt32();
          break;
        }
        case 24: {
          ExpirationTimestampInMinutes = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Introducing Broker default commissions per Symbol Category
/// </summary>
public sealed partial class ProtoIbCommissionSymbolCategory : pb::IMessage<ProtoIbCommissionSymbolCategory>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoIbCommissionSymbolCategory> _parser = new pb::MessageParser<ProtoIbCommissionSymbolCategory>(() => new ProtoIbCommissionSymbolCategory());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoIbCommissionSymbolCategory> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoIbCommissionSymbolCategory() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoIbCommissionSymbolCategory(ProtoIbCommissionSymbolCategory other) : this() {
    _hasBits0 = other._hasBits0;
    symbolCategoryId_ = other.symbolCategoryId_;
    introducingBrokerCommissionRate_ = other.introducingBrokerCommissionRate_;
    pocketCommissionRate_ = other.pocketCommissionRate_;
    pocketMarkupRate_ = other.pocketMarkupRate_;
    ibCommissionsType_ = other.ibCommissionsType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoIbCommissionSymbolCategory Clone() {
    return new ProtoIbCommissionSymbolCategory(this);
  }

  /// <summary>Field number for the "symbolCategoryId" field.</summary>
  public const int SymbolCategoryIdFieldNumber = 1;
  private readonly static long SymbolCategoryIdDefaultValue = 0L;

  private long symbolCategoryId_;
  /// <summary>
  /// ID of Symbol Category
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolCategoryId {
    get { if ((_hasBits0 & 1) != 0) { return symbolCategoryId_; } else { return SymbolCategoryIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolCategoryId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolCategoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolCategoryId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolCategoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolCategoryId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "introducingBrokerCommissionRate" field.</summary>
  public const int IntroducingBrokerCommissionRateFieldNumber = 2;
  private readonly static int IntroducingBrokerCommissionRateDefaultValue = 0;

  private int introducingBrokerCommissionRate_;
  /// <summary>
  /// Commission rate of IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int IntroducingBrokerCommissionRate {
    get { if ((_hasBits0 & 2) != 0) { return introducingBrokerCommissionRate_; } else { return IntroducingBrokerCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      introducingBrokerCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerCommissionRate {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerCommissionRate() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "pocketCommissionRate" field.</summary>
  public const int PocketCommissionRateFieldNumber = 3;
  private readonly static int PocketCommissionRateDefaultValue = 0;

  private int pocketCommissionRate_;
  /// <summary>
  /// Commission rate which Broker will pay to IB for the Deal of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PocketCommissionRate {
    get { if ((_hasBits0 & 4) != 0) { return pocketCommissionRate_; } else { return PocketCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 4;
      pocketCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "pocketCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketCommissionRate {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "pocketCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketCommissionRate() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "pocketMarkupRate" field.</summary>
  public const int PocketMarkupRateFieldNumber = 4;
  private readonly static int PocketMarkupRateDefaultValue = 0;

  private int pocketMarkupRate_;
  /// <summary>
  /// Markup which Broker will pay to IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PocketMarkupRate {
    get { if ((_hasBits0 & 8) != 0) { return pocketMarkupRate_; } else { return PocketMarkupRateDefaultValue; } }
    set {
      _hasBits0 |= 8;
      pocketMarkupRate_ = value;
    }
  }
  /// <summary>Gets whether the "pocketMarkupRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPocketMarkupRate {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "pocketMarkupRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPocketMarkupRate() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ibCommissionsType" field.</summary>
  public const int IbCommissionsTypeFieldNumber = 5;
  private readonly static global::ProtoCommissionType IbCommissionsTypeDefaultValue = global::ProtoCommissionType.UsdPerMillionUsd;

  private global::ProtoCommissionType ibCommissionsType_;
  /// <summary>
  /// Default Commission Type for IB
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoCommissionType IbCommissionsType {
    get { if ((_hasBits0 & 16) != 0) { return ibCommissionsType_; } else { return IbCommissionsTypeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      ibCommissionsType_ = value;
    }
  }
  /// <summary>Gets whether the "ibCommissionsType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbCommissionsType {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ibCommissionsType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbCommissionsType() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoIbCommissionSymbolCategory);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoIbCommissionSymbolCategory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolCategoryId != other.SymbolCategoryId) return false;
    if (IntroducingBrokerCommissionRate != other.IntroducingBrokerCommissionRate) return false;
    if (PocketCommissionRate != other.PocketCommissionRate) return false;
    if (PocketMarkupRate != other.PocketMarkupRate) return false;
    if (IbCommissionsType != other.IbCommissionsType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolCategoryId) hash ^= SymbolCategoryId.GetHashCode();
    if (HasIntroducingBrokerCommissionRate) hash ^= IntroducingBrokerCommissionRate.GetHashCode();
    if (HasPocketCommissionRate) hash ^= PocketCommissionRate.GetHashCode();
    if (HasPocketMarkupRate) hash ^= PocketMarkupRate.GetHashCode();
    if (HasIbCommissionsType) hash ^= IbCommissionsType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolCategoryId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasIntroducingBrokerCommissionRate) {
      output.WriteRawTag(16);
      output.WriteInt32(IntroducingBrokerCommissionRate);
    }
    if (HasPocketCommissionRate) {
      output.WriteRawTag(24);
      output.WriteInt32(PocketCommissionRate);
    }
    if (HasPocketMarkupRate) {
      output.WriteRawTag(32);
      output.WriteInt32(PocketMarkupRate);
    }
    if (HasIbCommissionsType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) IbCommissionsType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolCategoryId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasIntroducingBrokerCommissionRate) {
      output.WriteRawTag(16);
      output.WriteInt32(IntroducingBrokerCommissionRate);
    }
    if (HasPocketCommissionRate) {
      output.WriteRawTag(24);
      output.WriteInt32(PocketCommissionRate);
    }
    if (HasPocketMarkupRate) {
      output.WriteRawTag(32);
      output.WriteInt32(PocketMarkupRate);
    }
    if (HasIbCommissionsType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) IbCommissionsType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolCategoryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolCategoryId);
    }
    if (HasIntroducingBrokerCommissionRate) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntroducingBrokerCommissionRate);
    }
    if (HasPocketCommissionRate) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PocketCommissionRate);
    }
    if (HasPocketMarkupRate) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PocketMarkupRate);
    }
    if (HasIbCommissionsType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IbCommissionsType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoIbCommissionSymbolCategory other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolCategoryId) {
      SymbolCategoryId = other.SymbolCategoryId;
    }
    if (other.HasIntroducingBrokerCommissionRate) {
      IntroducingBrokerCommissionRate = other.IntroducingBrokerCommissionRate;
    }
    if (other.HasPocketCommissionRate) {
      PocketCommissionRate = other.PocketCommissionRate;
    }
    if (other.HasPocketMarkupRate) {
      PocketMarkupRate = other.PocketMarkupRate;
    }
    if (other.HasIbCommissionsType) {
      IbCommissionsType = other.IbCommissionsType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 16: {
          IntroducingBrokerCommissionRate = input.ReadInt32();
          break;
        }
        case 24: {
          PocketCommissionRate = input.ReadInt32();
          break;
        }
        case 32: {
          PocketMarkupRate = input.ReadInt32();
          break;
        }
        case 40: {
          IbCommissionsType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 16: {
          IntroducingBrokerCommissionRate = input.ReadInt32();
          break;
        }
        case 24: {
          PocketCommissionRate = input.ReadInt32();
          break;
        }
        case 32: {
          PocketMarkupRate = input.ReadInt32();
          break;
        }
        case 40: {
          IbCommissionsType = (global::ProtoCommissionType) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Trade Notification Profile (notification of big volume trades)
/// </summary>
public sealed partial class ProtoTradeNotificationProfile : pb::IMessage<ProtoTradeNotificationProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoTradeNotificationProfile> _parser = new pb::MessageParser<ProtoTradeNotificationProfile>(() => new ProtoTradeNotificationProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoTradeNotificationProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTradeNotificationProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTradeNotificationProfile(ProtoTradeNotificationProfile other) : this() {
    _hasBits0 = other._hasBits0;
    tradeNotificationProfileId_ = other.tradeNotificationProfileId_;
    name_ = other.name_;
    description_ = other.description_;
    bookType_ = other.bookType_;
    notifyAtCbroker_ = other.notifyAtCbroker_;
    notifyAtEmail_ = other.notifyAtEmail_;
    usdVolumeCbroker_ = other.usdVolumeCbroker_;
    usdVolumeEmail_ = other.usdVolumeEmail_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    emails_ = other.emails_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoTradeNotificationProfile Clone() {
    return new ProtoTradeNotificationProfile(this);
  }

  /// <summary>Field number for the "tradeNotificationProfileId" field.</summary>
  public const int TradeNotificationProfileIdFieldNumber = 1;
  private readonly static long TradeNotificationProfileIdDefaultValue = 0L;

  private long tradeNotificationProfileId_;
  /// <summary>
  /// Profile ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TradeNotificationProfileId {
    get { if ((_hasBits0 & 1) != 0) { return tradeNotificationProfileId_; } else { return TradeNotificationProfileIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      tradeNotificationProfileId_ = value;
    }
  }
  /// <summary>Gets whether the "tradeNotificationProfileId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeNotificationProfileId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "tradeNotificationProfileId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeNotificationProfileId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Profile name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Profile description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "bookType" field.</summary>
  public const int BookTypeFieldNumber = 4;
  private readonly static global::ProtoBookRequestType BookTypeDefaultValue = global::ProtoBookRequestType.AllBooksRequest;

  private global::ProtoBookRequestType bookType_;
  /// <summary>
  /// Book type for which Profile is applied
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoBookRequestType BookType {
    get { if ((_hasBits0 & 2) != 0) { return bookType_; } else { return BookTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      bookType_ = value;
    }
  }
  /// <summary>Gets whether the "bookType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBookType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "bookType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBookType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "notifyAtCbroker" field.</summary>
  public const int NotifyAtCbrokerFieldNumber = 5;
  private readonly static bool NotifyAtCbrokerDefaultValue = false;

  private bool notifyAtCbroker_;
  /// <summary>
  /// If TRUE then notification is displayed in cBroker application
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NotifyAtCbroker {
    get { if ((_hasBits0 & 4) != 0) { return notifyAtCbroker_; } else { return NotifyAtCbrokerDefaultValue; } }
    set {
      _hasBits0 |= 4;
      notifyAtCbroker_ = value;
    }
  }
  /// <summary>Gets whether the "notifyAtCbroker" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNotifyAtCbroker {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "notifyAtCbroker" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNotifyAtCbroker() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "notifyAtEmail" field.</summary>
  public const int NotifyAtEmailFieldNumber = 6;
  private readonly static bool NotifyAtEmailDefaultValue = false;

  private bool notifyAtEmail_;
  /// <summary>
  /// If TRUE then Manager is notified by email
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NotifyAtEmail {
    get { if ((_hasBits0 & 8) != 0) { return notifyAtEmail_; } else { return NotifyAtEmailDefaultValue; } }
    set {
      _hasBits0 |= 8;
      notifyAtEmail_ = value;
    }
  }
  /// <summary>Gets whether the "notifyAtEmail" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNotifyAtEmail {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "notifyAtEmail" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNotifyAtEmail() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "usdVolumeCbroker" field.</summary>
  public const int UsdVolumeCbrokerFieldNumber = 7;
  private readonly static long UsdVolumeCbrokerDefaultValue = 0L;

  private long usdVolumeCbroker_;
  /// <summary>
  /// Volume threshold for notification in cBroker
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UsdVolumeCbroker {
    get { if ((_hasBits0 & 16) != 0) { return usdVolumeCbroker_; } else { return UsdVolumeCbrokerDefaultValue; } }
    set {
      _hasBits0 |= 16;
      usdVolumeCbroker_ = value;
    }
  }
  /// <summary>Gets whether the "usdVolumeCbroker" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUsdVolumeCbroker {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "usdVolumeCbroker" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUsdVolumeCbroker() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "usdVolumeEmail" field.</summary>
  public const int UsdVolumeEmailFieldNumber = 8;
  private readonly static long UsdVolumeEmailDefaultValue = 0L;

  private long usdVolumeEmail_;
  /// <summary>
  /// Volume threshold for notification by email
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UsdVolumeEmail {
    get { if ((_hasBits0 & 32) != 0) { return usdVolumeEmail_; } else { return UsdVolumeEmailDefaultValue; } }
    set {
      _hasBits0 |= 32;
      usdVolumeEmail_ = value;
    }
  }
  /// <summary>Gets whether the "usdVolumeEmail" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUsdVolumeEmail {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "usdVolumeEmail" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUsdVolumeEmail() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 9;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds when the Profile was last updated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "emails" field.</summary>
  public const int EmailsFieldNumber = 10;
  private static readonly pb::FieldCodec<string> _repeated_emails_codec
      = pb::FieldCodec.ForString(82);
  private readonly pbc::RepeatedField<string> emails_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// List of emails for email notification
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> Emails {
    get { return emails_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoTradeNotificationProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoTradeNotificationProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TradeNotificationProfileId != other.TradeNotificationProfileId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (BookType != other.BookType) return false;
    if (NotifyAtCbroker != other.NotifyAtCbroker) return false;
    if (NotifyAtEmail != other.NotifyAtEmail) return false;
    if (UsdVolumeCbroker != other.UsdVolumeCbroker) return false;
    if (UsdVolumeEmail != other.UsdVolumeEmail) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if(!emails_.Equals(other.emails_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTradeNotificationProfileId) hash ^= TradeNotificationProfileId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasBookType) hash ^= BookType.GetHashCode();
    if (HasNotifyAtCbroker) hash ^= NotifyAtCbroker.GetHashCode();
    if (HasNotifyAtEmail) hash ^= NotifyAtEmail.GetHashCode();
    if (HasUsdVolumeCbroker) hash ^= UsdVolumeCbroker.GetHashCode();
    if (HasUsdVolumeEmail) hash ^= UsdVolumeEmail.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    hash ^= emails_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTradeNotificationProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(TradeNotificationProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasBookType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) BookType);
    }
    if (HasNotifyAtCbroker) {
      output.WriteRawTag(40);
      output.WriteBool(NotifyAtCbroker);
    }
    if (HasNotifyAtEmail) {
      output.WriteRawTag(48);
      output.WriteBool(NotifyAtEmail);
    }
    if (HasUsdVolumeCbroker) {
      output.WriteRawTag(56);
      output.WriteInt64(UsdVolumeCbroker);
    }
    if (HasUsdVolumeEmail) {
      output.WriteRawTag(64);
      output.WriteInt64(UsdVolumeEmail);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    emails_.WriteTo(output, _repeated_emails_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTradeNotificationProfileId) {
      output.WriteRawTag(8);
      output.WriteInt64(TradeNotificationProfileId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasBookType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) BookType);
    }
    if (HasNotifyAtCbroker) {
      output.WriteRawTag(40);
      output.WriteBool(NotifyAtCbroker);
    }
    if (HasNotifyAtEmail) {
      output.WriteRawTag(48);
      output.WriteBool(NotifyAtEmail);
    }
    if (HasUsdVolumeCbroker) {
      output.WriteRawTag(56);
      output.WriteInt64(UsdVolumeCbroker);
    }
    if (HasUsdVolumeEmail) {
      output.WriteRawTag(64);
      output.WriteInt64(UsdVolumeEmail);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    emails_.WriteTo(ref output, _repeated_emails_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTradeNotificationProfileId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TradeNotificationProfileId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasBookType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BookType);
    }
    if (HasNotifyAtCbroker) {
      size += 1 + 1;
    }
    if (HasNotifyAtEmail) {
      size += 1 + 1;
    }
    if (HasUsdVolumeCbroker) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsdVolumeCbroker);
    }
    if (HasUsdVolumeEmail) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsdVolumeEmail);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    size += emails_.CalculateSize(_repeated_emails_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoTradeNotificationProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasTradeNotificationProfileId) {
      TradeNotificationProfileId = other.TradeNotificationProfileId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasBookType) {
      BookType = other.BookType;
    }
    if (other.HasNotifyAtCbroker) {
      NotifyAtCbroker = other.NotifyAtCbroker;
    }
    if (other.HasNotifyAtEmail) {
      NotifyAtEmail = other.NotifyAtEmail;
    }
    if (other.HasUsdVolumeCbroker) {
      UsdVolumeCbroker = other.UsdVolumeCbroker;
    }
    if (other.HasUsdVolumeEmail) {
      UsdVolumeEmail = other.UsdVolumeEmail;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    emails_.Add(other.emails_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TradeNotificationProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          BookType = (global::ProtoBookRequestType) input.ReadEnum();
          break;
        }
        case 40: {
          NotifyAtCbroker = input.ReadBool();
          break;
        }
        case 48: {
          NotifyAtEmail = input.ReadBool();
          break;
        }
        case 56: {
          UsdVolumeCbroker = input.ReadInt64();
          break;
        }
        case 64: {
          UsdVolumeEmail = input.ReadInt64();
          break;
        }
        case 72: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 82: {
          emails_.AddEntriesFrom(input, _repeated_emails_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TradeNotificationProfileId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 32: {
          BookType = (global::ProtoBookRequestType) input.ReadEnum();
          break;
        }
        case 40: {
          NotifyAtCbroker = input.ReadBool();
          break;
        }
        case 48: {
          NotifyAtEmail = input.ReadBool();
          break;
        }
        case 56: {
          UsdVolumeCbroker = input.ReadInt64();
          break;
        }
        case 64: {
          UsdVolumeEmail = input.ReadInt64();
          break;
        }
        case 72: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 82: {
          emails_.AddEntriesFrom(ref input, _repeated_emails_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Trader entity (with limited number of fields)
/// </summary>
public sealed partial class ProtoManagerLightTrader : pb::IMessage<ProtoManagerLightTrader>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoManagerLightTrader> _parser = new pb::MessageParser<ProtoManagerLightTrader>(() => new ProtoManagerLightTrader());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoManagerLightTrader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManagerLightTrader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManagerLightTrader(ProtoManagerLightTrader other) : this() {
    _hasBits0 = other._hasBits0;
    traderId_ = other.traderId_;
    login_ = other.login_;
    groupId_ = other.groupId_;
    depositAssetId_ = other.depositAssetId_;
    name_ = other.name_;
    lastName_ = other.lastName_;
    registrationTimestamp_ = other.registrationTimestamp_;
    subAccountOf_ = other.subAccountOf_;
    brokerName_ = other.brokerName_;
    strategyProviderName_ = other.strategyProviderName_;
    strategyProviderId_ = other.strategyProviderId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoManagerLightTrader Clone() {
    return new ProtoManagerLightTrader(this);
  }

  /// <summary>Field number for the "traderId" field.</summary>
  public const int TraderIdFieldNumber = 1;
  private readonly static long TraderIdDefaultValue = 0L;

  private long traderId_;
  /// <summary>
  /// ID of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderId {
    get { if ((_hasBits0 & 1) != 0) { return traderId_; } else { return TraderIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      traderId_ = value;
    }
  }
  /// <summary>Gets whether the "traderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "traderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "login" field.</summary>
  public const int LoginFieldNumber = 2;
  private readonly static long LoginDefaultValue = 0L;

  private long login_;
  /// <summary>
  /// Login of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Login {
    get { if ((_hasBits0 & 2) != 0) { return login_; } else { return LoginDefaultValue; } }
    set {
      _hasBits0 |= 2;
      login_ = value;
    }
  }
  /// <summary>Gets whether the "login" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLogin {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "login" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLogin() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "groupId" field.</summary>
  public const int GroupIdFieldNumber = 3;
  private readonly static long GroupIdDefaultValue = 0L;

  private long groupId_;
  /// <summary>
  /// Group ID of the Trader
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GroupId {
    get { if ((_hasBits0 & 4) != 0) { return groupId_; } else { return GroupIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      groupId_ = value;
    }
  }
  /// <summary>Gets whether the "groupId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGroupId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "groupId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGroupId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "depositAssetId" field.</summary>
  public const int DepositAssetIdFieldNumber = 4;
  private readonly static long DepositAssetIdDefaultValue = 0L;

  private long depositAssetId_;
  /// <summary>
  /// ID of deposit Asset
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DepositAssetId {
    get { if ((_hasBits0 & 8) != 0) { return depositAssetId_; } else { return DepositAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      depositAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "depositAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositAssetId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "depositAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositAssetId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 5;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Trader name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "lastName" field.</summary>
  public const int LastNameFieldNumber = 6;
  private readonly static string LastNameDefaultValue = "";

  private string lastName_;
  /// <summary>
  /// Trader last name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LastName {
    get { return lastName_ ?? LastNameDefaultValue; }
    set {
      lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "lastName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastName {
    get { return lastName_ != null; }
  }
  /// <summary>Clears the value of the "lastName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastName() {
    lastName_ = null;
  }

  /// <summary>Field number for the "registrationTimestamp" field.</summary>
  public const int RegistrationTimestampFieldNumber = 7;
  private readonly static long RegistrationTimestampDefaultValue = 0L;

  private long registrationTimestamp_;
  /// <summary>
  /// UNIX timestamp in milliseconds of Trader registration
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RegistrationTimestamp {
    get { if ((_hasBits0 & 16) != 0) { return registrationTimestamp_; } else { return RegistrationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 16;
      registrationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "registrationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRegistrationTimestamp {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "registrationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegistrationTimestamp() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "subAccountOf" field.</summary>
  public const int SubAccountOfFieldNumber = 8;
  private readonly static long SubAccountOfDefaultValue = 0L;

  private long subAccountOf_;
  /// <summary>
  /// Determines parent Account of Account, if it is Subaccount. Used for Copy service
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SubAccountOf {
    get { if ((_hasBits0 & 32) != 0) { return subAccountOf_; } else { return SubAccountOfDefaultValue; } }
    set {
      _hasBits0 |= 32;
      subAccountOf_ = value;
    }
  }
  /// <summary>Gets whether the "subAccountOf" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSubAccountOf {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "subAccountOf" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSubAccountOf() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "brokerName" field.</summary>
  public const int BrokerNameFieldNumber = 9;
  private readonly static string BrokerNameDefaultValue = "";

  private string brokerName_;
  /// <summary>
  /// Some whitelabel assigned to Trader by the Broker at the moment of Account creation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BrokerName {
    get { return brokerName_ ?? BrokerNameDefaultValue; }
    set {
      brokerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "brokerName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBrokerName {
    get { return brokerName_ != null; }
  }
  /// <summary>Clears the value of the "brokerName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBrokerName() {
    brokerName_ = null;
  }

  /// <summary>Field number for the "strategyProviderName" field.</summary>
  public const int StrategyProviderNameFieldNumber = 10;
  private readonly static string StrategyProviderNameDefaultValue = "";

  private string strategyProviderName_;
  /// <summary>
  /// If the trader is a Subaccount, then this field contains Strategy Provider's name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string StrategyProviderName {
    get { return strategyProviderName_ ?? StrategyProviderNameDefaultValue; }
    set {
      strategyProviderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "strategyProviderName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStrategyProviderName {
    get { return strategyProviderName_ != null; }
  }
  /// <summary>Clears the value of the "strategyProviderName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStrategyProviderName() {
    strategyProviderName_ = null;
  }

  /// <summary>Field number for the "strategyProviderId" field.</summary>
  public const int StrategyProviderIdFieldNumber = 11;
  private readonly static long StrategyProviderIdDefaultValue = 0L;

  private long strategyProviderId_;
  /// <summary>
  /// If the trader is a Subaccount, then this field contains Strategy Provider's ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StrategyProviderId {
    get { if ((_hasBits0 & 64) != 0) { return strategyProviderId_; } else { return StrategyProviderIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      strategyProviderId_ = value;
    }
  }
  /// <summary>Gets whether the "strategyProviderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStrategyProviderId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "strategyProviderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStrategyProviderId() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoManagerLightTrader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoManagerLightTrader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TraderId != other.TraderId) return false;
    if (Login != other.Login) return false;
    if (GroupId != other.GroupId) return false;
    if (DepositAssetId != other.DepositAssetId) return false;
    if (Name != other.Name) return false;
    if (LastName != other.LastName) return false;
    if (RegistrationTimestamp != other.RegistrationTimestamp) return false;
    if (SubAccountOf != other.SubAccountOf) return false;
    if (BrokerName != other.BrokerName) return false;
    if (StrategyProviderName != other.StrategyProviderName) return false;
    if (StrategyProviderId != other.StrategyProviderId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTraderId) hash ^= TraderId.GetHashCode();
    if (HasLogin) hash ^= Login.GetHashCode();
    if (HasGroupId) hash ^= GroupId.GetHashCode();
    if (HasDepositAssetId) hash ^= DepositAssetId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasLastName) hash ^= LastName.GetHashCode();
    if (HasRegistrationTimestamp) hash ^= RegistrationTimestamp.GetHashCode();
    if (HasSubAccountOf) hash ^= SubAccountOf.GetHashCode();
    if (HasBrokerName) hash ^= BrokerName.GetHashCode();
    if (HasStrategyProviderName) hash ^= StrategyProviderName.GetHashCode();
    if (HasStrategyProviderId) hash ^= StrategyProviderId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTraderId) {
      output.WriteRawTag(8);
      output.WriteInt64(TraderId);
    }
    if (HasLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(Login);
    }
    if (HasGroupId) {
      output.WriteRawTag(24);
      output.WriteInt64(GroupId);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(32);
      output.WriteInt64(DepositAssetId);
    }
    if (HasName) {
      output.WriteRawTag(42);
      output.WriteString(Name);
    }
    if (HasLastName) {
      output.WriteRawTag(50);
      output.WriteString(LastName);
    }
    if (HasRegistrationTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(RegistrationTimestamp);
    }
    if (HasSubAccountOf) {
      output.WriteRawTag(64);
      output.WriteInt64(SubAccountOf);
    }
    if (HasBrokerName) {
      output.WriteRawTag(74);
      output.WriteString(BrokerName);
    }
    if (HasStrategyProviderName) {
      output.WriteRawTag(82);
      output.WriteString(StrategyProviderName);
    }
    if (HasStrategyProviderId) {
      output.WriteRawTag(88);
      output.WriteInt64(StrategyProviderId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTraderId) {
      output.WriteRawTag(8);
      output.WriteInt64(TraderId);
    }
    if (HasLogin) {
      output.WriteRawTag(16);
      output.WriteInt64(Login);
    }
    if (HasGroupId) {
      output.WriteRawTag(24);
      output.WriteInt64(GroupId);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(32);
      output.WriteInt64(DepositAssetId);
    }
    if (HasName) {
      output.WriteRawTag(42);
      output.WriteString(Name);
    }
    if (HasLastName) {
      output.WriteRawTag(50);
      output.WriteString(LastName);
    }
    if (HasRegistrationTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(RegistrationTimestamp);
    }
    if (HasSubAccountOf) {
      output.WriteRawTag(64);
      output.WriteInt64(SubAccountOf);
    }
    if (HasBrokerName) {
      output.WriteRawTag(74);
      output.WriteString(BrokerName);
    }
    if (HasStrategyProviderName) {
      output.WriteRawTag(82);
      output.WriteString(StrategyProviderName);
    }
    if (HasStrategyProviderId) {
      output.WriteRawTag(88);
      output.WriteInt64(StrategyProviderId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTraderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderId);
    }
    if (HasLogin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Login);
    }
    if (HasGroupId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupId);
    }
    if (HasDepositAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepositAssetId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasLastName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
    }
    if (HasRegistrationTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegistrationTimestamp);
    }
    if (HasSubAccountOf) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SubAccountOf);
    }
    if (HasBrokerName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerName);
    }
    if (HasStrategyProviderName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StrategyProviderName);
    }
    if (HasStrategyProviderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StrategyProviderId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoManagerLightTrader other) {
    if (other == null) {
      return;
    }
    if (other.HasTraderId) {
      TraderId = other.TraderId;
    }
    if (other.HasLogin) {
      Login = other.Login;
    }
    if (other.HasGroupId) {
      GroupId = other.GroupId;
    }
    if (other.HasDepositAssetId) {
      DepositAssetId = other.DepositAssetId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasLastName) {
      LastName = other.LastName;
    }
    if (other.HasRegistrationTimestamp) {
      RegistrationTimestamp = other.RegistrationTimestamp;
    }
    if (other.HasSubAccountOf) {
      SubAccountOf = other.SubAccountOf;
    }
    if (other.HasBrokerName) {
      BrokerName = other.BrokerName;
    }
    if (other.HasStrategyProviderName) {
      StrategyProviderName = other.StrategyProviderName;
    }
    if (other.HasStrategyProviderId) {
      StrategyProviderId = other.StrategyProviderId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TraderId = input.ReadInt64();
          break;
        }
        case 16: {
          Login = input.ReadInt64();
          break;
        }
        case 24: {
          GroupId = input.ReadInt64();
          break;
        }
        case 32: {
          DepositAssetId = input.ReadInt64();
          break;
        }
        case 42: {
          Name = input.ReadString();
          break;
        }
        case 50: {
          LastName = input.ReadString();
          break;
        }
        case 56: {
          RegistrationTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          SubAccountOf = input.ReadInt64();
          break;
        }
        case 74: {
          BrokerName = input.ReadString();
          break;
        }
        case 82: {
          StrategyProviderName = input.ReadString();
          break;
        }
        case 88: {
          StrategyProviderId = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TraderId = input.ReadInt64();
          break;
        }
        case 16: {
          Login = input.ReadInt64();
          break;
        }
        case 24: {
          GroupId = input.ReadInt64();
          break;
        }
        case 32: {
          DepositAssetId = input.ReadInt64();
          break;
        }
        case 42: {
          Name = input.ReadString();
          break;
        }
        case 50: {
          LastName = input.ReadString();
          break;
        }
        case 56: {
          RegistrationTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          SubAccountOf = input.ReadInt64();
          break;
        }
        case 74: {
          BrokerName = input.ReadString();
          break;
        }
        case 82: {
          StrategyProviderName = input.ReadString();
          break;
        }
        case 88: {
          StrategyProviderId = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Message with trend bar to be inserted
/// </summary>
public sealed partial class ProtoInsertTrendbar : pb::IMessage<ProtoInsertTrendbar>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoInsertTrendbar> _parser = new pb::MessageParser<ProtoInsertTrendbar>(() => new ProtoInsertTrendbar());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoInsertTrendbar> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInsertTrendbar() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInsertTrendbar(ProtoInsertTrendbar other) : this() {
    _hasBits0 = other._hasBits0;
    timestamp_ = other.timestamp_;
    open_ = other.open_;
    high_ = other.high_;
    low_ = other.low_;
    close_ = other.close_;
    volume_ = other.volume_;
    trendbarId_ = other.trendbarId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInsertTrendbar Clone() {
    return new ProtoInsertTrendbar(this);
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 1;
  private readonly static long TimestampDefaultValue = 0L;

  private long timestamp_;
  /// <summary>
  /// Timestamp of the trend bar
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Timestamp {
    get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 1;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimestamp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimestamp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "open" field.</summary>
  public const int OpenFieldNumber = 2;
  private readonly static double OpenDefaultValue = 0D;

  private double open_;
  /// <summary>
  /// Opening price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double Open {
    get { if ((_hasBits0 & 2) != 0) { return open_; } else { return OpenDefaultValue; } }
    set {
      _hasBits0 |= 2;
      open_ = value;
    }
  }
  /// <summary>Gets whether the "open" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOpen {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "open" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOpen() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "high" field.</summary>
  public const int HighFieldNumber = 3;
  private readonly static double HighDefaultValue = 0D;

  private double high_;
  /// <summary>
  /// Highest price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double High {
    get { if ((_hasBits0 & 4) != 0) { return high_; } else { return HighDefaultValue; } }
    set {
      _hasBits0 |= 4;
      high_ = value;
    }
  }
  /// <summary>Gets whether the "high" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHigh {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "high" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHigh() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "low" field.</summary>
  public const int LowFieldNumber = 4;
  private readonly static double LowDefaultValue = 0D;

  private double low_;
  /// <summary>
  /// Lowest price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double Low {
    get { if ((_hasBits0 & 8) != 0) { return low_; } else { return LowDefaultValue; } }
    set {
      _hasBits0 |= 8;
      low_ = value;
    }
  }
  /// <summary>Gets whether the "low" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLow {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "low" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLow() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "close" field.</summary>
  public const int CloseFieldNumber = 5;
  private readonly static double CloseDefaultValue = 0D;

  private double close_;
  /// <summary>
  /// Closing price
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double Close {
    get { if ((_hasBits0 & 16) != 0) { return close_; } else { return CloseDefaultValue; } }
    set {
      _hasBits0 |= 16;
      close_ = value;
    }
  }
  /// <summary>Gets whether the "close" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClose {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "close" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClose() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 6;
  private readonly static uint VolumeDefaultValue = 0;

  private uint volume_;
  /// <summary>
  /// Volume in ticks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Volume {
    get { if ((_hasBits0 & 32) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "trendbarId" field.</summary>
  public const int TrendbarIdFieldNumber = 7;
  private readonly static int TrendbarIdDefaultValue = 0;

  private int trendbarId_;
  /// <summary>
  /// Id of the trend bar, used to identify rejected trend bar in ProtoInsertTrendbarRes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TrendbarId {
    get { if ((_hasBits0 & 64) != 0) { return trendbarId_; } else { return TrendbarIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      trendbarId_ = value;
    }
  }
  /// <summary>Gets whether the "trendbarId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTrendbarId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "trendbarId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTrendbarId() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoInsertTrendbar);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoInsertTrendbar other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Timestamp != other.Timestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Open, other.Open)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Close, other.Close)) return false;
    if (Volume != other.Volume) return false;
    if (TrendbarId != other.TrendbarId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (HasOpen) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Open);
    if (HasHigh) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
    if (HasLow) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
    if (HasClose) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Close);
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasTrendbarId) hash ^= TrendbarId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTimestamp) {
      output.WriteRawTag(8);
      output.WriteInt64(Timestamp);
    }
    if (HasOpen) {
      output.WriteRawTag(17);
      output.WriteDouble(Open);
    }
    if (HasHigh) {
      output.WriteRawTag(25);
      output.WriteDouble(High);
    }
    if (HasLow) {
      output.WriteRawTag(33);
      output.WriteDouble(Low);
    }
    if (HasClose) {
      output.WriteRawTag(41);
      output.WriteDouble(Close);
    }
    if (HasVolume) {
      output.WriteRawTag(48);
      output.WriteUInt32(Volume);
    }
    if (HasTrendbarId) {
      output.WriteRawTag(56);
      output.WriteInt32(TrendbarId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTimestamp) {
      output.WriteRawTag(8);
      output.WriteInt64(Timestamp);
    }
    if (HasOpen) {
      output.WriteRawTag(17);
      output.WriteDouble(Open);
    }
    if (HasHigh) {
      output.WriteRawTag(25);
      output.WriteDouble(High);
    }
    if (HasLow) {
      output.WriteRawTag(33);
      output.WriteDouble(Low);
    }
    if (HasClose) {
      output.WriteRawTag(41);
      output.WriteDouble(Close);
    }
    if (HasVolume) {
      output.WriteRawTag(48);
      output.WriteUInt32(Volume);
    }
    if (HasTrendbarId) {
      output.WriteRawTag(56);
      output.WriteInt32(TrendbarId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (HasOpen) {
      size += 1 + 8;
    }
    if (HasHigh) {
      size += 1 + 8;
    }
    if (HasLow) {
      size += 1 + 8;
    }
    if (HasClose) {
      size += 1 + 8;
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Volume);
    }
    if (HasTrendbarId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrendbarId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoInsertTrendbar other) {
    if (other == null) {
      return;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    if (other.HasOpen) {
      Open = other.Open;
    }
    if (other.HasHigh) {
      High = other.High;
    }
    if (other.HasLow) {
      Low = other.Low;
    }
    if (other.HasClose) {
      Close = other.Close;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasTrendbarId) {
      TrendbarId = other.TrendbarId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 17: {
          Open = input.ReadDouble();
          break;
        }
        case 25: {
          High = input.ReadDouble();
          break;
        }
        case 33: {
          Low = input.ReadDouble();
          break;
        }
        case 41: {
          Close = input.ReadDouble();
          break;
        }
        case 48: {
          Volume = input.ReadUInt32();
          break;
        }
        case 56: {
          TrendbarId = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 17: {
          Open = input.ReadDouble();
          break;
        }
        case 25: {
          High = input.ReadDouble();
          break;
        }
        case 33: {
          Low = input.ReadDouble();
          break;
        }
        case 41: {
          Close = input.ReadDouble();
          break;
        }
        case 48: {
          Volume = input.ReadUInt32();
          break;
        }
        case 56: {
          TrendbarId = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Message with the list of the invalid trend bars which were rejected during ProtoInsertTrendbarReq
/// </summary>
public sealed partial class ProtoInsertTrendbarError : pb::IMessage<ProtoInsertTrendbarError>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoInsertTrendbarError> _parser = new pb::MessageParser<ProtoInsertTrendbarError>(() => new ProtoInsertTrendbarError());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoInsertTrendbarError> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CSModelMessagesExternalReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInsertTrendbarError() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInsertTrendbarError(ProtoInsertTrendbarError other) : this() {
    _hasBits0 = other._hasBits0;
    trendbarId_ = other.trendbarId_;
    errorDescription_ = other.errorDescription_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoInsertTrendbarError Clone() {
    return new ProtoInsertTrendbarError(this);
  }

  /// <summary>Field number for the "trendbarId" field.</summary>
  public const int TrendbarIdFieldNumber = 1;
  private readonly static int TrendbarIdDefaultValue = 0;

  private int trendbarId_;
  /// <summary>
  /// Id of the rejected trend bar
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TrendbarId {
    get { if ((_hasBits0 & 1) != 0) { return trendbarId_; } else { return TrendbarIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      trendbarId_ = value;
    }
  }
  /// <summary>Gets whether the "trendbarId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTrendbarId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "trendbarId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTrendbarId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "errorDescription" field.</summary>
  public const int ErrorDescriptionFieldNumber = 2;
  private readonly static string ErrorDescriptionDefaultValue = "";

  private string errorDescription_;
  /// <summary>
  /// Error description
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ErrorDescription {
    get { return errorDescription_ ?? ErrorDescriptionDefaultValue; }
    set {
      errorDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "errorDescription" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasErrorDescription {
    get { return errorDescription_ != null; }
  }
  /// <summary>Clears the value of the "errorDescription" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearErrorDescription() {
    errorDescription_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoInsertTrendbarError);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoInsertTrendbarError other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TrendbarId != other.TrendbarId) return false;
    if (ErrorDescription != other.ErrorDescription) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTrendbarId) hash ^= TrendbarId.GetHashCode();
    if (HasErrorDescription) hash ^= ErrorDescription.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTrendbarId) {
      output.WriteRawTag(8);
      output.WriteInt32(TrendbarId);
    }
    if (HasErrorDescription) {
      output.WriteRawTag(18);
      output.WriteString(ErrorDescription);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTrendbarId) {
      output.WriteRawTag(8);
      output.WriteInt32(TrendbarId);
    }
    if (HasErrorDescription) {
      output.WriteRawTag(18);
      output.WriteString(ErrorDescription);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTrendbarId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrendbarId);
    }
    if (HasErrorDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDescription);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoInsertTrendbarError other) {
    if (other == null) {
      return;
    }
    if (other.HasTrendbarId) {
      TrendbarId = other.TrendbarId;
    }
    if (other.HasErrorDescription) {
      ErrorDescription = other.ErrorDescription;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TrendbarId = input.ReadInt32();
          break;
        }
        case 18: {
          ErrorDescription = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TrendbarId = input.ReadInt32();
          break;
        }
        case 18: {
          ErrorDescription = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
